/* Generated by Cython 0.28.4 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_28_4"
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (0 && PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0; // PyThread_create_key reports success always
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif // TSS (Thread Specific Storage) API
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
  #define PyObject_Unicode             PyObject_Str
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : (Py_INCREF(func), func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__jsbsim
#define __PYX_HAVE_API__jsbsim
/* Early includes */
#include <string.h>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <string>
#include <vector>
#include "ExceptionManagement.h"
#include "initialization/FGInitialCondition.h"
#include "input_output/FGPropertyManager.h"
#include "math/FGColumnVector3.h"
#include "math/FGMatrix33.h"
#include "models/FGAerodynamics.h"
#include "models/FGAircraft.h"
#include "models/FGAtmosphere.h"
#include "models/FGAuxiliary.h"
#include "models/FGGroundReactions.h"
#include "models/FGLGear.h"
#include "models/FGMassBalance.h"
#include "models/FGPropagate.h"
#include "models/FGPropulsion.h"
#include "simgear/misc/sg_path.hxx"
#include "FGFDMExec.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "stringsource",
  "jsbsim.pyx",
};

/*--- Type declarations ---*/
struct __pyx_obj_6jsbsim_FGPropagate;
struct __pyx_obj_6jsbsim_FGPropertyManager;
struct __pyx_obj_6jsbsim_FGGroundReactions;
struct __pyx_obj_6jsbsim_FGLGear;
struct __pyx_obj_6jsbsim_FGAuxiliary;
struct __pyx_obj_6jsbsim_FGAerodynamics;
struct __pyx_obj_6jsbsim_FGAircraft;
struct __pyx_obj_6jsbsim_FGAtmosphere;
struct __pyx_obj_6jsbsim_FGMassBalance;
struct __pyx_obj_6jsbsim_FGFDMExec;

/* "jsbsim.pyx":29
 *     return numpy.mat([v.Entry(1), v.Entry(2), v.Entry(3)]).T
 * 
 * cdef class FGPropagate:             # <<<<<<<<<<<<<<
 * 
 *     cdef c_FGPropagate *thisptr
 */
struct __pyx_obj_6jsbsim_FGPropagate {
  PyObject_HEAD
  JSBSim::FGPropagate *thisptr;
};


/* "jsbsim.pyx":45
 *         return convertToNumpyVec(self.thisptr.GetUVW())
 * 
 * cdef class FGPropertyManager:             # <<<<<<<<<<<<<<
 * 
 *      cdef c_FGPropertyManager *thisptr
 */
struct __pyx_obj_6jsbsim_FGPropertyManager {
  PyObject_HEAD
  JSBSim::FGPropertyManager *thisptr;
  bool thisptr_owner;
};


/* "jsbsim.pyx":69
 *          return self.thisptr.HasNode(path.encode())
 * 
 * cdef class FGGroundReactions:             # <<<<<<<<<<<<<<
 * 
 *     cdef c_FGGroundReactions *thisptr
 */
struct __pyx_obj_6jsbsim_FGGroundReactions {
  PyObject_HEAD
  JSBSim::FGGroundReactions *thisptr;
};


/* "jsbsim.pyx":84
 *         return self.thisptr.GetNumGearUnits()
 * 
 * cdef class FGLGear:             # <<<<<<<<<<<<<<
 * 
 *     cdef c_FGLGear *thisptr
 */
struct __pyx_obj_6jsbsim_FGLGear {
  PyObject_HEAD
  JSBSim::FGLGear *thisptr;
};


/* "jsbsim.pyx":109
 *         return convertToNumpyVec(self.thisptr.GetActingLocation())
 * 
 * cdef class FGAuxiliary:             # <<<<<<<<<<<<<<
 * 
 *     cdef c_FGAuxiliary *thisptr
 */
struct __pyx_obj_6jsbsim_FGAuxiliary {
  PyObject_HEAD
  JSBSim::FGAuxiliary *thisptr;
};


/* "jsbsim.pyx":122
 *         return convertToNumpyMat(self.thisptr.GetTb2w())
 * 
 * cdef class FGAerodynamics:             # <<<<<<<<<<<<<<
 * 
 *     cdef c_FGAerodynamics *thisptr
 */
struct __pyx_obj_6jsbsim_FGAerodynamics {
  PyObject_HEAD
  JSBSim::FGAerodynamics *thisptr;
};


/* "jsbsim.pyx":135
 *         return convertToNumpyVec(self.thisptr.GetForces())
 * 
 * cdef class FGAircraft:             # <<<<<<<<<<<<<<
 * 
 *     cdef c_FGAircraft *thisptr
 */
struct __pyx_obj_6jsbsim_FGAircraft {
  PyObject_HEAD
  JSBSim::FGAircraft *thisptr;
};


/* "jsbsim.pyx":145
 *         return convertToNumpyVec(self.thisptr.GetXYZrp())
 * 
 * cdef class FGAtmosphere:             # <<<<<<<<<<<<<<
 * 
 *     cdef c_FGAtmosphere *thisptr
 */
struct __pyx_obj_6jsbsim_FGAtmosphere {
  PyObject_HEAD
  JSBSim::FGAtmosphere *thisptr;
};


/* "jsbsim.pyx":155
 *         return self.thisptr.SetTemperature(t, h, unit)
 * 
 * cdef class FGMassBalance:             # <<<<<<<<<<<<<<
 * 
 *     cdef c_FGMassBalance *thisptr
 */
struct __pyx_obj_6jsbsim_FGMassBalance {
  PyObject_HEAD
  JSBSim::FGMassBalance *thisptr;
};


/* "jsbsim.pyx":166
 * 
 * # this is the python wrapper class
 * cdef class FGFDMExec:             # <<<<<<<<<<<<<<
 * 
 *     cdef c_FGFDMExec *thisptr      # hold a C++ instance which we're wrapping
 */
struct __pyx_obj_6jsbsim_FGFDMExec {
  PyObject_HEAD
  JSBSim::FGFDMExec *thisptr;
};


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* GetModuleGlobalName.proto */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg);

/* append.proto */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* IncludeCppStringH.proto */
#include <string>

/* decode_c_string_utf16.proto */
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 0;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16LE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = -1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16BE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}

/* decode_c_bytes.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* decode_cpp_string.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_cpp_string(
         std::string cppstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    return __Pyx_decode_c_bytes(
        cppstring.data(), cppstring.size(), start, stop, encoding, errors, decode_func);
}

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* Print.proto */
static int __Pyx_Print(PyObject*, PyObject *, int);
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE enum JSBSim::FGAtmosphere::eTemperature __Pyx_PyInt_As_enum__JSBSim_3a__3a_FGAtmosphere_3a__3a_eTemperature(PyObject *);

/* PrintOne.proto */
static int __Pyx_PrintOne(PyObject* stream, PyObject *o);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libcpp' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'jsbsim' */
static PyTypeObject *__pyx_ptype_6jsbsim_FGPropagate = 0;
static PyTypeObject *__pyx_ptype_6jsbsim_FGPropertyManager = 0;
static PyTypeObject *__pyx_ptype_6jsbsim_FGGroundReactions = 0;
static PyTypeObject *__pyx_ptype_6jsbsim_FGLGear = 0;
static PyTypeObject *__pyx_ptype_6jsbsim_FGAuxiliary = 0;
static PyTypeObject *__pyx_ptype_6jsbsim_FGAerodynamics = 0;
static PyTypeObject *__pyx_ptype_6jsbsim_FGAircraft = 0;
static PyTypeObject *__pyx_ptype_6jsbsim_FGAtmosphere = 0;
static PyTypeObject *__pyx_ptype_6jsbsim_FGMassBalance = 0;
static PyTypeObject *__pyx_ptype_6jsbsim_FGFDMExec = 0;
static PyObject *__pyx_f_6jsbsim_convertToNumpyMat(JSBSim::FGMatrix33 const &); /*proto*/
static PyObject *__pyx_f_6jsbsim_convertToNumpyVec(JSBSim::FGColumnVector3 const &); /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
#define __Pyx_MODULE_NAME "jsbsim"
extern int __pyx_module_is_main_jsbsim;
int __pyx_module_is_main_jsbsim = 0;

/* Implementation of 'jsbsim' */
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_IOError;
static PyObject *__pyx_builtin_KeyError;
static const char __pyx_k_T[] = "T";
static const char __pyx_k_h[] = "h";
static const char __pyx_k_n[] = "n";
static const char __pyx_k_t[] = "t";
static const char __pyx_k_dt[] = "dt";
static const char __pyx_k_os[] = "os";
static const char __pyx_k__23[] = "\t";
static const char __pyx_k__25[] = "";
static const char __pyx_k__29[] = "\n";
static const char __pyx_k__31[] = " ";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_get[] = "get";
static const char __pyx_k_mat[] = "mat";
static const char __pyx_k_run[] = "run";
static const char __pyx_k_t_2[] = "t:";
static const char __pyx_k_dt_2[] = "dt: ";
static const char __pyx_k_file[] = "file";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_path[] = "path";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_unit[] = "unit";
static const char __pyx_k_Linux[] = "Linux";
static const char __pyx_k_fname[] = "fname";
static const char __pyx_k_isdir[] = "isdir";
static const char __pyx_k_model[] = "model";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_split[] = "split";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_Darwin[] = "Darwin";
static const char __pyx_k_JSBSIM[] = "JSBSIM";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_engine[] = "engine";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_name_2[] = "__name__";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_rstrip[] = "rstrip";
static const char __pyx_k_run_ic[] = "run_ic";
static const char __pyx_k_script[] = "script";
static const char __pyx_k_set_dt[] = "set_dt";
static const char __pyx_k_system[] = "system";
static const char __pyx_k_IOError[] = "IOError";
static const char __pyx_k_Windows[] = "Windows";
static const char __pyx_k_delta_t[] = "delta_t";
static const char __pyx_k_environ[] = "environ";
static const char __pyx_k_hasNode[] = "hasNode";
static const char __pyx_k_pm_root[] = "pm_root";
static const char __pyx_k_rstfile[] = "rstfile";
static const char __pyx_k_systems[] = "systems";
static const char __pyx_k_t_final[] = "t_final";
static const char __pyx_k_verbose[] = "verbose";
static const char __pyx_k_KeyError[] = "KeyError";
static const char __pyx_k_aircraft[] = "aircraft";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_initfile[] = "initfile";
static const char __pyx_k_platform[] = "platform";
static const char __pyx_k_root_dir[] = "root_dir";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_engine_path[] = "engine_path";
static const char __pyx_k_get_delta_t[] = "get_delta_t";
static const char __pyx_k_get_root_dir[] = "get_root_dir";
static const char __pyx_k_get_sim_time[] = "get_sim_time";
static const char __pyx_k_new_instance[] = "new_instance";
static const char __pyx_k_search_paths[] = "search_paths";
static const char __pyx_k_set_root_dir[] = "set_root_dir";
static const char __pyx_k_systems_path[] = "systems_path";
static const char __pyx_k_aircraft_path[] = "aircraft_path";
static const char __pyx_k_find_root_dir[] = "find_root_dir";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_useStoredPath[] = "useStoredPath";
static const char __pyx_k_get_engine_path[] = "get_engine_path";
static const char __pyx_k_set_engine_path[] = "set_engine_path";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_No_matches_found[] = "No matches found";
static const char __pyx_k_get_systems_path[] = "get_systems_path";
static const char __pyx_k_set_systems_path[] = "set_systems_path";
static const char __pyx_k_usr_share_JSBSim[] = "/usr/share/JSBSim/";
static const char __pyx_k_No_property_named[] = "No property named {}";
static const char __pyx_k_add_model_to_path[] = "add_model_to_path";
static const char __pyx_k_get_aircraft_path[] = "get_aircraft_path";
static const char __pyx_k_record_properties[] = "record_properties";
static const char __pyx_k_set_aircraft_path[] = "set_aircraft_path";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_get_property_value[] = "get_property_value";
static const char __pyx_k_set_property_value[] = "set_property_value";
static const char __pyx_k_get_property_manager[] = "get_property_manager";
static const char __pyx_k_opt_local_share_JSBSim[] = "/opt/local/share/JSBSim/";
static const char __pyx_k_query_property_catalog[] = "query_property_catalog";
static const char __pyx_k_usr_local_share_JSBSim[] = "/usr/local/share/JSBSim/";
static const char __pyx_k_Can_t_find_root_directory_0[] = "Can't find root directory: {0}";
static const char __pyx_k_Could_not_find_JSBSim_root_try_d[] = "Could not find JSBSim root, try defining JSBSIM environment variable";
static const char __pyx_k_FGFDMExec_root_dir_0_aircraft_pa[] = "FGFDMExec \nroot dir\t:\t{0}\naircraft path\t:\t{1}\nengine path\t:\t{2}\nsystems path\t:\t{3}\n";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_self_thisptr_cannot_be_converted[] = "self.thisptr cannot be converted to a Python object for pickling";
static PyObject *__pyx_kp_s_Can_t_find_root_directory_0;
static PyObject *__pyx_kp_s_Could_not_find_JSBSim_root_try_d;
static PyObject *__pyx_n_s_Darwin;
static PyObject *__pyx_kp_s_FGFDMExec_root_dir_0_aircraft_pa;
static PyObject *__pyx_n_s_IOError;
static PyObject *__pyx_n_s_JSBSIM;
static PyObject *__pyx_n_s_KeyError;
static PyObject *__pyx_n_s_Linux;
static PyObject *__pyx_n_s_MemoryError;
static PyObject *__pyx_kp_s_No_matches_found;
static PyObject *__pyx_kp_s_No_property_named;
static PyObject *__pyx_n_s_T;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_Windows;
static PyObject *__pyx_kp_s__23;
static PyObject *__pyx_kp_s__25;
static PyObject *__pyx_kp_s__29;
static PyObject *__pyx_kp_s__31;
static PyObject *__pyx_n_s_add_model_to_path;
static PyObject *__pyx_n_s_aircraft;
static PyObject *__pyx_n_s_aircraft_path;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_delta_t;
static PyObject *__pyx_n_s_dt;
static PyObject *__pyx_kp_s_dt_2;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_engine;
static PyObject *__pyx_n_s_engine_path;
static PyObject *__pyx_n_s_environ;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_find_root_dir;
static PyObject *__pyx_n_s_fname;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_get;
static PyObject *__pyx_n_s_get_aircraft_path;
static PyObject *__pyx_n_s_get_delta_t;
static PyObject *__pyx_n_s_get_engine_path;
static PyObject *__pyx_n_s_get_property_manager;
static PyObject *__pyx_n_s_get_property_value;
static PyObject *__pyx_n_s_get_root_dir;
static PyObject *__pyx_n_s_get_sim_time;
static PyObject *__pyx_n_s_get_systems_path;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_h;
static PyObject *__pyx_n_s_hasNode;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_initfile;
static PyObject *__pyx_n_s_isdir;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_mat;
static PyObject *__pyx_n_s_model;
static PyObject *__pyx_n_s_n;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_n_s_new_instance;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_kp_s_opt_local_share_JSBSim;
static PyObject *__pyx_n_s_os;
static PyObject *__pyx_n_s_path;
static PyObject *__pyx_n_s_platform;
static PyObject *__pyx_n_s_pm_root;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_query_property_catalog;
static PyObject *__pyx_n_s_record_properties;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_root_dir;
static PyObject *__pyx_n_s_rstfile;
static PyObject *__pyx_n_s_rstrip;
static PyObject *__pyx_n_s_run;
static PyObject *__pyx_n_s_run_ic;
static PyObject *__pyx_n_s_script;
static PyObject *__pyx_n_s_search_paths;
static PyObject *__pyx_kp_s_self_thisptr_cannot_be_converted;
static PyObject *__pyx_n_s_set_aircraft_path;
static PyObject *__pyx_n_s_set_dt;
static PyObject *__pyx_n_s_set_engine_path;
static PyObject *__pyx_n_s_set_property_value;
static PyObject *__pyx_n_s_set_root_dir;
static PyObject *__pyx_n_s_set_systems_path;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_split;
static PyObject *__pyx_n_s_system;
static PyObject *__pyx_n_s_systems;
static PyObject *__pyx_n_s_systems_path;
static PyObject *__pyx_n_s_t;
static PyObject *__pyx_kp_s_t_2;
static PyObject *__pyx_n_s_t_final;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_unit;
static PyObject *__pyx_n_s_useStoredPath;
static PyObject *__pyx_kp_s_usr_local_share_JSBSim;
static PyObject *__pyx_kp_s_usr_share_JSBSim;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_s_verbose;
static int __pyx_pf_6jsbsim_11FGPropagate___init__(struct __pyx_obj_6jsbsim_FGPropagate *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_11FGPropagate_2get_Tl2b(struct __pyx_obj_6jsbsim_FGPropagate *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_11FGPropagate_4get_Tec2b(struct __pyx_obj_6jsbsim_FGPropagate *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_11FGPropagate_6get_uvw(struct __pyx_obj_6jsbsim_FGPropagate *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_11FGPropagate_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6jsbsim_FGPropagate *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_11FGPropagate_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6jsbsim_FGPropagate *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6jsbsim_17FGPropertyManager___cinit__(struct __pyx_obj_6jsbsim_FGPropertyManager *__pyx_v_self, PyObject *__pyx_v_new_instance); /* proto */
static void __pyx_pf_6jsbsim_17FGPropertyManager_2__dealloc__(struct __pyx_obj_6jsbsim_FGPropertyManager *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_17FGPropertyManager_4hasNode(struct __pyx_obj_6jsbsim_FGPropertyManager *__pyx_v_self, PyObject *__pyx_v_path); /* proto */
static PyObject *__pyx_pf_6jsbsim_17FGPropertyManager_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6jsbsim_FGPropertyManager *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_17FGPropertyManager_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6jsbsim_FGPropertyManager *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6jsbsim_17FGGroundReactions___init__(struct __pyx_obj_6jsbsim_FGGroundReactions *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_17FGGroundReactions_2get_gear_unit(struct __pyx_obj_6jsbsim_FGGroundReactions *__pyx_v_self, PyObject *__pyx_v_gear); /* proto */
static PyObject *__pyx_pf_6jsbsim_17FGGroundReactions_4get_num_gear_units(struct __pyx_obj_6jsbsim_FGGroundReactions *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_17FGGroundReactions_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6jsbsim_FGGroundReactions *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_17FGGroundReactions_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6jsbsim_FGGroundReactions *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6jsbsim_7FGLGear___init__(struct __pyx_obj_6jsbsim_FGLGear *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_7FGLGear_2get_steer_norm(struct __pyx_obj_6jsbsim_FGLGear *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_7FGLGear_4get_body_x_force(struct __pyx_obj_6jsbsim_FGLGear *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_7FGLGear_6get_body_y_force(struct __pyx_obj_6jsbsim_FGLGear *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_7FGLGear_8get_body_z_force(struct __pyx_obj_6jsbsim_FGLGear *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_7FGLGear_10get_location(struct __pyx_obj_6jsbsim_FGLGear *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_7FGLGear_12get_acting_location(struct __pyx_obj_6jsbsim_FGLGear *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_7FGLGear_14__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6jsbsim_FGLGear *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_7FGLGear_16__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6jsbsim_FGLGear *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6jsbsim_11FGAuxiliary___init__(struct __pyx_obj_6jsbsim_FGAuxiliary *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_11FGAuxiliary_2get_Tw2b(struct __pyx_obj_6jsbsim_FGAuxiliary *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_11FGAuxiliary_4get_Tb2w(struct __pyx_obj_6jsbsim_FGAuxiliary *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_11FGAuxiliary_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6jsbsim_FGAuxiliary *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_11FGAuxiliary_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6jsbsim_FGAuxiliary *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6jsbsim_14FGAerodynamics___init__(struct __pyx_obj_6jsbsim_FGAerodynamics *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_14FGAerodynamics_2get_moments_MRC(struct __pyx_obj_6jsbsim_FGAerodynamics *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_14FGAerodynamics_4get_forces(struct __pyx_obj_6jsbsim_FGAerodynamics *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_14FGAerodynamics_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6jsbsim_FGAerodynamics *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_14FGAerodynamics_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6jsbsim_FGAerodynamics *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6jsbsim_10FGAircraft___init__(struct __pyx_obj_6jsbsim_FGAircraft *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_10FGAircraft_2get_xyz_rp(struct __pyx_obj_6jsbsim_FGAircraft *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_10FGAircraft_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6jsbsim_FGAircraft *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_10FGAircraft_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6jsbsim_FGAircraft *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6jsbsim_12FGAtmosphere___init__(struct __pyx_obj_6jsbsim_FGAtmosphere *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_12FGAtmosphere_2set_temperature(struct __pyx_obj_6jsbsim_FGAtmosphere *__pyx_v_self, PyObject *__pyx_v_t, PyObject *__pyx_v_h, PyObject *__pyx_v_unit); /* proto */
static PyObject *__pyx_pf_6jsbsim_12FGAtmosphere_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6jsbsim_FGAtmosphere *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_12FGAtmosphere_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6jsbsim_FGAtmosphere *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6jsbsim_13FGMassBalance___init__(struct __pyx_obj_6jsbsim_FGMassBalance *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_13FGMassBalance_2get_xyz_cg(struct __pyx_obj_6jsbsim_FGMassBalance *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_13FGMassBalance_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6jsbsim_FGMassBalance *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_13FGMassBalance_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6jsbsim_FGMassBalance *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6jsbsim_9FGFDMExec___cinit__(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_root_dir, struct __pyx_obj_6jsbsim_FGPropertyManager *__pyx_v_pm_root); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_2simulate(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_record_properties, PyObject *__pyx_v_t_final, PyObject *__pyx_v_dt, PyObject *__pyx_v_verbose); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_4find_root_dir(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_search_paths, PyObject *__pyx_v_verbose); /* proto */
static void __pyx_pf_6jsbsim_9FGFDMExec_6__dealloc__(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_8__repr__(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_10__getitem__(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static int __pyx_pf_6jsbsim_9FGFDMExec_12__setitem__(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_14run(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_16run_ic(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_18load_model(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_model, PyObject *__pyx_v_add_model_to_path); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_20load_model_with_paths(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_model, PyObject *__pyx_v_aircraft_path, PyObject *__pyx_v_engine_path, PyObject *__pyx_v_systems_path, PyObject *__pyx_v_add_model_to_path); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_22load_script(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_script, PyObject *__pyx_v_delta_t, PyObject *__pyx_v_initfile); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_24set_engine_path(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_path); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_26set_aircraft_path(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_path); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_28set_systems_path(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_path); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_30set_root_dir(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_path); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_32get_engine_path(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_34get_aircraft_path(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_36get_systems_path(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_38get_full_aircraft_path(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_40get_root_dir(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_42get_property_value(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_44set_property_value(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_46get_model_name(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_48set_output_directive(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_fname); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_50set_logging_rate(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_rate); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_52set_output_filename(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_n, PyObject *__pyx_v_fname); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_54get_output_filename(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_n); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_56do_trim(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_mode); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_58disable_output(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_60enable_output(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_62hold(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_64enable_increment_then_hold(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_time_steps); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_66check_incremental_hold(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_68resume(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_70holding(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_72reset_to_initial_conditions(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_mode); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_74set_debug_level(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_level); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_76query_property_catalog(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_check); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_78get_property_catalog(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_check); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_80print_property_catalog(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_82set_trim_status(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_status); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_84get_trim_status(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_86get_propulsion_tank_report(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_88get_sim_time(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_90get_delta_t(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_92suspend_integration(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_94resume_integration(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_96integration_suspended(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_98set_sim_time(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_time); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_100set_dt(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_dt); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_102incr_time(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_104get_debug_level(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_106propulsion_init_running(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_n); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_108propulsion_get_num_engines(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_110load_ic(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_rstfile, PyObject *__pyx_v_useStoredPath); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_112get_propagate(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_114get_property_manager(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_116get_ground_reactions(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_118get_auxiliary(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_120get_aerodynamics(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_122get_aircraft(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_124get_mass_balance(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_126get_atmosphere(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_128__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_130__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_6jsbsim_FGPropagate(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6jsbsim_FGPropertyManager(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6jsbsim_FGGroundReactions(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6jsbsim_FGLGear(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6jsbsim_FGAuxiliary(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6jsbsim_FGAerodynamics(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6jsbsim_FGAircraft(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6jsbsim_FGAtmosphere(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6jsbsim_FGMassBalance(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6jsbsim_FGFDMExec(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_float_0_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_k__19;
static PyObject *__pyx_k__20;
static PyObject *__pyx_k__21;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__34;
/* Late includes */

/* "jsbsim.pyx":20
 * import os, platform, numpy
 * 
 * cdef convertToNumpyMat(const c_FGMatrix33& m):             # <<<<<<<<<<<<<<
 *     return numpy.mat([[m.Entry(1, 1), m.Entry(1, 2), m.Entry(1, 3)],
 *                       [m.Entry(2, 1), m.Entry(2, 2), m.Entry(2, 3)],
 */

static PyObject *__pyx_f_6jsbsim_convertToNumpyMat(JSBSim::FGMatrix33 const &__pyx_v_m) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("convertToNumpyMat", 0);

  /* "jsbsim.pyx":21
 * 
 * cdef convertToNumpyMat(const c_FGMatrix33& m):
 *     return numpy.mat([[m.Entry(1, 1), m.Entry(1, 2), m.Entry(1, 3)],             # <<<<<<<<<<<<<<
 *                       [m.Entry(2, 1), m.Entry(2, 2), m.Entry(2, 3)],
 *                       [m.Entry(3, 1), m.Entry(3, 2), m.Entry(3, 3)]])
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_mat); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_m.Entry(1, 1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_m.Entry(1, 2)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_m.Entry(1, 3)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyList_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_6, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_6, 2, __pyx_t_5);
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;

  /* "jsbsim.pyx":22
 * cdef convertToNumpyMat(const c_FGMatrix33& m):
 *     return numpy.mat([[m.Entry(1, 1), m.Entry(1, 2), m.Entry(1, 3)],
 *                       [m.Entry(2, 1), m.Entry(2, 2), m.Entry(2, 3)],             # <<<<<<<<<<<<<<
 *                       [m.Entry(3, 1), m.Entry(3, 2), m.Entry(3, 3)]])
 * 
 */
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_m.Entry(2, 1)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_m.Entry(2, 2)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_m.Entry(2, 3)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = PyList_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_7, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_7, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_7, 2, __pyx_t_2);
  __pyx_t_5 = 0;
  __pyx_t_4 = 0;
  __pyx_t_2 = 0;

  /* "jsbsim.pyx":23
 *     return numpy.mat([[m.Entry(1, 1), m.Entry(1, 2), m.Entry(1, 3)],
 *                       [m.Entry(2, 1), m.Entry(2, 2), m.Entry(2, 3)],
 *                       [m.Entry(3, 1), m.Entry(3, 2), m.Entry(3, 3)]])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_m.Entry(3, 1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_m.Entry(3, 2)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_m.Entry(3, 3)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = PyList_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_8, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_8, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_8, 2, __pyx_t_5);
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;

  /* "jsbsim.pyx":21
 * 
 * cdef convertToNumpyMat(const c_FGMatrix33& m):
 *     return numpy.mat([[m.Entry(1, 1), m.Entry(1, 2), m.Entry(1, 3)],             # <<<<<<<<<<<<<<
 *                       [m.Entry(2, 1), m.Entry(2, 2), m.Entry(2, 3)],
 *                       [m.Entry(3, 1), m.Entry(3, 2), m.Entry(3, 3)]])
 */
  __pyx_t_5 = PyList_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyList_SET_ITEM(__pyx_t_5, 2, __pyx_t_8);
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_8) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 21, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_5};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 21, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_5};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 21, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 21, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8); __pyx_t_8 = NULL;
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 21, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "jsbsim.pyx":20
 * import os, platform, numpy
 * 
 * cdef convertToNumpyMat(const c_FGMatrix33& m):             # <<<<<<<<<<<<<<
 *     return numpy.mat([[m.Entry(1, 1), m.Entry(1, 2), m.Entry(1, 3)],
 *                       [m.Entry(2, 1), m.Entry(2, 2), m.Entry(2, 3)],
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("jsbsim.convertToNumpyMat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":26
 * 
 * 
 * cdef convertToNumpyVec(const c_FGColumnVector3& v):             # <<<<<<<<<<<<<<
 *     return numpy.mat([v.Entry(1), v.Entry(2), v.Entry(3)]).T
 * 
 */

static PyObject *__pyx_f_6jsbsim_convertToNumpyVec(JSBSim::FGColumnVector3 const &__pyx_v_v) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("convertToNumpyVec", 0);

  /* "jsbsim.pyx":27
 * 
 * cdef convertToNumpyVec(const c_FGColumnVector3& v):
 *     return numpy.mat([v.Entry(1), v.Entry(2), v.Entry(3)]).T             # <<<<<<<<<<<<<<
 * 
 * cdef class FGPropagate:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_mat); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_v.Entry(1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_v.Entry(2)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_v.Entry(3)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyList_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_6, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_6, 2, __pyx_t_5);
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 27, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_6};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 27, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_6};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 27, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 27, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 27, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_T); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "jsbsim.pyx":26
 * 
 * 
 * cdef convertToNumpyVec(const c_FGColumnVector3& v):             # <<<<<<<<<<<<<<
 *     return numpy.mat([v.Entry(1), v.Entry(2), v.Entry(3)]).T
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("jsbsim.convertToNumpyVec", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":33
 *     cdef c_FGPropagate *thisptr
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

/* Python wrapper */
static int __pyx_pw_6jsbsim_11FGPropagate_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6jsbsim_11FGPropagate_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_6jsbsim_11FGPropagate___init__(((struct __pyx_obj_6jsbsim_FGPropagate *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6jsbsim_11FGPropagate___init__(struct __pyx_obj_6jsbsim_FGPropagate *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "jsbsim.pyx":34
 * 
 *     def __init__(self):
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def get_Tl2b(self):
 */
  __pyx_v_self->thisptr = NULL;

  /* "jsbsim.pyx":33
 *     cdef c_FGPropagate *thisptr
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":36
 *         self.thisptr = NULL
 * 
 *     def get_Tl2b(self):             # <<<<<<<<<<<<<<
 *         return convertToNumpyMat(self.thisptr.GetTl2b())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_11FGPropagate_3get_Tl2b(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6jsbsim_11FGPropagate_3get_Tl2b(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_Tl2b (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_11FGPropagate_2get_Tl2b(((struct __pyx_obj_6jsbsim_FGPropagate *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_11FGPropagate_2get_Tl2b(struct __pyx_obj_6jsbsim_FGPropagate *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_Tl2b", 0);

  /* "jsbsim.pyx":37
 * 
 *     def get_Tl2b(self):
 *         return convertToNumpyMat(self.thisptr.GetTl2b())             # <<<<<<<<<<<<<<
 * 
 *     def get_Tec2b(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6jsbsim_convertToNumpyMat(__pyx_v_self->thisptr->GetTl2b()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "jsbsim.pyx":36
 *         self.thisptr = NULL
 * 
 *     def get_Tl2b(self):             # <<<<<<<<<<<<<<
 *         return convertToNumpyMat(self.thisptr.GetTl2b())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGPropagate.get_Tl2b", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":39
 *         return convertToNumpyMat(self.thisptr.GetTl2b())
 * 
 *     def get_Tec2b(self):             # <<<<<<<<<<<<<<
 *         return convertToNumpyMat(self.thisptr.GetTec2b())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_11FGPropagate_5get_Tec2b(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6jsbsim_11FGPropagate_5get_Tec2b(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_Tec2b (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_11FGPropagate_4get_Tec2b(((struct __pyx_obj_6jsbsim_FGPropagate *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_11FGPropagate_4get_Tec2b(struct __pyx_obj_6jsbsim_FGPropagate *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_Tec2b", 0);

  /* "jsbsim.pyx":40
 * 
 *     def get_Tec2b(self):
 *         return convertToNumpyMat(self.thisptr.GetTec2b())             # <<<<<<<<<<<<<<
 * 
 *     def get_uvw(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6jsbsim_convertToNumpyMat(__pyx_v_self->thisptr->GetTec2b()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "jsbsim.pyx":39
 *         return convertToNumpyMat(self.thisptr.GetTl2b())
 * 
 *     def get_Tec2b(self):             # <<<<<<<<<<<<<<
 *         return convertToNumpyMat(self.thisptr.GetTec2b())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGPropagate.get_Tec2b", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":42
 *         return convertToNumpyMat(self.thisptr.GetTec2b())
 * 
 *     def get_uvw(self):             # <<<<<<<<<<<<<<
 *         return convertToNumpyVec(self.thisptr.GetUVW())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_11FGPropagate_7get_uvw(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6jsbsim_11FGPropagate_7get_uvw(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_uvw (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_11FGPropagate_6get_uvw(((struct __pyx_obj_6jsbsim_FGPropagate *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_11FGPropagate_6get_uvw(struct __pyx_obj_6jsbsim_FGPropagate *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_uvw", 0);

  /* "jsbsim.pyx":43
 * 
 *     def get_uvw(self):
 *         return convertToNumpyVec(self.thisptr.GetUVW())             # <<<<<<<<<<<<<<
 * 
 * cdef class FGPropertyManager:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6jsbsim_convertToNumpyVec(__pyx_v_self->thisptr->GetUVW()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "jsbsim.pyx":42
 *         return convertToNumpyMat(self.thisptr.GetTec2b())
 * 
 *     def get_uvw(self):             # <<<<<<<<<<<<<<
 *         return convertToNumpyVec(self.thisptr.GetUVW())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGPropagate.get_uvw", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_11FGPropagate_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6jsbsim_11FGPropagate_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_11FGPropagate_8__reduce_cython__(((struct __pyx_obj_6jsbsim_FGPropagate *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_11FGPropagate_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6jsbsim_FGPropagate *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGPropagate.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_11FGPropagate_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_6jsbsim_11FGPropagate_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_11FGPropagate_10__setstate_cython__(((struct __pyx_obj_6jsbsim_FGPropagate *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_11FGPropagate_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6jsbsim_FGPropagate *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGPropagate.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":50
 *      cdef bool thisptr_owner
 * 
 *      def __cinit__(self, new_instance=False):             # <<<<<<<<<<<<<<
 *          if new_instance:
 *              self.thisptr = new c_FGPropertyManager()
 */

/* Python wrapper */
static int __pyx_pw_6jsbsim_17FGPropertyManager_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6jsbsim_17FGPropertyManager_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_new_instance = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_new_instance,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_new_instance);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 50, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_new_instance = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 50, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("jsbsim.FGPropertyManager.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6jsbsim_17FGPropertyManager___cinit__(((struct __pyx_obj_6jsbsim_FGPropertyManager *)__pyx_v_self), __pyx_v_new_instance);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6jsbsim_17FGPropertyManager___cinit__(struct __pyx_obj_6jsbsim_FGPropertyManager *__pyx_v_self, PyObject *__pyx_v_new_instance) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "jsbsim.pyx":51
 * 
 *      def __cinit__(self, new_instance=False):
 *          if new_instance:             # <<<<<<<<<<<<<<
 *              self.thisptr = new c_FGPropertyManager()
 *              if self.thisptr is NULL:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_new_instance); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 51, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "jsbsim.pyx":52
 *      def __cinit__(self, new_instance=False):
 *          if new_instance:
 *              self.thisptr = new c_FGPropertyManager()             # <<<<<<<<<<<<<<
 *              if self.thisptr is NULL:
 *                  raise MemoryError()
 */
    __pyx_v_self->thisptr = new JSBSim::FGPropertyManager();

    /* "jsbsim.pyx":53
 *          if new_instance:
 *              self.thisptr = new c_FGPropertyManager()
 *              if self.thisptr is NULL:             # <<<<<<<<<<<<<<
 *                  raise MemoryError()
 *              self.thisptr_owner = True
 */
    __pyx_t_1 = ((__pyx_v_self->thisptr == NULL) != 0);
    if (unlikely(__pyx_t_1)) {

      /* "jsbsim.pyx":54
 *              self.thisptr = new c_FGPropertyManager()
 *              if self.thisptr is NULL:
 *                  raise MemoryError()             # <<<<<<<<<<<<<<
 *              self.thisptr_owner = True
 *          else:
 */
      PyErr_NoMemory(); __PYX_ERR(1, 54, __pyx_L1_error)

      /* "jsbsim.pyx":53
 *          if new_instance:
 *              self.thisptr = new c_FGPropertyManager()
 *              if self.thisptr is NULL:             # <<<<<<<<<<<<<<
 *                  raise MemoryError()
 *              self.thisptr_owner = True
 */
    }

    /* "jsbsim.pyx":55
 *              if self.thisptr is NULL:
 *                  raise MemoryError()
 *              self.thisptr_owner = True             # <<<<<<<<<<<<<<
 *          else:
 *              self.thisptr = NULL
 */
    __pyx_v_self->thisptr_owner = 1;

    /* "jsbsim.pyx":51
 * 
 *      def __cinit__(self, new_instance=False):
 *          if new_instance:             # <<<<<<<<<<<<<<
 *              self.thisptr = new c_FGPropertyManager()
 *              if self.thisptr is NULL:
 */
    goto __pyx_L3;
  }

  /* "jsbsim.pyx":57
 *              self.thisptr_owner = True
 *          else:
 *              self.thisptr = NULL             # <<<<<<<<<<<<<<
 *              self.thisptr_owner = False
 * 
 */
  /*else*/ {
    __pyx_v_self->thisptr = NULL;

    /* "jsbsim.pyx":58
 *          else:
 *              self.thisptr = NULL
 *              self.thisptr_owner = False             # <<<<<<<<<<<<<<
 * 
 *      def __dealloc__(self):
 */
    __pyx_v_self->thisptr_owner = 0;
  }
  __pyx_L3:;

  /* "jsbsim.pyx":50
 *      cdef bool thisptr_owner
 * 
 *      def __cinit__(self, new_instance=False):             # <<<<<<<<<<<<<<
 *          if new_instance:
 *              self.thisptr = new c_FGPropertyManager()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("jsbsim.FGPropertyManager.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":60
 *              self.thisptr_owner = False
 * 
 *      def __dealloc__(self):             # <<<<<<<<<<<<<<
 *          if self.thisptr is not NULL and self.thisptr_owner:
 *              del self.thisptr
 */

/* Python wrapper */
static void __pyx_pw_6jsbsim_17FGPropertyManager_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6jsbsim_17FGPropertyManager_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6jsbsim_17FGPropertyManager_2__dealloc__(((struct __pyx_obj_6jsbsim_FGPropertyManager *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6jsbsim_17FGPropertyManager_2__dealloc__(struct __pyx_obj_6jsbsim_FGPropertyManager *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "jsbsim.pyx":61
 * 
 *      def __dealloc__(self):
 *          if self.thisptr is not NULL and self.thisptr_owner:             # <<<<<<<<<<<<<<
 *              del self.thisptr
 *              self.thisptr = NULL
 */
  __pyx_t_2 = ((__pyx_v_self->thisptr != NULL) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_self->thisptr_owner != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "jsbsim.pyx":62
 *      def __dealloc__(self):
 *          if self.thisptr is not NULL and self.thisptr_owner:
 *              del self.thisptr             # <<<<<<<<<<<<<<
 *              self.thisptr = NULL
 *              self.thisptr_owner = False
 */
    delete __pyx_v_self->thisptr;

    /* "jsbsim.pyx":63
 *          if self.thisptr is not NULL and self.thisptr_owner:
 *              del self.thisptr
 *              self.thisptr = NULL             # <<<<<<<<<<<<<<
 *              self.thisptr_owner = False
 * 
 */
    __pyx_v_self->thisptr = NULL;

    /* "jsbsim.pyx":64
 *              del self.thisptr
 *              self.thisptr = NULL
 *              self.thisptr_owner = False             # <<<<<<<<<<<<<<
 * 
 *      def hasNode(self, path):
 */
    __pyx_v_self->thisptr_owner = 0;

    /* "jsbsim.pyx":61
 * 
 *      def __dealloc__(self):
 *          if self.thisptr is not NULL and self.thisptr_owner:             # <<<<<<<<<<<<<<
 *              del self.thisptr
 *              self.thisptr = NULL
 */
  }

  /* "jsbsim.pyx":60
 *              self.thisptr_owner = False
 * 
 *      def __dealloc__(self):             # <<<<<<<<<<<<<<
 *          if self.thisptr is not NULL and self.thisptr_owner:
 *              del self.thisptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "jsbsim.pyx":66
 *              self.thisptr_owner = False
 * 
 *      def hasNode(self, path):             # <<<<<<<<<<<<<<
 *          return self.thisptr.HasNode(path.encode())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_17FGPropertyManager_5hasNode(PyObject *__pyx_v_self, PyObject *__pyx_v_path); /*proto*/
static PyObject *__pyx_pw_6jsbsim_17FGPropertyManager_5hasNode(PyObject *__pyx_v_self, PyObject *__pyx_v_path) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("hasNode (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_17FGPropertyManager_4hasNode(((struct __pyx_obj_6jsbsim_FGPropertyManager *)__pyx_v_self), ((PyObject *)__pyx_v_path));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_17FGPropertyManager_4hasNode(struct __pyx_obj_6jsbsim_FGPropertyManager *__pyx_v_self, PyObject *__pyx_v_path) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  __Pyx_RefNannySetupContext("hasNode", 0);

  /* "jsbsim.pyx":67
 * 
 *      def hasNode(self, path):
 *          return self.thisptr.HasNode(path.encode())             # <<<<<<<<<<<<<<
 * 
 * cdef class FGGroundReactions:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_path, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 67, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 67, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 67, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->HasNode(__pyx_t_4)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "jsbsim.pyx":66
 *              self.thisptr_owner = False
 * 
 *      def hasNode(self, path):             # <<<<<<<<<<<<<<
 *          return self.thisptr.HasNode(path.encode())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("jsbsim.FGPropertyManager.hasNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_17FGPropertyManager_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6jsbsim_17FGPropertyManager_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_17FGPropertyManager_6__reduce_cython__(((struct __pyx_obj_6jsbsim_FGPropertyManager *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_17FGPropertyManager_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6jsbsim_FGPropertyManager *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGPropertyManager.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_17FGPropertyManager_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_6jsbsim_17FGPropertyManager_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_17FGPropertyManager_8__setstate_cython__(((struct __pyx_obj_6jsbsim_FGPropertyManager *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_17FGPropertyManager_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6jsbsim_FGPropertyManager *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGPropertyManager.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":73
 *     cdef c_FGGroundReactions *thisptr
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

/* Python wrapper */
static int __pyx_pw_6jsbsim_17FGGroundReactions_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6jsbsim_17FGGroundReactions_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_6jsbsim_17FGGroundReactions___init__(((struct __pyx_obj_6jsbsim_FGGroundReactions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6jsbsim_17FGGroundReactions___init__(struct __pyx_obj_6jsbsim_FGGroundReactions *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "jsbsim.pyx":74
 * 
 *     def __init__(self):
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def get_gear_unit(self, gear):
 */
  __pyx_v_self->thisptr = NULL;

  /* "jsbsim.pyx":73
 *     cdef c_FGGroundReactions *thisptr
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":76
 *         self.thisptr = NULL
 * 
 *     def get_gear_unit(self, gear):             # <<<<<<<<<<<<<<
 *         lgear = FGLGear()
 *         lgear.thisptr = self.thisptr.GetGearUnit(gear)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_17FGGroundReactions_3get_gear_unit(PyObject *__pyx_v_self, PyObject *__pyx_v_gear); /*proto*/
static PyObject *__pyx_pw_6jsbsim_17FGGroundReactions_3get_gear_unit(PyObject *__pyx_v_self, PyObject *__pyx_v_gear) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_gear_unit (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_17FGGroundReactions_2get_gear_unit(((struct __pyx_obj_6jsbsim_FGGroundReactions *)__pyx_v_self), ((PyObject *)__pyx_v_gear));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_17FGGroundReactions_2get_gear_unit(struct __pyx_obj_6jsbsim_FGGroundReactions *__pyx_v_self, PyObject *__pyx_v_gear) {
  struct __pyx_obj_6jsbsim_FGLGear *__pyx_v_lgear = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("get_gear_unit", 0);

  /* "jsbsim.pyx":77
 * 
 *     def get_gear_unit(self, gear):
 *         lgear = FGLGear()             # <<<<<<<<<<<<<<
 *         lgear.thisptr = self.thisptr.GetGearUnit(gear)
 *         return lgear
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6jsbsim_FGLGear)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_lgear = ((struct __pyx_obj_6jsbsim_FGLGear *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "jsbsim.pyx":78
 *     def get_gear_unit(self, gear):
 *         lgear = FGLGear()
 *         lgear.thisptr = self.thisptr.GetGearUnit(gear)             # <<<<<<<<<<<<<<
 *         return lgear
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_gear); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 78, __pyx_L1_error)
  __pyx_v_lgear->thisptr = __pyx_v_self->thisptr->GetGearUnit(__pyx_t_2);

  /* "jsbsim.pyx":79
 *         lgear = FGLGear()
 *         lgear.thisptr = self.thisptr.GetGearUnit(gear)
 *         return lgear             # <<<<<<<<<<<<<<
 * 
 *     def get_num_gear_units(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_lgear));
  __pyx_r = ((PyObject *)__pyx_v_lgear);
  goto __pyx_L0;

  /* "jsbsim.pyx":76
 *         self.thisptr = NULL
 * 
 *     def get_gear_unit(self, gear):             # <<<<<<<<<<<<<<
 *         lgear = FGLGear()
 *         lgear.thisptr = self.thisptr.GetGearUnit(gear)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGGroundReactions.get_gear_unit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_lgear);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":81
 *         return lgear
 * 
 *     def get_num_gear_units(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.GetNumGearUnits()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_17FGGroundReactions_5get_num_gear_units(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6jsbsim_17FGGroundReactions_5get_num_gear_units(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_num_gear_units (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_17FGGroundReactions_4get_num_gear_units(((struct __pyx_obj_6jsbsim_FGGroundReactions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_17FGGroundReactions_4get_num_gear_units(struct __pyx_obj_6jsbsim_FGGroundReactions *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_num_gear_units", 0);

  /* "jsbsim.pyx":82
 * 
 *     def get_num_gear_units(self):
 *         return self.thisptr.GetNumGearUnits()             # <<<<<<<<<<<<<<
 * 
 * cdef class FGLGear:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->GetNumGearUnits()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "jsbsim.pyx":81
 *         return lgear
 * 
 *     def get_num_gear_units(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.GetNumGearUnits()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGGroundReactions.get_num_gear_units", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_17FGGroundReactions_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6jsbsim_17FGGroundReactions_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_17FGGroundReactions_6__reduce_cython__(((struct __pyx_obj_6jsbsim_FGGroundReactions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_17FGGroundReactions_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6jsbsim_FGGroundReactions *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGGroundReactions.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_17FGGroundReactions_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_6jsbsim_17FGGroundReactions_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_17FGGroundReactions_8__setstate_cython__(((struct __pyx_obj_6jsbsim_FGGroundReactions *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_17FGGroundReactions_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6jsbsim_FGGroundReactions *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGGroundReactions.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":88
 *     cdef c_FGLGear *thisptr
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

/* Python wrapper */
static int __pyx_pw_6jsbsim_7FGLGear_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6jsbsim_7FGLGear_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_6jsbsim_7FGLGear___init__(((struct __pyx_obj_6jsbsim_FGLGear *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6jsbsim_7FGLGear___init__(struct __pyx_obj_6jsbsim_FGLGear *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "jsbsim.pyx":89
 * 
 *     def __init__(self):
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def get_steer_norm(self):
 */
  __pyx_v_self->thisptr = NULL;

  /* "jsbsim.pyx":88
 *     cdef c_FGLGear *thisptr
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":91
 *         self.thisptr = NULL
 * 
 *     def get_steer_norm(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.GetSteerNorm()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_7FGLGear_3get_steer_norm(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6jsbsim_7FGLGear_3get_steer_norm(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_steer_norm (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_7FGLGear_2get_steer_norm(((struct __pyx_obj_6jsbsim_FGLGear *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_7FGLGear_2get_steer_norm(struct __pyx_obj_6jsbsim_FGLGear *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_steer_norm", 0);

  /* "jsbsim.pyx":92
 * 
 *     def get_steer_norm(self):
 *         return self.thisptr.GetSteerNorm()             # <<<<<<<<<<<<<<
 * 
 *     def get_body_x_force(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->GetSteerNorm()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "jsbsim.pyx":91
 *         self.thisptr = NULL
 * 
 *     def get_steer_norm(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.GetSteerNorm()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGLGear.get_steer_norm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":94
 *         return self.thisptr.GetSteerNorm()
 * 
 *     def get_body_x_force(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.GetBodyXForce()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_7FGLGear_5get_body_x_force(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6jsbsim_7FGLGear_5get_body_x_force(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_body_x_force (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_7FGLGear_4get_body_x_force(((struct __pyx_obj_6jsbsim_FGLGear *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_7FGLGear_4get_body_x_force(struct __pyx_obj_6jsbsim_FGLGear *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_body_x_force", 0);

  /* "jsbsim.pyx":95
 * 
 *     def get_body_x_force(self):
 *         return self.thisptr.GetBodyXForce()             # <<<<<<<<<<<<<<
 * 
 *     def get_body_y_force(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->GetBodyXForce()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "jsbsim.pyx":94
 *         return self.thisptr.GetSteerNorm()
 * 
 *     def get_body_x_force(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.GetBodyXForce()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGLGear.get_body_x_force", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":97
 *         return self.thisptr.GetBodyXForce()
 * 
 *     def get_body_y_force(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.GetBodyYForce()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_7FGLGear_7get_body_y_force(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6jsbsim_7FGLGear_7get_body_y_force(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_body_y_force (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_7FGLGear_6get_body_y_force(((struct __pyx_obj_6jsbsim_FGLGear *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_7FGLGear_6get_body_y_force(struct __pyx_obj_6jsbsim_FGLGear *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_body_y_force", 0);

  /* "jsbsim.pyx":98
 * 
 *     def get_body_y_force(self):
 *         return self.thisptr.GetBodyYForce()             # <<<<<<<<<<<<<<
 * 
 *     def get_body_z_force(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->GetBodyYForce()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "jsbsim.pyx":97
 *         return self.thisptr.GetBodyXForce()
 * 
 *     def get_body_y_force(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.GetBodyYForce()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGLGear.get_body_y_force", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":100
 *         return self.thisptr.GetBodyYForce()
 * 
 *     def get_body_z_force(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.GetBodyZForce()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_7FGLGear_9get_body_z_force(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6jsbsim_7FGLGear_9get_body_z_force(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_body_z_force (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_7FGLGear_8get_body_z_force(((struct __pyx_obj_6jsbsim_FGLGear *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_7FGLGear_8get_body_z_force(struct __pyx_obj_6jsbsim_FGLGear *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_body_z_force", 0);

  /* "jsbsim.pyx":101
 * 
 *     def get_body_z_force(self):
 *         return self.thisptr.GetBodyZForce()             # <<<<<<<<<<<<<<
 * 
 *     def get_location(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->GetBodyZForce()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "jsbsim.pyx":100
 *         return self.thisptr.GetBodyYForce()
 * 
 *     def get_body_z_force(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.GetBodyZForce()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGLGear.get_body_z_force", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":103
 *         return self.thisptr.GetBodyZForce()
 * 
 *     def get_location(self):             # <<<<<<<<<<<<<<
 *         return convertToNumpyVec(self.thisptr.GetLocation())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_7FGLGear_11get_location(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6jsbsim_7FGLGear_11get_location(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_location (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_7FGLGear_10get_location(((struct __pyx_obj_6jsbsim_FGLGear *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_7FGLGear_10get_location(struct __pyx_obj_6jsbsim_FGLGear *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_location", 0);

  /* "jsbsim.pyx":104
 * 
 *     def get_location(self):
 *         return convertToNumpyVec(self.thisptr.GetLocation())             # <<<<<<<<<<<<<<
 * 
 *     def get_acting_location(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6jsbsim_convertToNumpyVec(__pyx_v_self->thisptr->GetLocation()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "jsbsim.pyx":103
 *         return self.thisptr.GetBodyZForce()
 * 
 *     def get_location(self):             # <<<<<<<<<<<<<<
 *         return convertToNumpyVec(self.thisptr.GetLocation())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGLGear.get_location", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":106
 *         return convertToNumpyVec(self.thisptr.GetLocation())
 * 
 *     def get_acting_location(self):             # <<<<<<<<<<<<<<
 *         return convertToNumpyVec(self.thisptr.GetActingLocation())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_7FGLGear_13get_acting_location(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6jsbsim_7FGLGear_13get_acting_location(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_acting_location (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_7FGLGear_12get_acting_location(((struct __pyx_obj_6jsbsim_FGLGear *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_7FGLGear_12get_acting_location(struct __pyx_obj_6jsbsim_FGLGear *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_acting_location", 0);

  /* "jsbsim.pyx":107
 * 
 *     def get_acting_location(self):
 *         return convertToNumpyVec(self.thisptr.GetActingLocation())             # <<<<<<<<<<<<<<
 * 
 * cdef class FGAuxiliary:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6jsbsim_convertToNumpyVec(__pyx_v_self->thisptr->GetActingLocation()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "jsbsim.pyx":106
 *         return convertToNumpyVec(self.thisptr.GetLocation())
 * 
 *     def get_acting_location(self):             # <<<<<<<<<<<<<<
 *         return convertToNumpyVec(self.thisptr.GetActingLocation())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGLGear.get_acting_location", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_7FGLGear_15__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6jsbsim_7FGLGear_15__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_7FGLGear_14__reduce_cython__(((struct __pyx_obj_6jsbsim_FGLGear *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_7FGLGear_14__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6jsbsim_FGLGear *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGLGear.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_7FGLGear_17__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_6jsbsim_7FGLGear_17__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_7FGLGear_16__setstate_cython__(((struct __pyx_obj_6jsbsim_FGLGear *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_7FGLGear_16__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6jsbsim_FGLGear *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGLGear.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":113
 *     cdef c_FGAuxiliary *thisptr
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

/* Python wrapper */
static int __pyx_pw_6jsbsim_11FGAuxiliary_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6jsbsim_11FGAuxiliary_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_6jsbsim_11FGAuxiliary___init__(((struct __pyx_obj_6jsbsim_FGAuxiliary *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6jsbsim_11FGAuxiliary___init__(struct __pyx_obj_6jsbsim_FGAuxiliary *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "jsbsim.pyx":114
 * 
 *     def __init__(self):
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def get_Tw2b(self):
 */
  __pyx_v_self->thisptr = NULL;

  /* "jsbsim.pyx":113
 *     cdef c_FGAuxiliary *thisptr
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":116
 *         self.thisptr = NULL
 * 
 *     def get_Tw2b(self):             # <<<<<<<<<<<<<<
 *         return convertToNumpyMat(self.thisptr.GetTw2b())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_11FGAuxiliary_3get_Tw2b(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6jsbsim_11FGAuxiliary_3get_Tw2b(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_Tw2b (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_11FGAuxiliary_2get_Tw2b(((struct __pyx_obj_6jsbsim_FGAuxiliary *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_11FGAuxiliary_2get_Tw2b(struct __pyx_obj_6jsbsim_FGAuxiliary *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_Tw2b", 0);

  /* "jsbsim.pyx":117
 * 
 *     def get_Tw2b(self):
 *         return convertToNumpyMat(self.thisptr.GetTw2b())             # <<<<<<<<<<<<<<
 * 
 *     def get_Tb2w(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6jsbsim_convertToNumpyMat(__pyx_v_self->thisptr->GetTw2b()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "jsbsim.pyx":116
 *         self.thisptr = NULL
 * 
 *     def get_Tw2b(self):             # <<<<<<<<<<<<<<
 *         return convertToNumpyMat(self.thisptr.GetTw2b())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGAuxiliary.get_Tw2b", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":119
 *         return convertToNumpyMat(self.thisptr.GetTw2b())
 * 
 *     def get_Tb2w(self):             # <<<<<<<<<<<<<<
 *         return convertToNumpyMat(self.thisptr.GetTb2w())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_11FGAuxiliary_5get_Tb2w(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6jsbsim_11FGAuxiliary_5get_Tb2w(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_Tb2w (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_11FGAuxiliary_4get_Tb2w(((struct __pyx_obj_6jsbsim_FGAuxiliary *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_11FGAuxiliary_4get_Tb2w(struct __pyx_obj_6jsbsim_FGAuxiliary *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_Tb2w", 0);

  /* "jsbsim.pyx":120
 * 
 *     def get_Tb2w(self):
 *         return convertToNumpyMat(self.thisptr.GetTb2w())             # <<<<<<<<<<<<<<
 * 
 * cdef class FGAerodynamics:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6jsbsim_convertToNumpyMat(__pyx_v_self->thisptr->GetTb2w()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "jsbsim.pyx":119
 *         return convertToNumpyMat(self.thisptr.GetTw2b())
 * 
 *     def get_Tb2w(self):             # <<<<<<<<<<<<<<
 *         return convertToNumpyMat(self.thisptr.GetTb2w())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGAuxiliary.get_Tb2w", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_11FGAuxiliary_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6jsbsim_11FGAuxiliary_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_11FGAuxiliary_6__reduce_cython__(((struct __pyx_obj_6jsbsim_FGAuxiliary *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_11FGAuxiliary_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6jsbsim_FGAuxiliary *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGAuxiliary.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_11FGAuxiliary_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_6jsbsim_11FGAuxiliary_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_11FGAuxiliary_8__setstate_cython__(((struct __pyx_obj_6jsbsim_FGAuxiliary *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_11FGAuxiliary_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6jsbsim_FGAuxiliary *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGAuxiliary.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":126
 *     cdef c_FGAerodynamics *thisptr
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

/* Python wrapper */
static int __pyx_pw_6jsbsim_14FGAerodynamics_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6jsbsim_14FGAerodynamics_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_6jsbsim_14FGAerodynamics___init__(((struct __pyx_obj_6jsbsim_FGAerodynamics *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6jsbsim_14FGAerodynamics___init__(struct __pyx_obj_6jsbsim_FGAerodynamics *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "jsbsim.pyx":127
 * 
 *     def __init__(self):
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def get_moments_MRC(self):
 */
  __pyx_v_self->thisptr = NULL;

  /* "jsbsim.pyx":126
 *     cdef c_FGAerodynamics *thisptr
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":129
 *         self.thisptr = NULL
 * 
 *     def get_moments_MRC(self):             # <<<<<<<<<<<<<<
 *         return convertToNumpyVec(self.thisptr.GetMomentsMRC())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_14FGAerodynamics_3get_moments_MRC(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6jsbsim_14FGAerodynamics_3get_moments_MRC(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_moments_MRC (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_14FGAerodynamics_2get_moments_MRC(((struct __pyx_obj_6jsbsim_FGAerodynamics *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_14FGAerodynamics_2get_moments_MRC(struct __pyx_obj_6jsbsim_FGAerodynamics *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_moments_MRC", 0);

  /* "jsbsim.pyx":130
 * 
 *     def get_moments_MRC(self):
 *         return convertToNumpyVec(self.thisptr.GetMomentsMRC())             # <<<<<<<<<<<<<<
 * 
 *     def get_forces(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6jsbsim_convertToNumpyVec(__pyx_v_self->thisptr->GetMomentsMRC()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "jsbsim.pyx":129
 *         self.thisptr = NULL
 * 
 *     def get_moments_MRC(self):             # <<<<<<<<<<<<<<
 *         return convertToNumpyVec(self.thisptr.GetMomentsMRC())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGAerodynamics.get_moments_MRC", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":132
 *         return convertToNumpyVec(self.thisptr.GetMomentsMRC())
 * 
 *     def get_forces(self):             # <<<<<<<<<<<<<<
 *         return convertToNumpyVec(self.thisptr.GetForces())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_14FGAerodynamics_5get_forces(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6jsbsim_14FGAerodynamics_5get_forces(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_forces (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_14FGAerodynamics_4get_forces(((struct __pyx_obj_6jsbsim_FGAerodynamics *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_14FGAerodynamics_4get_forces(struct __pyx_obj_6jsbsim_FGAerodynamics *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_forces", 0);

  /* "jsbsim.pyx":133
 * 
 *     def get_forces(self):
 *         return convertToNumpyVec(self.thisptr.GetForces())             # <<<<<<<<<<<<<<
 * 
 * cdef class FGAircraft:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6jsbsim_convertToNumpyVec(__pyx_v_self->thisptr->GetForces()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "jsbsim.pyx":132
 *         return convertToNumpyVec(self.thisptr.GetMomentsMRC())
 * 
 *     def get_forces(self):             # <<<<<<<<<<<<<<
 *         return convertToNumpyVec(self.thisptr.GetForces())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGAerodynamics.get_forces", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_14FGAerodynamics_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6jsbsim_14FGAerodynamics_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_14FGAerodynamics_6__reduce_cython__(((struct __pyx_obj_6jsbsim_FGAerodynamics *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_14FGAerodynamics_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6jsbsim_FGAerodynamics *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGAerodynamics.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_14FGAerodynamics_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_6jsbsim_14FGAerodynamics_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_14FGAerodynamics_8__setstate_cython__(((struct __pyx_obj_6jsbsim_FGAerodynamics *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_14FGAerodynamics_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6jsbsim_FGAerodynamics *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGAerodynamics.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":139
 *     cdef c_FGAircraft *thisptr
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

/* Python wrapper */
static int __pyx_pw_6jsbsim_10FGAircraft_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6jsbsim_10FGAircraft_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_6jsbsim_10FGAircraft___init__(((struct __pyx_obj_6jsbsim_FGAircraft *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6jsbsim_10FGAircraft___init__(struct __pyx_obj_6jsbsim_FGAircraft *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "jsbsim.pyx":140
 * 
 *     def __init__(self):
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def get_xyz_rp(self):
 */
  __pyx_v_self->thisptr = NULL;

  /* "jsbsim.pyx":139
 *     cdef c_FGAircraft *thisptr
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":142
 *         self.thisptr = NULL
 * 
 *     def get_xyz_rp(self):             # <<<<<<<<<<<<<<
 *         return convertToNumpyVec(self.thisptr.GetXYZrp())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_10FGAircraft_3get_xyz_rp(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6jsbsim_10FGAircraft_3get_xyz_rp(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_xyz_rp (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_10FGAircraft_2get_xyz_rp(((struct __pyx_obj_6jsbsim_FGAircraft *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_10FGAircraft_2get_xyz_rp(struct __pyx_obj_6jsbsim_FGAircraft *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_xyz_rp", 0);

  /* "jsbsim.pyx":143
 * 
 *     def get_xyz_rp(self):
 *         return convertToNumpyVec(self.thisptr.GetXYZrp())             # <<<<<<<<<<<<<<
 * 
 * cdef class FGAtmosphere:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6jsbsim_convertToNumpyVec(__pyx_v_self->thisptr->GetXYZrp()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "jsbsim.pyx":142
 *         self.thisptr = NULL
 * 
 *     def get_xyz_rp(self):             # <<<<<<<<<<<<<<
 *         return convertToNumpyVec(self.thisptr.GetXYZrp())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGAircraft.get_xyz_rp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_10FGAircraft_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6jsbsim_10FGAircraft_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_10FGAircraft_4__reduce_cython__(((struct __pyx_obj_6jsbsim_FGAircraft *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_10FGAircraft_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6jsbsim_FGAircraft *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGAircraft.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_10FGAircraft_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_6jsbsim_10FGAircraft_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_10FGAircraft_6__setstate_cython__(((struct __pyx_obj_6jsbsim_FGAircraft *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_10FGAircraft_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6jsbsim_FGAircraft *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGAircraft.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":149
 *     cdef c_FGAtmosphere *thisptr
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

/* Python wrapper */
static int __pyx_pw_6jsbsim_12FGAtmosphere_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6jsbsim_12FGAtmosphere_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_6jsbsim_12FGAtmosphere___init__(((struct __pyx_obj_6jsbsim_FGAtmosphere *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6jsbsim_12FGAtmosphere___init__(struct __pyx_obj_6jsbsim_FGAtmosphere *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "jsbsim.pyx":150
 * 
 *     def __init__(self):
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def set_temperature(self, t, h, unit):
 */
  __pyx_v_self->thisptr = NULL;

  /* "jsbsim.pyx":149
 *     cdef c_FGAtmosphere *thisptr
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":152
 *         self.thisptr = NULL
 * 
 *     def set_temperature(self, t, h, unit):             # <<<<<<<<<<<<<<
 *         return self.thisptr.SetTemperature(t, h, unit)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_12FGAtmosphere_3set_temperature(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6jsbsim_12FGAtmosphere_3set_temperature(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_t = 0;
  PyObject *__pyx_v_h = 0;
  PyObject *__pyx_v_unit = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_temperature (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_t,&__pyx_n_s_h,&__pyx_n_s_unit,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_h)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_temperature", 1, 3, 3, 1); __PYX_ERR(1, 152, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_unit)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_temperature", 1, 3, 3, 2); __PYX_ERR(1, 152, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_temperature") < 0)) __PYX_ERR(1, 152, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_t = values[0];
    __pyx_v_h = values[1];
    __pyx_v_unit = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_temperature", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 152, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("jsbsim.FGAtmosphere.set_temperature", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6jsbsim_12FGAtmosphere_2set_temperature(((struct __pyx_obj_6jsbsim_FGAtmosphere *)__pyx_v_self), __pyx_v_t, __pyx_v_h, __pyx_v_unit);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_12FGAtmosphere_2set_temperature(struct __pyx_obj_6jsbsim_FGAtmosphere *__pyx_v_self, PyObject *__pyx_v_t, PyObject *__pyx_v_h, PyObject *__pyx_v_unit) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  enum JSBSim::FGAtmosphere::eTemperature __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("set_temperature", 0);

  /* "jsbsim.pyx":153
 * 
 *     def set_temperature(self, t, h, unit):
 *         return self.thisptr.SetTemperature(t, h, unit)             # <<<<<<<<<<<<<<
 * 
 * cdef class FGMassBalance:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_t); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 153, __pyx_L1_error)
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_h); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 153, __pyx_L1_error)
  __pyx_t_3 = ((enum JSBSim::FGAtmosphere::eTemperature)__Pyx_PyInt_As_enum__JSBSim_3a__3a_FGAtmosphere_3a__3a_eTemperature(__pyx_v_unit)); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 153, __pyx_L1_error)
  __pyx_t_4 = __Pyx_void_to_None(__pyx_v_self->thisptr->SetTemperature(__pyx_t_1, __pyx_t_2, __pyx_t_3)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "jsbsim.pyx":152
 *         self.thisptr = NULL
 * 
 *     def set_temperature(self, t, h, unit):             # <<<<<<<<<<<<<<
 *         return self.thisptr.SetTemperature(t, h, unit)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("jsbsim.FGAtmosphere.set_temperature", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_12FGAtmosphere_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6jsbsim_12FGAtmosphere_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_12FGAtmosphere_4__reduce_cython__(((struct __pyx_obj_6jsbsim_FGAtmosphere *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_12FGAtmosphere_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6jsbsim_FGAtmosphere *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGAtmosphere.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_12FGAtmosphere_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_6jsbsim_12FGAtmosphere_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_12FGAtmosphere_6__setstate_cython__(((struct __pyx_obj_6jsbsim_FGAtmosphere *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_12FGAtmosphere_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6jsbsim_FGAtmosphere *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGAtmosphere.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":159
 *     cdef c_FGMassBalance *thisptr
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

/* Python wrapper */
static int __pyx_pw_6jsbsim_13FGMassBalance_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6jsbsim_13FGMassBalance_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_6jsbsim_13FGMassBalance___init__(((struct __pyx_obj_6jsbsim_FGMassBalance *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6jsbsim_13FGMassBalance___init__(struct __pyx_obj_6jsbsim_FGMassBalance *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "jsbsim.pyx":160
 * 
 *     def __init__(self):
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def get_xyz_cg(self):
 */
  __pyx_v_self->thisptr = NULL;

  /* "jsbsim.pyx":159
 *     cdef c_FGMassBalance *thisptr
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":162
 *         self.thisptr = NULL
 * 
 *     def get_xyz_cg(self):             # <<<<<<<<<<<<<<
 *         return convertToNumpyVec(self.thisptr.GetXYZcg())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_13FGMassBalance_3get_xyz_cg(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6jsbsim_13FGMassBalance_3get_xyz_cg(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_xyz_cg (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_13FGMassBalance_2get_xyz_cg(((struct __pyx_obj_6jsbsim_FGMassBalance *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_13FGMassBalance_2get_xyz_cg(struct __pyx_obj_6jsbsim_FGMassBalance *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_xyz_cg", 0);

  /* "jsbsim.pyx":163
 * 
 *     def get_xyz_cg(self):
 *         return convertToNumpyVec(self.thisptr.GetXYZcg())             # <<<<<<<<<<<<<<
 * 
 * # this is the python wrapper class
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6jsbsim_convertToNumpyVec(__pyx_v_self->thisptr->GetXYZcg()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "jsbsim.pyx":162
 *         self.thisptr = NULL
 * 
 *     def get_xyz_cg(self):             # <<<<<<<<<<<<<<
 *         return convertToNumpyVec(self.thisptr.GetXYZcg())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGMassBalance.get_xyz_cg", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_13FGMassBalance_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6jsbsim_13FGMassBalance_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_13FGMassBalance_4__reduce_cython__(((struct __pyx_obj_6jsbsim_FGMassBalance *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_13FGMassBalance_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6jsbsim_FGMassBalance *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGMassBalance.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_13FGMassBalance_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_6jsbsim_13FGMassBalance_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_13FGMassBalance_6__setstate_cython__(((struct __pyx_obj_6jsbsim_FGMassBalance *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_13FGMassBalance_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6jsbsim_FGMassBalance *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGMassBalance.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":170
 *     cdef c_FGFDMExec *thisptr      # hold a C++ instance which we're wrapping
 * 
 *     def __cinit__(self, root_dir=None, FGPropertyManager pm_root=None):             # <<<<<<<<<<<<<<
 *         cdef c_FGPropertyManager* root
 *         # this hides startup message
 */

/* Python wrapper */
static int __pyx_pw_6jsbsim_9FGFDMExec_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6jsbsim_9FGFDMExec_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_root_dir = 0;
  struct __pyx_obj_6jsbsim_FGPropertyManager *__pyx_v_pm_root = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_root_dir,&__pyx_n_s_pm_root,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = (PyObject *)((struct __pyx_obj_6jsbsim_FGPropertyManager *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_root_dir);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pm_root);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 170, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_root_dir = values[0];
    __pyx_v_pm_root = ((struct __pyx_obj_6jsbsim_FGPropertyManager *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 170, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("jsbsim.FGFDMExec.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pm_root), __pyx_ptype_6jsbsim_FGPropertyManager, 1, "pm_root", 0))) __PYX_ERR(1, 170, __pyx_L1_error)
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec___cinit__(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self), __pyx_v_root_dir, __pyx_v_pm_root);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6jsbsim_9FGFDMExec___cinit__(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_root_dir, struct __pyx_obj_6jsbsim_FGPropertyManager *__pyx_v_pm_root) {
  JSBSim::FGPropertyManager *__pyx_v_root;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  JSBSim::FGPropertyManager *__pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "jsbsim.pyx":175
 *         # os.environ["JSBSIM_DEBUG"]=str(0)
 * 
 *         if pm_root:             # <<<<<<<<<<<<<<
 *             root = pm_root.thisptr
 *         else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_pm_root)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 175, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "jsbsim.pyx":176
 * 
 *         if pm_root:
 *             root = pm_root.thisptr             # <<<<<<<<<<<<<<
 *         else:
 *             root = NULL
 */
    __pyx_t_2 = __pyx_v_pm_root->thisptr;
    __pyx_v_root = __pyx_t_2;

    /* "jsbsim.pyx":175
 *         # os.environ["JSBSIM_DEBUG"]=str(0)
 * 
 *         if pm_root:             # <<<<<<<<<<<<<<
 *             root = pm_root.thisptr
 *         else:
 */
    goto __pyx_L3;
  }

  /* "jsbsim.pyx":178
 *             root = pm_root.thisptr
 *         else:
 *             root = NULL             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr = new c_FGFDMExec(root, NULL)
 */
  /*else*/ {
    __pyx_v_root = NULL;
  }
  __pyx_L3:;

  /* "jsbsim.pyx":180
 *             root = NULL
 * 
 *         self.thisptr = new c_FGFDMExec(root, NULL)             # <<<<<<<<<<<<<<
 *         if self.thisptr is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->thisptr = new JSBSim::FGFDMExec(__pyx_v_root, NULL);

  /* "jsbsim.pyx":181
 * 
 *         self.thisptr = new c_FGFDMExec(root, NULL)
 *         if self.thisptr is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         if root_dir is None:
 */
  __pyx_t_1 = ((__pyx_v_self->thisptr == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "jsbsim.pyx":182
 *         self.thisptr = new c_FGFDMExec(root, NULL)
 *         if self.thisptr is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         if root_dir is None:
 *             self.find_root_dir()
 */
    PyErr_NoMemory(); __PYX_ERR(1, 182, __pyx_L1_error)

    /* "jsbsim.pyx":181
 * 
 *         self.thisptr = new c_FGFDMExec(root, NULL)
 *         if self.thisptr is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         if root_dir is None:
 */
  }

  /* "jsbsim.pyx":183
 *         if self.thisptr is NULL:
 *             raise MemoryError()
 *         if root_dir is None:             # <<<<<<<<<<<<<<
 *             self.find_root_dir()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_root_dir == Py_None);
  __pyx_t_3 = (__pyx_t_1 != 0);
  if (__pyx_t_3) {

    /* "jsbsim.pyx":184
 *             raise MemoryError()
 *         if root_dir is None:
 *             self.find_root_dir()             # <<<<<<<<<<<<<<
 *         else:
 *             if not os.path.isdir(root_dir):
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_find_root_dir); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (__pyx_t_6) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 184, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else {
      __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 184, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "jsbsim.pyx":183
 *         if self.thisptr is NULL:
 *             raise MemoryError()
 *         if root_dir is None:             # <<<<<<<<<<<<<<
 *             self.find_root_dir()
 *         else:
 */
    goto __pyx_L5;
  }

  /* "jsbsim.pyx":186
 *             self.find_root_dir()
 *         else:
 *             if not os.path.isdir(root_dir):             # <<<<<<<<<<<<<<
 *                 raise IOError("Can't find root directory: {0}".format(root_dir))
 *             self.set_root_dir(root_dir)
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 186, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_path); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 186, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_isdir); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 186, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_root_dir); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 186, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_root_dir};
        __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 186, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_4);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_root_dir};
        __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 186, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_4);
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 186, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
        __Pyx_INCREF(__pyx_v_root_dir);
        __Pyx_GIVEREF(__pyx_v_root_dir);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_v_root_dir);
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 186, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(1, 186, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = ((!__pyx_t_3) != 0);
    if (unlikely(__pyx_t_1)) {

      /* "jsbsim.pyx":187
 *         else:
 *             if not os.path.isdir(root_dir):
 *                 raise IOError("Can't find root directory: {0}".format(root_dir))             # <<<<<<<<<<<<<<
 *             self.set_root_dir(root_dir)
 * 
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Can_t_find_root_directory_0, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 187, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      if (!__pyx_t_7) {
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_root_dir); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 187, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_v_root_dir};
          __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 187, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_4);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_v_root_dir};
          __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 187, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_4);
        } else
        #endif
        {
          __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 187, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7); __pyx_t_7 = NULL;
          __Pyx_INCREF(__pyx_v_root_dir);
          __Pyx_GIVEREF(__pyx_v_root_dir);
          PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_root_dir);
          __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 187, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IOError, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 187, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(1, 187, __pyx_L1_error)

      /* "jsbsim.pyx":186
 *             self.find_root_dir()
 *         else:
 *             if not os.path.isdir(root_dir):             # <<<<<<<<<<<<<<
 *                 raise IOError("Can't find root directory: {0}".format(root_dir))
 *             self.set_root_dir(root_dir)
 */
    }

    /* "jsbsim.pyx":188
 *             if not os.path.isdir(root_dir):
 *                 raise IOError("Can't find root directory: {0}".format(root_dir))
 *             self.set_root_dir(root_dir)             # <<<<<<<<<<<<<<
 * 
 *     def simulate(self, record_properties=[], t_final=1, dt=1.0/120, verbose=False):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_root_dir); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 188, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_root_dir); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 188, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_root_dir};
        __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 188, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_5);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_root_dir};
        __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 188, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_5);
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 188, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
        __Pyx_INCREF(__pyx_v_root_dir);
        __Pyx_GIVEREF(__pyx_v_root_dir);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_v_root_dir);
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 188, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_L5:;

  /* "jsbsim.pyx":170
 *     cdef c_FGFDMExec *thisptr      # hold a C++ instance which we're wrapping
 * 
 *     def __cinit__(self, root_dir=None, FGPropertyManager pm_root=None):             # <<<<<<<<<<<<<<
 *         cdef c_FGPropertyManager* root
 *         # this hides startup message
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("jsbsim.FGFDMExec.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":190
 *             self.set_root_dir(root_dir)
 * 
 *     def simulate(self, record_properties=[], t_final=1, dt=1.0/120, verbose=False):             # <<<<<<<<<<<<<<
 *         y = {}
 *         t = []
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_3simulate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_3simulate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_record_properties = 0;
  PyObject *__pyx_v_t_final = 0;
  PyObject *__pyx_v_dt = 0;
  PyObject *__pyx_v_verbose = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("simulate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_record_properties,&__pyx_n_s_t_final,&__pyx_n_s_dt,&__pyx_n_s_verbose,0};
    PyObject* values[4] = {0,0,0,0};
    values[0] = __pyx_k__19;
    values[1] = ((PyObject *)__pyx_int_1);
    values[2] = __pyx_k__20;
    values[3] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_record_properties);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_t_final);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dt);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_verbose);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "simulate") < 0)) __PYX_ERR(1, 190, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_record_properties = values[0];
    __pyx_v_t_final = values[1];
    __pyx_v_dt = values[2];
    __pyx_v_verbose = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("simulate", 0, 0, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 190, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("jsbsim.FGFDMExec.simulate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_2simulate(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self), __pyx_v_record_properties, __pyx_v_t_final, __pyx_v_dt, __pyx_v_verbose);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_2simulate(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_record_properties, PyObject *__pyx_v_t_final, PyObject *__pyx_v_dt, PyObject *__pyx_v_verbose) {
  PyObject *__pyx_v_y = NULL;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_v_prop = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  __Pyx_RefNannySetupContext("simulate", 0);

  /* "jsbsim.pyx":191
 * 
 *     def simulate(self, record_properties=[], t_final=1, dt=1.0/120, verbose=False):
 *         y = {}             # <<<<<<<<<<<<<<
 *         t = []
 *         self.set_dt(dt)
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_y = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "jsbsim.pyx":192
 *     def simulate(self, record_properties=[], t_final=1, dt=1.0/120, verbose=False):
 *         y = {}
 *         t = []             # <<<<<<<<<<<<<<
 *         self.set_dt(dt)
 *         self.run_ic()
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_t = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "jsbsim.pyx":193
 *         y = {}
 *         t = []
 *         self.set_dt(dt)             # <<<<<<<<<<<<<<
 *         self.run_ic()
 *         for prop in record_properties:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_dt); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_dt); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_dt};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 193, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_dt};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 193, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 193, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_dt);
      __Pyx_GIVEREF(__pyx_v_dt);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_dt);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 193, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "jsbsim.pyx":194
 *         t = []
 *         self.set_dt(dt)
 *         self.run_ic()             # <<<<<<<<<<<<<<
 *         for prop in record_properties:
 *             y[prop] = []
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_run_ic); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 194, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 194, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "jsbsim.pyx":195
 *         self.set_dt(dt)
 *         self.run_ic()
 *         for prop in record_properties:             # <<<<<<<<<<<<<<
 *             y[prop] = []
 *         while self.get_sim_time() < t_final:
 */
  if (likely(PyList_CheckExact(__pyx_v_record_properties)) || PyTuple_CheckExact(__pyx_v_record_properties)) {
    __pyx_t_1 = __pyx_v_record_properties; __Pyx_INCREF(__pyx_t_1); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_record_properties); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 195, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 195, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(1, 195, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 195, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(1, 195, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 195, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_6(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 195, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_prop, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "jsbsim.pyx":196
 *         self.run_ic()
 *         for prop in record_properties:
 *             y[prop] = []             # <<<<<<<<<<<<<<
 *         while self.get_sim_time() < t_final:
 *             if self.run() is False:
 */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 196, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(PyDict_SetItem(__pyx_v_y, __pyx_v_prop, __pyx_t_2) < 0)) __PYX_ERR(1, 196, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "jsbsim.pyx":195
 *         self.set_dt(dt)
 *         self.run_ic()
 *         for prop in record_properties:             # <<<<<<<<<<<<<<
 *             y[prop] = []
 *         while self.get_sim_time() < t_final:
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "jsbsim.pyx":197
 *         for prop in record_properties:
 *             y[prop] = []
 *         while self.get_sim_time() < t_final:             # <<<<<<<<<<<<<<
 *             if self.run() is False:
 *                 break
 */
  while (1) {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_sim_time); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (__pyx_t_4) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 197, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 197, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_v_t_final, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 197, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(1, 197, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (!__pyx_t_7) break;

    /* "jsbsim.pyx":198
 *             y[prop] = []
 *         while self.get_sim_time() < t_final:
 *             if self.run() is False:             # <<<<<<<<<<<<<<
 *                 break
 *             if verbose:
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_run); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    if (__pyx_t_4) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 198, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 198, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = (__pyx_t_2 == Py_False);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_8 = (__pyx_t_7 != 0);
    if (__pyx_t_8) {

      /* "jsbsim.pyx":199
 *         while self.get_sim_time() < t_final:
 *             if self.run() is False:
 *                 break             # <<<<<<<<<<<<<<
 *             if verbose:
 *                 print 't:', self.get_sim_time()
 */
      goto __pyx_L6_break;

      /* "jsbsim.pyx":198
 *             y[prop] = []
 *         while self.get_sim_time() < t_final:
 *             if self.run() is False:             # <<<<<<<<<<<<<<
 *                 break
 *             if verbose:
 */
    }

    /* "jsbsim.pyx":200
 *             if self.run() is False:
 *                 break
 *             if verbose:             # <<<<<<<<<<<<<<
 *                 print 't:', self.get_sim_time()
 *             t.append(self.get_sim_time())
 */
    __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(1, 200, __pyx_L1_error)
    if (__pyx_t_8) {

      /* "jsbsim.pyx":201
 *                 break
 *             if verbose:
 *                 print 't:', self.get_sim_time()             # <<<<<<<<<<<<<<
 *             t.append(self.get_sim_time())
 *             print 'dt: ', self.get_delta_t()
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_sim_time); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 201, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 201, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 201, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 201, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_kp_s_t_2);
      __Pyx_GIVEREF(__pyx_kp_s_t_2);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_s_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
      __pyx_t_2 = 0;
      if (__Pyx_Print(0, __pyx_t_1, 1) < 0) __PYX_ERR(1, 201, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "jsbsim.pyx":200
 *             if self.run() is False:
 *                 break
 *             if verbose:             # <<<<<<<<<<<<<<
 *                 print 't:', self.get_sim_time()
 *             t.append(self.get_sim_time())
 */
    }

    /* "jsbsim.pyx":202
 *             if verbose:
 *                 print 't:', self.get_sim_time()
 *             t.append(self.get_sim_time())             # <<<<<<<<<<<<<<
 *             print 'dt: ', self.get_delta_t()
 *             for prop in record_properties:
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_sim_time); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 202, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (__pyx_t_4) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 202, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 202, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_t, __pyx_t_1); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 202, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "jsbsim.pyx":203
 *                 print 't:', self.get_sim_time()
 *             t.append(self.get_sim_time())
 *             print 'dt: ', self.get_delta_t()             # <<<<<<<<<<<<<<
 *             for prop in record_properties:
 *                 y[prop].append(self.get_property_value(prop))
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_delta_t); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 203, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (__pyx_t_4) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 203, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 203, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 203, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_kp_s_dt_2);
    __Pyx_GIVEREF(__pyx_kp_s_dt_2);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_s_dt_2);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
    __pyx_t_1 = 0;
    if (__Pyx_Print(0, __pyx_t_2, 1) < 0) __PYX_ERR(1, 203, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "jsbsim.pyx":204
 *             t.append(self.get_sim_time())
 *             print 'dt: ', self.get_delta_t()
 *             for prop in record_properties:             # <<<<<<<<<<<<<<
 *                 y[prop].append(self.get_property_value(prop))
 *         return (t,y)
 */
    if (likely(PyList_CheckExact(__pyx_v_record_properties)) || PyTuple_CheckExact(__pyx_v_record_properties)) {
      __pyx_t_2 = __pyx_v_record_properties; __Pyx_INCREF(__pyx_t_2); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_record_properties); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 204, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 204, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(1, 204, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 204, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        } else {
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(1, 204, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 204, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        }
      } else {
        __pyx_t_1 = __pyx_t_6(__pyx_t_2);
        if (unlikely(!__pyx_t_1)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 204, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      __Pyx_XDECREF_SET(__pyx_v_prop, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "jsbsim.pyx":205
 *             print 'dt: ', self.get_delta_t()
 *             for prop in record_properties:
 *                 y[prop].append(self.get_property_value(prop))             # <<<<<<<<<<<<<<
 *         return (t,y)
 * 
 */
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_y, __pyx_v_prop); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 205, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_property_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 205, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_10 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_10) {
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_prop); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 205, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_10, __pyx_v_prop};
          __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 205, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_GOTREF(__pyx_t_4);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_10, __pyx_v_prop};
          __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 205, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_GOTREF(__pyx_t_4);
        } else
        #endif
        {
          __pyx_t_11 = PyTuple_New(1+1); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 205, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_10); __pyx_t_10 = NULL;
          __Pyx_INCREF(__pyx_v_prop);
          __Pyx_GIVEREF(__pyx_v_prop);
          PyTuple_SET_ITEM(__pyx_t_11, 0+1, __pyx_v_prop);
          __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_11, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 205, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_9 = __Pyx_PyObject_Append(__pyx_t_1, __pyx_t_4); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 205, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "jsbsim.pyx":204
 *             t.append(self.get_sim_time())
 *             print 'dt: ', self.get_delta_t()
 *             for prop in record_properties:             # <<<<<<<<<<<<<<
 *                 y[prop].append(self.get_property_value(prop))
 *         return (t,y)
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_L6_break:;

  /* "jsbsim.pyx":206
 *             for prop in record_properties:
 *                 y[prop].append(self.get_property_value(prop))
 *         return (t,y)             # <<<<<<<<<<<<<<
 * 
 *     def find_root_dir(self, search_paths=[], verbose=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_t);
  __Pyx_GIVEREF(__pyx_v_t);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_t);
  __Pyx_INCREF(__pyx_v_y);
  __Pyx_GIVEREF(__pyx_v_y);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_y);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "jsbsim.pyx":190
 *             self.set_root_dir(root_dir)
 * 
 *     def simulate(self, record_properties=[], t_final=1, dt=1.0/120, verbose=False):             # <<<<<<<<<<<<<<
 *         y = {}
 *         t = []
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("jsbsim.FGFDMExec.simulate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XDECREF(__pyx_v_prop);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":208
 *         return (t,y)
 * 
 *     def find_root_dir(self, search_paths=[], verbose=False):             # <<<<<<<<<<<<<<
 *         root_dir = None
 *         search_paths.append(os.environ.get("JSBSIM"))
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_5find_root_dir(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_5find_root_dir(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_search_paths = 0;
  PyObject *__pyx_v_verbose = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("find_root_dir (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_search_paths,&__pyx_n_s_verbose,0};
    PyObject* values[2] = {0,0};
    values[0] = __pyx_k__21;
    values[1] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_search_paths);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_verbose);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "find_root_dir") < 0)) __PYX_ERR(1, 208, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_search_paths = values[0];
    __pyx_v_verbose = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("find_root_dir", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 208, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("jsbsim.FGFDMExec.find_root_dir", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_4find_root_dir(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self), __pyx_v_search_paths, __pyx_v_verbose);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_4find_root_dir(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_search_paths, PyObject *__pyx_v_verbose) {
  PyObject *__pyx_v_root_dir = NULL;
  PyObject *__pyx_v_path = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  int __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  __Pyx_RefNannySetupContext("find_root_dir", 0);

  /* "jsbsim.pyx":209
 * 
 *     def find_root_dir(self, search_paths=[], verbose=False):
 *         root_dir = None             # <<<<<<<<<<<<<<
 *         search_paths.append(os.environ.get("JSBSIM"))
 *         if platform.system() == "Linux":
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_root_dir = Py_None;

  /* "jsbsim.pyx":210
 *     def find_root_dir(self, search_paths=[], verbose=False):
 *         root_dir = None
 *         search_paths.append(os.environ.get("JSBSIM"))             # <<<<<<<<<<<<<<
 *         if platform.system() == "Linux":
 *             search_paths.append("/usr/local/share/JSBSim/")
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_environ); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_get); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_Append(__pyx_v_search_paths, __pyx_t_2); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 210, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "jsbsim.pyx":211
 *         root_dir = None
 *         search_paths.append(os.environ.get("JSBSIM"))
 *         if platform.system() == "Linux":             # <<<<<<<<<<<<<<
 *             search_paths.append("/usr/local/share/JSBSim/")
 *             search_paths.append("/usr/share/JSBSim/")
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_platform); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_system); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_1) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 211, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 211, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_Linux, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(1, 211, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_5) {

    /* "jsbsim.pyx":212
 *         search_paths.append(os.environ.get("JSBSIM"))
 *         if platform.system() == "Linux":
 *             search_paths.append("/usr/local/share/JSBSim/")             # <<<<<<<<<<<<<<
 *             search_paths.append("/usr/share/JSBSim/")
 *         elif platform.system() == "Windows":
 */
    __pyx_t_3 = __Pyx_PyObject_Append(__pyx_v_search_paths, __pyx_kp_s_usr_local_share_JSBSim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 212, __pyx_L1_error)

    /* "jsbsim.pyx":213
 *         if platform.system() == "Linux":
 *             search_paths.append("/usr/local/share/JSBSim/")
 *             search_paths.append("/usr/share/JSBSim/")             # <<<<<<<<<<<<<<
 *         elif platform.system() == "Windows":
 *             #TODO add some windows search paths
 */
    __pyx_t_3 = __Pyx_PyObject_Append(__pyx_v_search_paths, __pyx_kp_s_usr_share_JSBSim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 213, __pyx_L1_error)

    /* "jsbsim.pyx":211
 *         root_dir = None
 *         search_paths.append(os.environ.get("JSBSIM"))
 *         if platform.system() == "Linux":             # <<<<<<<<<<<<<<
 *             search_paths.append("/usr/local/share/JSBSim/")
 *             search_paths.append("/usr/share/JSBSim/")
 */
    goto __pyx_L3;
  }

  /* "jsbsim.pyx":214
 *             search_paths.append("/usr/local/share/JSBSim/")
 *             search_paths.append("/usr/share/JSBSim/")
 *         elif platform.system() == "Windows":             # <<<<<<<<<<<<<<
 *             #TODO add some windows search paths
 *             pass
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_platform); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_system); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 214, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 214, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_Windows, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(1, 214, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_5) {
    goto __pyx_L3;
  }

  /* "jsbsim.pyx":217
 *             #TODO add some windows search paths
 *             pass
 *         elif platform.system() == "Darwin":             # <<<<<<<<<<<<<<
 *             search_paths.append("/opt/local/share/JSBSim/")
 *             search_paths.append("/usr/local/share/JSBSim/")
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_platform); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_system); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_1) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 217, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 217, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_Darwin, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(1, 217, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_5) {

    /* "jsbsim.pyx":218
 *             pass
 *         elif platform.system() == "Darwin":
 *             search_paths.append("/opt/local/share/JSBSim/")             # <<<<<<<<<<<<<<
 *             search_paths.append("/usr/local/share/JSBSim/")
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_Append(__pyx_v_search_paths, __pyx_kp_s_opt_local_share_JSBSim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 218, __pyx_L1_error)

    /* "jsbsim.pyx":219
 *         elif platform.system() == "Darwin":
 *             search_paths.append("/opt/local/share/JSBSim/")
 *             search_paths.append("/usr/local/share/JSBSim/")             # <<<<<<<<<<<<<<
 * 
 *         if verbose:
 */
    __pyx_t_3 = __Pyx_PyObject_Append(__pyx_v_search_paths, __pyx_kp_s_usr_local_share_JSBSim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 219, __pyx_L1_error)

    /* "jsbsim.pyx":217
 *             #TODO add some windows search paths
 *             pass
 *         elif platform.system() == "Darwin":             # <<<<<<<<<<<<<<
 *             search_paths.append("/opt/local/share/JSBSim/")
 *             search_paths.append("/usr/local/share/JSBSim/")
 */
  }
  __pyx_L3:;

  /* "jsbsim.pyx":221
 *             search_paths.append("/usr/local/share/JSBSim/")
 * 
 *         if verbose:             # <<<<<<<<<<<<<<
 *             print "search_paths"
 *         for path in search_paths:
 */
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(1, 221, __pyx_L1_error)
  if (__pyx_t_5) {

    /* "jsbsim.pyx":222
 * 
 *         if verbose:
 *             print "search_paths"             # <<<<<<<<<<<<<<
 *         for path in search_paths:
 *             if verbose:
 */
    if (__Pyx_PrintOne(0, __pyx_n_s_search_paths) < 0) __PYX_ERR(1, 222, __pyx_L1_error)

    /* "jsbsim.pyx":221
 *             search_paths.append("/usr/local/share/JSBSim/")
 * 
 *         if verbose:             # <<<<<<<<<<<<<<
 *             print "search_paths"
 *         for path in search_paths:
 */
  }

  /* "jsbsim.pyx":223
 *         if verbose:
 *             print "search_paths"
 *         for path in search_paths:             # <<<<<<<<<<<<<<
 *             if verbose:
 *                 print '\t', path
 */
  if (likely(PyList_CheckExact(__pyx_v_search_paths)) || PyTuple_CheckExact(__pyx_v_search_paths)) {
    __pyx_t_2 = __pyx_v_search_paths; __Pyx_INCREF(__pyx_t_2); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_search_paths); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 223, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 223, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(1, 223, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 223, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(1, 223, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 223, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_7(__pyx_t_2);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 223, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_path, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "jsbsim.pyx":224
 *             print "search_paths"
 *         for path in search_paths:
 *             if verbose:             # <<<<<<<<<<<<<<
 *                 print '\t', path
 *             if path is not None and os.path.isdir(path):
 */
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(1, 224, __pyx_L1_error)
    if (__pyx_t_5) {

      /* "jsbsim.pyx":225
 *         for path in search_paths:
 *             if verbose:
 *                 print '\t', path             # <<<<<<<<<<<<<<
 *             if path is not None and os.path.isdir(path):
 *                 root_dir = path
 */
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 225, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_kp_s__23);
      __Pyx_GIVEREF(__pyx_kp_s__23);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_s__23);
      __Pyx_INCREF(__pyx_v_path);
      __Pyx_GIVEREF(__pyx_v_path);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_path);
      if (__Pyx_Print(0, __pyx_t_4, 1) < 0) __PYX_ERR(1, 225, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "jsbsim.pyx":224
 *             print "search_paths"
 *         for path in search_paths:
 *             if verbose:             # <<<<<<<<<<<<<<
 *                 print '\t', path
 *             if path is not None and os.path.isdir(path):
 */
    }

    /* "jsbsim.pyx":226
 *             if verbose:
 *                 print '\t', path
 *             if path is not None and os.path.isdir(path):             # <<<<<<<<<<<<<<
 *                 root_dir = path
 *                 break
 */
    __pyx_t_8 = (__pyx_v_path != Py_None);
    __pyx_t_9 = (__pyx_t_8 != 0);
    if (__pyx_t_9) {
    } else {
      __pyx_t_5 = __pyx_t_9;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 226, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_path); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 226, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_isdir); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 226, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    if (!__pyx_t_10) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_path); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 226, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[2] = {__pyx_t_10, __pyx_v_path};
        __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 226, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_GOTREF(__pyx_t_4);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[2] = {__pyx_t_10, __pyx_v_path};
        __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 226, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_GOTREF(__pyx_t_4);
      } else
      #endif
      {
        __pyx_t_11 = PyTuple_New(1+1); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 226, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_10); __pyx_t_10 = NULL;
        __Pyx_INCREF(__pyx_v_path);
        __Pyx_GIVEREF(__pyx_v_path);
        PyTuple_SET_ITEM(__pyx_t_11, 0+1, __pyx_v_path);
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_11, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 226, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(1, 226, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __pyx_t_9;
    __pyx_L9_bool_binop_done:;
    if (__pyx_t_5) {

      /* "jsbsim.pyx":227
 *                 print '\t', path
 *             if path is not None and os.path.isdir(path):
 *                 root_dir = path             # <<<<<<<<<<<<<<
 *                 break
 *         if root_dir is None:
 */
      __Pyx_INCREF(__pyx_v_path);
      __Pyx_DECREF_SET(__pyx_v_root_dir, __pyx_v_path);

      /* "jsbsim.pyx":228
 *             if path is not None and os.path.isdir(path):
 *                 root_dir = path
 *                 break             # <<<<<<<<<<<<<<
 *         if root_dir is None:
 *             raise IOError("Could not find JSBSim root, try "
 */
      goto __pyx_L6_break;

      /* "jsbsim.pyx":226
 *             if verbose:
 *                 print '\t', path
 *             if path is not None and os.path.isdir(path):             # <<<<<<<<<<<<<<
 *                 root_dir = path
 *                 break
 */
    }

    /* "jsbsim.pyx":223
 *         if verbose:
 *             print "search_paths"
 *         for path in search_paths:             # <<<<<<<<<<<<<<
 *             if verbose:
 *                 print '\t', path
 */
  }
  __pyx_L6_break:;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "jsbsim.pyx":229
 *                 root_dir = path
 *                 break
 *         if root_dir is None:             # <<<<<<<<<<<<<<
 *             raise IOError("Could not find JSBSim root, try "
 *                           "defining JSBSIM environment variable")
 */
  __pyx_t_5 = (__pyx_v_root_dir == Py_None);
  __pyx_t_9 = (__pyx_t_5 != 0);
  if (unlikely(__pyx_t_9)) {

    /* "jsbsim.pyx":230
 *                 break
 *         if root_dir is None:
 *             raise IOError("Could not find JSBSim root, try "             # <<<<<<<<<<<<<<
 *                           "defining JSBSIM environment variable")
 *         self.set_root_dir(root_dir)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_IOError, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 230, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 230, __pyx_L1_error)

    /* "jsbsim.pyx":229
 *                 root_dir = path
 *                 break
 *         if root_dir is None:             # <<<<<<<<<<<<<<
 *             raise IOError("Could not find JSBSim root, try "
 *                           "defining JSBSIM environment variable")
 */
  }

  /* "jsbsim.pyx":232
 *             raise IOError("Could not find JSBSim root, try "
 *                           "defining JSBSIM environment variable")
 *         self.set_root_dir(root_dir)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_root_dir); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_1) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_root_dir); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 232, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_v_root_dir};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 232, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_v_root_dir};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 232, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_11 = PyTuple_New(1+1); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 232, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_1); __pyx_t_1 = NULL;
      __Pyx_INCREF(__pyx_v_root_dir);
      __Pyx_GIVEREF(__pyx_v_root_dir);
      PyTuple_SET_ITEM(__pyx_t_11, 0+1, __pyx_v_root_dir);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_11, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 232, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "jsbsim.pyx":208
 *         return (t,y)
 * 
 *     def find_root_dir(self, search_paths=[], verbose=False):             # <<<<<<<<<<<<<<
 *         root_dir = None
 *         search_paths.append(os.environ.get("JSBSIM"))
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("jsbsim.FGFDMExec.find_root_dir", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_root_dir);
  __Pyx_XDECREF(__pyx_v_path);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":234
 *         self.set_root_dir(root_dir)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_6jsbsim_9FGFDMExec_7__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6jsbsim_9FGFDMExec_7__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6jsbsim_9FGFDMExec_6__dealloc__(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6jsbsim_9FGFDMExec_6__dealloc__(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "jsbsim.pyx":235
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  delete __pyx_v_self->thisptr;

  /* "jsbsim.pyx":234
 *         self.set_root_dir(root_dir)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "jsbsim.pyx":237
 *         del self.thisptr
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "FGFDMExec \n" \
 *             "root dir\t:\t{0}\n" \
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_9__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_9__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_8__repr__(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_8__repr__(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "jsbsim.pyx":238
 * 
 *     def __repr__(self):
 *         return "FGFDMExec \n" \             # <<<<<<<<<<<<<<
 *             "root dir\t:\t{0}\n" \
 *             "aircraft path\t:\t{1}\n" \
 */
  __Pyx_XDECREF(__pyx_r);

  /* "jsbsim.pyx":243
 *             "engine path\t:\t{2}\n" \
 *             "systems path\t:\t{3}\n" \
 *                 .format(             # <<<<<<<<<<<<<<
 *                 self.get_root_dir(),
 *                 self.get_aircraft_path(),
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_FGFDMExec_root_dir_0_aircraft_pa, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "jsbsim.pyx":244
 *             "systems path\t:\t{3}\n" \
 *                 .format(
 *                 self.get_root_dir(),             # <<<<<<<<<<<<<<
 *                 self.get_aircraft_path(),
 *                 self.get_engine_path(),
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_root_dir); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 244, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 244, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "jsbsim.pyx":245
 *                 .format(
 *                 self.get_root_dir(),
 *                 self.get_aircraft_path(),             # <<<<<<<<<<<<<<
 *                 self.get_engine_path(),
 *                 self.get_systems_path())
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_aircraft_path); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (__pyx_t_6) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 245, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 245, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "jsbsim.pyx":246
 *                 self.get_root_dir(),
 *                 self.get_aircraft_path(),
 *                 self.get_engine_path(),             # <<<<<<<<<<<<<<
 *                 self.get_systems_path())
 * 
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_engine_path); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (__pyx_t_7) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 246, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else {
    __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 246, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "jsbsim.pyx":247
 *                 self.get_aircraft_path(),
 *                 self.get_engine_path(),
 *                 self.get_systems_path())             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, key):
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_systems_path); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  if (__pyx_t_8) {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 247, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else {
    __pyx_t_6 = __Pyx_PyObject_CallNoArg(__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 247, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_9 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_7, __pyx_t_3, __pyx_t_4, __pyx_t_5, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_9, 4+__pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 243, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_7, __pyx_t_3, __pyx_t_4, __pyx_t_5, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_9, 4+__pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 243, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(4+__pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 243, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_9, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_9, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_9, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_8, 3+__pyx_t_9, __pyx_t_6);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 243, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "jsbsim.pyx":237
 *         del self.thisptr
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "FGFDMExec \n" \
 *             "root dir\t:\t{0}\n" \
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("jsbsim.FGFDMExec.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":249
 *                 self.get_systems_path())
 * 
 *     def __getitem__(self, key):             # <<<<<<<<<<<<<<
 *         pm = self.get_property_manager()
 *         if not pm.hasNode(key):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_11__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_11__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_10__getitem__(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self), ((PyObject *)__pyx_v_key));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_10__getitem__(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_v_pm = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "jsbsim.pyx":250
 * 
 *     def __getitem__(self, key):
 *         pm = self.get_property_manager()             # <<<<<<<<<<<<<<
 *         if not pm.hasNode(key):
 *             raise KeyError("No property named {}".format(key))
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_property_manager); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 250, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 250, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_pm = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "jsbsim.pyx":251
 *     def __getitem__(self, key):
 *         pm = self.get_property_manager()
 *         if not pm.hasNode(key):             # <<<<<<<<<<<<<<
 *             raise KeyError("No property named {}".format(key))
 *         return self.get_property_value(key)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_pm, __pyx_n_s_hasNode); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_key); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_key};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 251, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_key};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 251, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 251, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_key);
      __Pyx_GIVEREF(__pyx_v_key);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_key);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 251, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(1, 251, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = ((!__pyx_t_5) != 0);
  if (unlikely(__pyx_t_6)) {

    /* "jsbsim.pyx":252
 *         pm = self.get_property_manager()
 *         if not pm.hasNode(key):
 *             raise KeyError("No property named {}".format(key))             # <<<<<<<<<<<<<<
 *         return self.get_property_value(key)
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_No_property_named, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_key); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 252, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_key};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 252, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_key};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 252, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 252, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(__pyx_v_key);
        __Pyx_GIVEREF(__pyx_v_key);
        PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_v_key);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 252, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_KeyError, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 252, __pyx_L1_error)

    /* "jsbsim.pyx":251
 *     def __getitem__(self, key):
 *         pm = self.get_property_manager()
 *         if not pm.hasNode(key):             # <<<<<<<<<<<<<<
 *             raise KeyError("No property named {}".format(key))
 *         return self.get_property_value(key)
 */
  }

  /* "jsbsim.pyx":253
 *         if not pm.hasNode(key):
 *             raise KeyError("No property named {}".format(key))
 *         return self.get_property_value(key)             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(self, key, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_property_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_key); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 253, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_key};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 253, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_key};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 253, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 253, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_key);
      __Pyx_GIVEREF(__pyx_v_key);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_key);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 253, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "jsbsim.pyx":249
 *                 self.get_systems_path())
 * 
 *     def __getitem__(self, key):             # <<<<<<<<<<<<<<
 *         pm = self.get_property_manager()
 *         if not pm.hasNode(key):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("jsbsim.FGFDMExec.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pm);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":255
 *         return self.get_property_value(key)
 * 
 *     def __setitem__(self, key, value):             # <<<<<<<<<<<<<<
 *         self.set_property_value(key, value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_6jsbsim_9FGFDMExec_13__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6jsbsim_9FGFDMExec_13__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_12__setitem__(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self), ((PyObject *)__pyx_v_key), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6jsbsim_9FGFDMExec_12__setitem__(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "jsbsim.pyx":256
 * 
 *     def __setitem__(self, key, value):
 *         self.set_property_value(key, value)             # <<<<<<<<<<<<<<
 * 
 *     def run(self):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_property_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_key, __pyx_v_value};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 256, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_key, __pyx_v_value};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 256, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 256, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_key);
    __Pyx_GIVEREF(__pyx_v_key);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_key);
    __Pyx_INCREF(__pyx_v_value);
    __Pyx_GIVEREF(__pyx_v_value);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_value);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 256, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "jsbsim.pyx":255
 *         return self.get_property_value(key)
 * 
 *     def __setitem__(self, key, value):             # <<<<<<<<<<<<<<
 *         self.set_property_value(key, value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("jsbsim.FGFDMExec.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":258
 *         self.set_property_value(key, value)
 * 
 *     def run(self):             # <<<<<<<<<<<<<<
 *         """
 *         This function executes each scheduled model in succession.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_15run(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6jsbsim_9FGFDMExec_14run[] = "\n        This function executes each scheduled model in succession.\n        @param return true if successful, false if sim should be ended\n        ";
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_15run(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("run (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_14run(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_14run(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("run", 0);

  /* "jsbsim.pyx":263
 *         @param return true if successful, false if sim should be ended
 *         """
 *         return self.thisptr.Run()             # <<<<<<<<<<<<<<
 * 
 *     def run_ic(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->Run();
  } catch(...) {
    convertJSBSimToPyExc(); if (!PyErr_Occurred()) PyErr_SetString(PyExc_RuntimeError , "Error converting c++ exception.");
    __PYX_ERR(1, 263, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "jsbsim.pyx":258
 *         self.set_property_value(key, value)
 * 
 *     def run(self):             # <<<<<<<<<<<<<<
 *         """
 *         This function executes each scheduled model in succession.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("jsbsim.FGFDMExec.run", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":265
 *         return self.thisptr.Run()
 * 
 *     def run_ic(self):             # <<<<<<<<<<<<<<
 *         """
 *         Initializes the sim from the initial condition object and executes
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_17run_ic(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6jsbsim_9FGFDMExec_16run_ic[] = "\n        Initializes the sim from the initial condition object and executes\n        each scheduled model without integrating i.e. dt=0.\n        @param return true if successful\n        ";
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_17run_ic(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("run_ic (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_16run_ic(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_16run_ic(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("run_ic", 0);

  /* "jsbsim.pyx":271
 *         @param return true if successful
 *         """
 *         return  self.thisptr.RunIC()             # <<<<<<<<<<<<<<
 * 
 *     def load_model(self, model, add_model_to_path=True):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->RunIC();
  } catch(...) {
    convertJSBSimToPyExc(); if (!PyErr_Occurred()) PyErr_SetString(PyExc_RuntimeError , "Error converting c++ exception.");
    __PYX_ERR(1, 271, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 271, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "jsbsim.pyx":265
 *         return self.thisptr.Run()
 * 
 *     def run_ic(self):             # <<<<<<<<<<<<<<
 *         """
 *         Initializes the sim from the initial condition object and executes
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("jsbsim.FGFDMExec.run_ic", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":273
 *         return  self.thisptr.RunIC()
 * 
 *     def load_model(self, model, add_model_to_path=True):             # <<<<<<<<<<<<<<
 *         """
 *         Loads an aircraft model.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_19load_model(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6jsbsim_9FGFDMExec_18load_model[] = "\n        Loads an aircraft model.\n        @param AircraftPath path to the aircraft/ directory. For instance:\n            \"aircraft\". Under aircraft, then, would be directories for various\n            modeled aircraft such as C172/, x15/, etc.\n        @param EnginePath path to the directory under which engine config\n            files are kept, for instance \"engine\"\n        @param SystemsPath path to the directory under which systems config\n            files are kept, for instance \"systems\"\n        @param model the name of the aircraft model itself. This file will\n            be looked for in the directory specified in the AircraftPath variable,\n            and in turn under the directory with the same name as the model. For\n            instance: \"aircraft/x15/x15.xml\"\n        @param addModelToPath set to true to add the model name to the\n            AircraftPath, defaults to true\n        @return true if successful\n        ";
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_19load_model(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_model = 0;
  PyObject *__pyx_v_add_model_to_path = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("load_model (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_model,&__pyx_n_s_add_model_to_path,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_model)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_add_model_to_path);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "load_model") < 0)) __PYX_ERR(1, 273, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_model = values[0];
    __pyx_v_add_model_to_path = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("load_model", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 273, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("jsbsim.FGFDMExec.load_model", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_18load_model(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self), __pyx_v_model, __pyx_v_add_model_to_path);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_18load_model(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_model, PyObject *__pyx_v_add_model_to_path) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  bool __pyx_t_5;
  __Pyx_RefNannySetupContext("load_model", 0);
  __Pyx_INCREF(__pyx_v_model);

  /* "jsbsim.pyx":291
 *         @return true if successful
 *         """
 *         model = model.encode()             # <<<<<<<<<<<<<<
 *         return self.thisptr.LoadModel(model, add_model_to_path)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_model, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 291, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 291, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_model, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "jsbsim.pyx":292
 *         """
 *         model = model.encode()
 *         return self.thisptr.LoadModel(model, add_model_to_path)             # <<<<<<<<<<<<<<
 * 
 *     def load_model_with_paths(self, model, aircraft_path,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_v_model); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 292, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_add_model_to_path); if (unlikely((__pyx_t_5 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 292, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->LoadModel(__pyx_t_4, __pyx_t_5)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "jsbsim.pyx":273
 *         return  self.thisptr.RunIC()
 * 
 *     def load_model(self, model, add_model_to_path=True):             # <<<<<<<<<<<<<<
 *         """
 *         Loads an aircraft model.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("jsbsim.FGFDMExec.load_model", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_model);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":294
 *         return self.thisptr.LoadModel(model, add_model_to_path)
 * 
 *     def load_model_with_paths(self, model, aircraft_path,             # <<<<<<<<<<<<<<
 *                    engine_path, systems_path, add_model_to_path=True):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_21load_model_with_paths(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6jsbsim_9FGFDMExec_20load_model_with_paths[] = "\n        Loads an aircraft model.  The paths to the aircraft and engine\n        config file directories must be set prior to calling this.  See\n        below.\n        @param model the name of the aircraft model itself. This file will\n            be looked for in the directory specified in the AircraftPath variable,\n            and in turn under the directory with the same name as the model. For\n            instance: \"aircraft/x15/x15.xml\"\n        @param addModelToPath set to true to add the model name to the\n            AircraftPath, defaults to true\n        @return true if successful\n        ";
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_21load_model_with_paths(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_model = 0;
  PyObject *__pyx_v_aircraft_path = 0;
  PyObject *__pyx_v_engine_path = 0;
  PyObject *__pyx_v_systems_path = 0;
  PyObject *__pyx_v_add_model_to_path = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("load_model_with_paths (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_model,&__pyx_n_s_aircraft_path,&__pyx_n_s_engine_path,&__pyx_n_s_systems_path,&__pyx_n_s_add_model_to_path,0};
    PyObject* values[5] = {0,0,0,0,0};

    /* "jsbsim.pyx":295
 * 
 *     def load_model_with_paths(self, model, aircraft_path,
 *                    engine_path, systems_path, add_model_to_path=True):             # <<<<<<<<<<<<<<
 *         """
 *         Loads an aircraft model.  The paths to the aircraft and engine
 */
    values[4] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_model)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_aircraft_path)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("load_model_with_paths", 0, 4, 5, 1); __PYX_ERR(1, 294, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_engine_path)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("load_model_with_paths", 0, 4, 5, 2); __PYX_ERR(1, 294, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_systems_path)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("load_model_with_paths", 0, 4, 5, 3); __PYX_ERR(1, 294, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_add_model_to_path);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "load_model_with_paths") < 0)) __PYX_ERR(1, 294, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_model = values[0];
    __pyx_v_aircraft_path = values[1];
    __pyx_v_engine_path = values[2];
    __pyx_v_systems_path = values[3];
    __pyx_v_add_model_to_path = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("load_model_with_paths", 0, 4, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 294, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("jsbsim.FGFDMExec.load_model_with_paths", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_20load_model_with_paths(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self), __pyx_v_model, __pyx_v_aircraft_path, __pyx_v_engine_path, __pyx_v_systems_path, __pyx_v_add_model_to_path);

  /* "jsbsim.pyx":294
 *         return self.thisptr.LoadModel(model, add_model_to_path)
 * 
 *     def load_model_with_paths(self, model, aircraft_path,             # <<<<<<<<<<<<<<
 *                    engine_path, systems_path, add_model_to_path=True):
 *         """
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_20load_model_with_paths(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_model, PyObject *__pyx_v_aircraft_path, PyObject *__pyx_v_engine_path, PyObject *__pyx_v_systems_path, PyObject *__pyx_v_add_model_to_path) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  std::string __pyx_t_5;
  std::string __pyx_t_6;
  std::string __pyx_t_7;
  bool __pyx_t_8;
  __Pyx_RefNannySetupContext("load_model_with_paths", 0);
  __Pyx_INCREF(__pyx_v_model);
  __Pyx_INCREF(__pyx_v_aircraft_path);
  __Pyx_INCREF(__pyx_v_engine_path);
  __Pyx_INCREF(__pyx_v_systems_path);

  /* "jsbsim.pyx":308
 *         @return true if successful
 *         """
 *         model = model.encode()             # <<<<<<<<<<<<<<
 *         aircraft_path = aircraft_path.encode()
 *         engine_path = engine_path.encode()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_model, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 308, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 308, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_model, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "jsbsim.pyx":309
 *         """
 *         model = model.encode()
 *         aircraft_path = aircraft_path.encode()             # <<<<<<<<<<<<<<
 *         engine_path = engine_path.encode()
 *         systems_path = systems_path.encode()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_aircraft_path, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 309, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 309, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_aircraft_path, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "jsbsim.pyx":310
 *         model = model.encode()
 *         aircraft_path = aircraft_path.encode()
 *         engine_path = engine_path.encode()             # <<<<<<<<<<<<<<
 *         systems_path = systems_path.encode()
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_engine_path, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 310, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 310, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_engine_path, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "jsbsim.pyx":311
 *         aircraft_path = aircraft_path.encode()
 *         engine_path = engine_path.encode()
 *         systems_path = systems_path.encode()             # <<<<<<<<<<<<<<
 * 
 *         return self.thisptr.LoadModel(c_SGPath(aircraft_path, NULL),
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_systems_path, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 311, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 311, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_systems_path, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "jsbsim.pyx":313
 *         systems_path = systems_path.encode()
 * 
 *         return self.thisptr.LoadModel(c_SGPath(aircraft_path, NULL),             # <<<<<<<<<<<<<<
 *             c_SGPath(engine_path, NULL), c_SGPath(systems_path, NULL), model,
 *             add_model_to_path)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_v_aircraft_path); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 313, __pyx_L1_error)

  /* "jsbsim.pyx":314
 * 
 *         return self.thisptr.LoadModel(c_SGPath(aircraft_path, NULL),
 *             c_SGPath(engine_path, NULL), c_SGPath(systems_path, NULL), model,             # <<<<<<<<<<<<<<
 *             add_model_to_path)
 * 
 */
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_v_engine_path); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 314, __pyx_L1_error)
  __pyx_t_6 = __pyx_convert_string_from_py_std__in_string(__pyx_v_systems_path); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 314, __pyx_L1_error)
  __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_v_model); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 314, __pyx_L1_error)

  /* "jsbsim.pyx":315
 *         return self.thisptr.LoadModel(c_SGPath(aircraft_path, NULL),
 *             c_SGPath(engine_path, NULL), c_SGPath(systems_path, NULL), model,
 *             add_model_to_path)             # <<<<<<<<<<<<<<
 * 
 *     def load_script(self, script, delta_t=0.0, initfile=""):
 */
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_v_add_model_to_path); if (unlikely((__pyx_t_8 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 315, __pyx_L1_error)

  /* "jsbsim.pyx":313
 *         systems_path = systems_path.encode()
 * 
 *         return self.thisptr.LoadModel(c_SGPath(aircraft_path, NULL),             # <<<<<<<<<<<<<<
 *             c_SGPath(engine_path, NULL), c_SGPath(systems_path, NULL), model,
 *             add_model_to_path)
 */
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->LoadModel(SGPath(__pyx_t_4, NULL), SGPath(__pyx_t_5, NULL), SGPath(__pyx_t_6, NULL), __pyx_t_7, __pyx_t_8)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "jsbsim.pyx":294
 *         return self.thisptr.LoadModel(model, add_model_to_path)
 * 
 *     def load_model_with_paths(self, model, aircraft_path,             # <<<<<<<<<<<<<<
 *                    engine_path, systems_path, add_model_to_path=True):
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("jsbsim.FGFDMExec.load_model_with_paths", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_model);
  __Pyx_XDECREF(__pyx_v_aircraft_path);
  __Pyx_XDECREF(__pyx_v_engine_path);
  __Pyx_XDECREF(__pyx_v_systems_path);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":317
 *             add_model_to_path)
 * 
 *     def load_script(self, script, delta_t=0.0, initfile=""):             # <<<<<<<<<<<<<<
 *         """
 *         Loads a script
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_23load_script(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6jsbsim_9FGFDMExec_22load_script[] = "\n        Loads a script\n        @param Script The full path name and file name for the script to be loaded.\n        @param deltaT The simulation integration step size, if given.  If no value is supplied\n            then 0.0 is used and the value is expected to be supplied in\n            the script file itself.\n        @param initfile The initialization file that will override the initialization file\n            specified in the script file. If no file name is given on the command line,\n            the file specified in the script will be used. If an initialization file\n            is not given in either place, an error will result.\n        @return true if successfully loads; false otherwise. */\n        ";
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_23load_script(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_script = 0;
  PyObject *__pyx_v_delta_t = 0;
  PyObject *__pyx_v_initfile = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("load_script (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_script,&__pyx_n_s_delta_t,&__pyx_n_s_initfile,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)__pyx_float_0_0);
    values[2] = ((PyObject *)__pyx_kp_s__25);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_script)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_delta_t);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_initfile);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "load_script") < 0)) __PYX_ERR(1, 317, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_script = values[0];
    __pyx_v_delta_t = values[1];
    __pyx_v_initfile = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("load_script", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 317, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("jsbsim.FGFDMExec.load_script", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_22load_script(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self), __pyx_v_script, __pyx_v_delta_t, __pyx_v_initfile);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_22load_script(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_script, PyObject *__pyx_v_delta_t, PyObject *__pyx_v_initfile) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  double __pyx_t_5;
  std::string __pyx_t_6;
  bool __pyx_t_7;
  __Pyx_RefNannySetupContext("load_script", 0);
  __Pyx_INCREF(__pyx_v_script);
  __Pyx_INCREF(__pyx_v_initfile);

  /* "jsbsim.pyx":330
 *         @return true if successfully loads; false otherwise. *[inserted by cython to avoid comment closer]/
 *         """
 *         script = script.encode()             # <<<<<<<<<<<<<<
 *         initfile = initfile.encode()
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_script, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 330, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 330, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_script, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "jsbsim.pyx":331
 *         """
 *         script = script.encode()
 *         initfile = initfile.encode()             # <<<<<<<<<<<<<<
 * 
 *         return self.thisptr.LoadScript(c_SGPath(script, NULL), delta_t,
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_initfile, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 331, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 331, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_initfile, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "jsbsim.pyx":333
 *         initfile = initfile.encode()
 * 
 *         return self.thisptr.LoadScript(c_SGPath(script, NULL), delta_t,             # <<<<<<<<<<<<<<
 *                                        c_SGPath(initfile,NULL))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_v_script); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 333, __pyx_L1_error)
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_delta_t); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 333, __pyx_L1_error)

  /* "jsbsim.pyx":334
 * 
 *         return self.thisptr.LoadScript(c_SGPath(script, NULL), delta_t,
 *                                        c_SGPath(initfile,NULL))             # <<<<<<<<<<<<<<
 * 
 *     def set_engine_path(self, path):
 */
  __pyx_t_6 = __pyx_convert_string_from_py_std__in_string(__pyx_v_initfile); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 334, __pyx_L1_error)

  /* "jsbsim.pyx":333
 *         initfile = initfile.encode()
 * 
 *         return self.thisptr.LoadScript(c_SGPath(script, NULL), delta_t,             # <<<<<<<<<<<<<<
 *                                        c_SGPath(initfile,NULL))
 * 
 */
  try {
    __pyx_t_7 = __pyx_v_self->thisptr->LoadScript(SGPath(__pyx_t_4, NULL), __pyx_t_5, SGPath(__pyx_t_6, NULL));
  } catch(...) {
    convertJSBSimToPyExc(); if (!PyErr_Occurred()) PyErr_SetString(PyExc_RuntimeError , "Error converting c++ exception.");
    __PYX_ERR(1, 333, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "jsbsim.pyx":317
 *             add_model_to_path)
 * 
 *     def load_script(self, script, delta_t=0.0, initfile=""):             # <<<<<<<<<<<<<<
 *         """
 *         Loads a script
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("jsbsim.FGFDMExec.load_script", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_script);
  __Pyx_XDECREF(__pyx_v_initfile);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":336
 *                                        c_SGPath(initfile,NULL))
 * 
 *     def set_engine_path(self, path):             # <<<<<<<<<<<<<<
 *         """
 *         Sets the path to the engine config file directories.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_25set_engine_path(PyObject *__pyx_v_self, PyObject *__pyx_v_path); /*proto*/
static char __pyx_doc_6jsbsim_9FGFDMExec_24set_engine_path[] = "\n        Sets the path to the engine config file directories.\n        @param path path to the directory under which engine config\n            files are kept, for instance \"engine\"\n        ";
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_25set_engine_path(PyObject *__pyx_v_self, PyObject *__pyx_v_path) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_engine_path (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_24set_engine_path(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self), ((PyObject *)__pyx_v_path));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_24set_engine_path(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_path) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  __Pyx_RefNannySetupContext("set_engine_path", 0);
  __Pyx_INCREF(__pyx_v_path);

  /* "jsbsim.pyx":342
 *             files are kept, for instance "engine"
 *         """
 *         path = path.encode()             # <<<<<<<<<<<<<<
 *         return self.thisptr.SetEnginePath(c_SGPath(path, NULL))
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_path, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 342, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 342, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_path, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "jsbsim.pyx":343
 *         """
 *         path = path.encode()
 *         return self.thisptr.SetEnginePath(c_SGPath(path, NULL))             # <<<<<<<<<<<<<<
 * 
 *     def set_aircraft_path(self, path):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_v_path); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 343, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->SetEnginePath(SGPath(__pyx_t_4, NULL))); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "jsbsim.pyx":336
 *                                        c_SGPath(initfile,NULL))
 * 
 *     def set_engine_path(self, path):             # <<<<<<<<<<<<<<
 *         """
 *         Sets the path to the engine config file directories.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("jsbsim.FGFDMExec.set_engine_path", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_path);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":345
 *         return self.thisptr.SetEnginePath(c_SGPath(path, NULL))
 * 
 *     def set_aircraft_path(self, path):             # <<<<<<<<<<<<<<
 *         """
 *         Sets the path to the aircraft config file directories.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_27set_aircraft_path(PyObject *__pyx_v_self, PyObject *__pyx_v_path); /*proto*/
static char __pyx_doc_6jsbsim_9FGFDMExec_26set_aircraft_path[] = "\n        Sets the path to the aircraft config file directories.\n        @param path path to the aircraft directory. For instance:\n            \"aircraft\". Under aircraft, then, would be directories for various\n            modeled aircraft such as C172/, x15/, etc.\n        ";
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_27set_aircraft_path(PyObject *__pyx_v_self, PyObject *__pyx_v_path) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_aircraft_path (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_26set_aircraft_path(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self), ((PyObject *)__pyx_v_path));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_26set_aircraft_path(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_path) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  __Pyx_RefNannySetupContext("set_aircraft_path", 0);
  __Pyx_INCREF(__pyx_v_path);

  /* "jsbsim.pyx":352
 *             modeled aircraft such as C172/, x15/, etc.
 *         """
 *         path = path.encode()             # <<<<<<<<<<<<<<
 *         return self.thisptr.SetAircraftPath(c_SGPath(path, NULL))
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_path, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 352, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 352, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_path, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "jsbsim.pyx":353
 *         """
 *         path = path.encode()
 *         return self.thisptr.SetAircraftPath(c_SGPath(path, NULL))             # <<<<<<<<<<<<<<
 * 
 *     def set_systems_path(self, path):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_v_path); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 353, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->SetAircraftPath(SGPath(__pyx_t_4, NULL))); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "jsbsim.pyx":345
 *         return self.thisptr.SetEnginePath(c_SGPath(path, NULL))
 * 
 *     def set_aircraft_path(self, path):             # <<<<<<<<<<<<<<
 *         """
 *         Sets the path to the aircraft config file directories.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("jsbsim.FGFDMExec.set_aircraft_path", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_path);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":355
 *         return self.thisptr.SetAircraftPath(c_SGPath(path, NULL))
 * 
 *     def set_systems_path(self, path):             # <<<<<<<<<<<<<<
 *         """
 *         Sets the path to the systems config file directories.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_29set_systems_path(PyObject *__pyx_v_self, PyObject *__pyx_v_path); /*proto*/
static char __pyx_doc_6jsbsim_9FGFDMExec_28set_systems_path[] = "\n        Sets the path to the systems config file directories.\n        @param path path to the directory under which systems config\n            files are kept, for instance \"systems\"\n        ";
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_29set_systems_path(PyObject *__pyx_v_self, PyObject *__pyx_v_path) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_systems_path (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_28set_systems_path(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self), ((PyObject *)__pyx_v_path));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_28set_systems_path(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_path) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  __Pyx_RefNannySetupContext("set_systems_path", 0);
  __Pyx_INCREF(__pyx_v_path);

  /* "jsbsim.pyx":361
 *             files are kept, for instance "systems"
 *         """
 *         path = path.encode()             # <<<<<<<<<<<<<<
 *         return self.thisptr.SetSystemsPath(c_SGPath(path, NULL))
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_path, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 361, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 361, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 361, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_path, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "jsbsim.pyx":362
 *         """
 *         path = path.encode()
 *         return self.thisptr.SetSystemsPath(c_SGPath(path, NULL))             # <<<<<<<<<<<<<<
 * 
 *     def set_root_dir(self, path):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_v_path); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 362, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->SetSystemsPath(SGPath(__pyx_t_4, NULL))); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "jsbsim.pyx":355
 *         return self.thisptr.SetAircraftPath(c_SGPath(path, NULL))
 * 
 *     def set_systems_path(self, path):             # <<<<<<<<<<<<<<
 *         """
 *         Sets the path to the systems config file directories.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("jsbsim.FGFDMExec.set_systems_path", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_path);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":364
 *         return self.thisptr.SetSystemsPath(c_SGPath(path, NULL))
 * 
 *     def set_root_dir(self, path):             # <<<<<<<<<<<<<<
 *         """
 *         Sets the root directory where JSBSim starts looking for its system directories.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_31set_root_dir(PyObject *__pyx_v_self, PyObject *__pyx_v_path); /*proto*/
static char __pyx_doc_6jsbsim_9FGFDMExec_30set_root_dir[] = "\n        Sets the root directory where JSBSim starts looking for its system directories.\n        @param path the string containing the root directory.\n        ";
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_31set_root_dir(PyObject *__pyx_v_self, PyObject *__pyx_v_path) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_root_dir (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_30set_root_dir(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self), ((PyObject *)__pyx_v_path));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_30set_root_dir(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_path) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  __Pyx_RefNannySetupContext("set_root_dir", 0);
  __Pyx_INCREF(__pyx_v_path);

  /* "jsbsim.pyx":369
 *         @param path the string containing the root directory.
 *         """
 *         path = path.encode()             # <<<<<<<<<<<<<<
 *         self.thisptr.SetRootDir(c_SGPath(path, NULL))
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_path, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 369, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 369, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 369, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_path, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "jsbsim.pyx":370
 *         """
 *         path = path.encode()
 *         self.thisptr.SetRootDir(c_SGPath(path, NULL))             # <<<<<<<<<<<<<<
 * 
 *         # this is a hack to fix a bug in JSBSim
 */
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_v_path); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 370, __pyx_L1_error)
  __pyx_v_self->thisptr->SetRootDir(SGPath(__pyx_t_4, NULL));

  /* "jsbsim.pyx":373
 * 
 *         # this is a hack to fix a bug in JSBSim
 *         self.set_engine_path("engine")             # <<<<<<<<<<<<<<
 *         self.set_aircraft_path("aircraft")
 *         self.set_systems_path("systems")
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_engine_path); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "jsbsim.pyx":374
 *         # this is a hack to fix a bug in JSBSim
 *         self.set_engine_path("engine")
 *         self.set_aircraft_path("aircraft")             # <<<<<<<<<<<<<<
 *         self.set_systems_path("systems")
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_aircraft_path); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "jsbsim.pyx":375
 *         self.set_engine_path("engine")
 *         self.set_aircraft_path("aircraft")
 *         self.set_systems_path("systems")             # <<<<<<<<<<<<<<
 * 
 *     def get_engine_path(self):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_systems_path); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "jsbsim.pyx":364
 *         return self.thisptr.SetSystemsPath(c_SGPath(path, NULL))
 * 
 *     def set_root_dir(self, path):             # <<<<<<<<<<<<<<
 *         """
 *         Sets the root directory where JSBSim starts looking for its system directories.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("jsbsim.FGFDMExec.set_root_dir", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_path);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":377
 *         self.set_systems_path("systems")
 * 
 *     def get_engine_path(self):             # <<<<<<<<<<<<<<
 *         """
 *         Retrieves the engine path
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_33get_engine_path(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6jsbsim_9FGFDMExec_32get_engine_path[] = "\n        Retrieves the engine path\n        ";
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_33get_engine_path(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_engine_path (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_32get_engine_path(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_32get_engine_path(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_engine_path", 0);

  /* "jsbsim.pyx":381
 *         Retrieves the engine path
 *         """
 *         return self.thisptr.GetEnginePath().utf8Str()             # <<<<<<<<<<<<<<
 * 
 *     def get_aircraft_path(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->thisptr->GetEnginePath().utf8Str()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "jsbsim.pyx":377
 *         self.set_systems_path("systems")
 * 
 *     def get_engine_path(self):             # <<<<<<<<<<<<<<
 *         """
 *         Retrieves the engine path
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGFDMExec.get_engine_path", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":383
 *         return self.thisptr.GetEnginePath().utf8Str()
 * 
 *     def get_aircraft_path(self):             # <<<<<<<<<<<<<<
 *         """
 *         Retrieves the aircraft path
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_35get_aircraft_path(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6jsbsim_9FGFDMExec_34get_aircraft_path[] = "\n        Retrieves the aircraft path\n        ";
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_35get_aircraft_path(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_aircraft_path (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_34get_aircraft_path(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_34get_aircraft_path(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_aircraft_path", 0);

  /* "jsbsim.pyx":387
 *         Retrieves the aircraft path
 *         """
 *         return self.thisptr.GetAircraftPath().utf8Str()             # <<<<<<<<<<<<<<
 * 
 *     def get_systems_path(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->thisptr->GetAircraftPath().utf8Str()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "jsbsim.pyx":383
 *         return self.thisptr.GetEnginePath().utf8Str()
 * 
 *     def get_aircraft_path(self):             # <<<<<<<<<<<<<<
 *         """
 *         Retrieves the aircraft path
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGFDMExec.get_aircraft_path", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":389
 *         return self.thisptr.GetAircraftPath().utf8Str()
 * 
 *     def get_systems_path(self):             # <<<<<<<<<<<<<<
 *         """
 *         Retrieves the systems path
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_37get_systems_path(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6jsbsim_9FGFDMExec_36get_systems_path[] = "\n        Retrieves the systems path\n        ";
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_37get_systems_path(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_systems_path (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_36get_systems_path(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_36get_systems_path(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_systems_path", 0);

  /* "jsbsim.pyx":393
 *         Retrieves the systems path
 *         """
 *         return self.thisptr.GetSystemsPath().utf8Str()             # <<<<<<<<<<<<<<
 * 
 *     def get_full_aircraft_path(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->thisptr->GetSystemsPath().utf8Str()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "jsbsim.pyx":389
 *         return self.thisptr.GetAircraftPath().utf8Str()
 * 
 *     def get_systems_path(self):             # <<<<<<<<<<<<<<
 *         """
 *         Retrieves the systems path
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGFDMExec.get_systems_path", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":395
 *         return self.thisptr.GetSystemsPath().utf8Str()
 * 
 *     def get_full_aircraft_path(self):             # <<<<<<<<<<<<<<
 *         """
 *         Retrieves the full aircraft path name
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_39get_full_aircraft_path(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6jsbsim_9FGFDMExec_38get_full_aircraft_path[] = "\n        Retrieves the full aircraft path name\n        ";
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_39get_full_aircraft_path(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_full_aircraft_path (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_38get_full_aircraft_path(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_38get_full_aircraft_path(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_full_aircraft_path", 0);

  /* "jsbsim.pyx":399
 *         Retrieves the full aircraft path name
 *         """
 *         return self.thisptr.GetFullAircraftPath().utf8Str()             # <<<<<<<<<<<<<<
 * 
 *     def get_root_dir(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->thisptr->GetFullAircraftPath().utf8Str()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "jsbsim.pyx":395
 *         return self.thisptr.GetSystemsPath().utf8Str()
 * 
 *     def get_full_aircraft_path(self):             # <<<<<<<<<<<<<<
 *         """
 *         Retrieves the full aircraft path name
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGFDMExec.get_full_aircraft_path", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":401
 *         return self.thisptr.GetFullAircraftPath().utf8Str()
 * 
 *     def get_root_dir(self):             # <<<<<<<<<<<<<<
 *         """
 *         Retrieves the Root Directory.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_41get_root_dir(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6jsbsim_9FGFDMExec_40get_root_dir[] = "\n        Retrieves the Root Directory.\n        @return the string representing the root (base) JSBSim directory.\n        ";
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_41get_root_dir(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_root_dir (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_40get_root_dir(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_40get_root_dir(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_root_dir", 0);

  /* "jsbsim.pyx":406
 *         @return the string representing the root (base) JSBSim directory.
 *         """
 *         return self.thisptr.GetRootDir().utf8Str()             # <<<<<<<<<<<<<<
 * 
 *     def get_property_value(self, name):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->thisptr->GetRootDir().utf8Str()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 406, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "jsbsim.pyx":401
 *         return self.thisptr.GetFullAircraftPath().utf8Str()
 * 
 *     def get_root_dir(self):             # <<<<<<<<<<<<<<
 *         """
 *         Retrieves the Root Directory.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGFDMExec.get_root_dir", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":408
 *         return self.thisptr.GetRootDir().utf8Str()
 * 
 *     def get_property_value(self, name):             # <<<<<<<<<<<<<<
 *         """
 *         Retrieves the value of a property.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_43get_property_value(PyObject *__pyx_v_self, PyObject *__pyx_v_name); /*proto*/
static char __pyx_doc_6jsbsim_9FGFDMExec_42get_property_value[] = "\n        Retrieves the value of a property.\n        @param property the name of the property\n        @result the value of the specified property\n        ";
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_43get_property_value(PyObject *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_property_value (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_42get_property_value(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self), ((PyObject *)__pyx_v_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_42get_property_value(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  __Pyx_RefNannySetupContext("get_property_value", 0);
  __Pyx_INCREF(__pyx_v_name);

  /* "jsbsim.pyx":414
 *         @result the value of the specified property
 *         """
 *         name = name.encode()             # <<<<<<<<<<<<<<
 *         return self.thisptr.GetPropertyValue(name)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_name, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 414, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 414, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_name, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "jsbsim.pyx":415
 *         """
 *         name = name.encode()
 *         return self.thisptr.GetPropertyValue(name)             # <<<<<<<<<<<<<<
 * 
 *     def set_property_value(self, name, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_v_name); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 415, __pyx_L1_error)
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->GetPropertyValue(__pyx_t_4)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "jsbsim.pyx":408
 *         return self.thisptr.GetRootDir().utf8Str()
 * 
 *     def get_property_value(self, name):             # <<<<<<<<<<<<<<
 *         """
 *         Retrieves the value of a property.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("jsbsim.FGFDMExec.get_property_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":417
 *         return self.thisptr.GetPropertyValue(name)
 * 
 *     def set_property_value(self, name, value):             # <<<<<<<<<<<<<<
 *         """
 *         Sets a property value.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_45set_property_value(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6jsbsim_9FGFDMExec_44set_property_value[] = "\n        Sets a property value.\n        @param property the property to be set\n        @param value the value to set the property to *\n        ";
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_45set_property_value(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_property_value (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_property_value", 1, 2, 2, 1); __PYX_ERR(1, 417, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_property_value") < 0)) __PYX_ERR(1, 417, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_name = values[0];
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_property_value", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 417, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("jsbsim.FGFDMExec.set_property_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_44set_property_value(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self), __pyx_v_name, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_44set_property_value(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  double __pyx_t_5;
  __Pyx_RefNannySetupContext("set_property_value", 0);

  /* "jsbsim.pyx":423
 *         @param value the value to set the property to *
 *         """
 *         self.thisptr.SetPropertyValue(name.encode(), value)             # <<<<<<<<<<<<<<
 * 
 *     def get_model_name(self):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_name, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 423, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 423, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 423, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 423, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->SetPropertyValue(__pyx_t_4, __pyx_t_5);
  } catch(...) {
    convertJSBSimToPyExc(); if (!PyErr_Occurred()) PyErr_SetString(PyExc_RuntimeError , "Error converting c++ exception.");
    __PYX_ERR(1, 423, __pyx_L1_error)
  }

  /* "jsbsim.pyx":417
 *         return self.thisptr.GetPropertyValue(name)
 * 
 *     def set_property_value(self, name, value):             # <<<<<<<<<<<<<<
 *         """
 *         Sets a property value.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("jsbsim.FGFDMExec.set_property_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":425
 *         self.thisptr.SetPropertyValue(name.encode(), value)
 * 
 *     def get_model_name(self):             # <<<<<<<<<<<<<<
 *         """
 *         Retrieves the model name.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_47get_model_name(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6jsbsim_9FGFDMExec_46get_model_name[] = "\n        Retrieves the model name.\n        ";
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_47get_model_name(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_model_name (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_46get_model_name(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_46get_model_name(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_model_name", 0);

  /* "jsbsim.pyx":429
 *         Retrieves the model name.
 *         """
 *         return self.thisptr.GetModelName()             # <<<<<<<<<<<<<<
 * 
 *     def set_output_directive(self, fname):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->thisptr->GetModelName()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "jsbsim.pyx":425
 *         self.thisptr.SetPropertyValue(name.encode(), value)
 * 
 *     def get_model_name(self):             # <<<<<<<<<<<<<<
 *         """
 *         Retrieves the model name.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGFDMExec.get_model_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":431
 *         return self.thisptr.GetModelName()
 * 
 *     def set_output_directive(self, fname):             # <<<<<<<<<<<<<<
 *         """
 *         Sets the output (logging) mechanism for this run.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_49set_output_directive(PyObject *__pyx_v_self, PyObject *__pyx_v_fname); /*proto*/
static char __pyx_doc_6jsbsim_9FGFDMExec_48set_output_directive[] = "\n        Sets the output (logging) mechanism for this run.\n        Calling this function passes the name of an output directives file to\n        the FGOutput object associated with this run. The call to this function\n        should be made prior to loading an aircraft model. This call results in an\n        FGOutput object being built as the first Output object in the FDMExec-managed\n        list of Output objects that may be created for an aircraft model. If this call\n        is made after an aircraft model is loaded, there is no effect. Any Output\n        objects added by the aircraft model itself (in an &lt;output> element) will be\n        added after this one. Care should be taken not to refer to the same file\n        name.\n        An output directives file contains an &lt;output> &lt;/output> element, within\n        which should be specified the parameters or parameter groups that should\n        be logged.\n        @param fname the filename of an output directives file.\n        ";
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_49set_output_directive(PyObject *__pyx_v_self, PyObject *__pyx_v_fname) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_output_directive (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_48set_output_directive(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self), ((PyObject *)__pyx_v_fname));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_48set_output_directive(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_fname) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  bool __pyx_t_5;
  __Pyx_RefNannySetupContext("set_output_directive", 0);

  /* "jsbsim.pyx":448
 *         @param fname the filename of an output directives file.
 *         """
 *         return self.thisptr.SetOutputDirectives(c_SGPath(fname.encode(), NULL))             # <<<<<<<<<<<<<<
 * 
 *     #def force_output(self, index):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_fname, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 448, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 448, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 448, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_t_5 = __pyx_v_self->thisptr->SetOutputDirectives(SGPath(__pyx_t_4, NULL));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 448, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "jsbsim.pyx":431
 *         return self.thisptr.GetModelName()
 * 
 *     def set_output_directive(self, fname):             # <<<<<<<<<<<<<<
 *         """
 *         Sets the output (logging) mechanism for this run.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("jsbsim.FGFDMExec.set_output_directive", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":456
 *         #self.thisptr.ForceOutput(index)
 * 
 *     def set_logging_rate(self, rate):             # <<<<<<<<<<<<<<
 *         """
 *         Sets the logging rate for all output objects (if any).
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_51set_logging_rate(PyObject *__pyx_v_self, PyObject *__pyx_v_rate); /*proto*/
static char __pyx_doc_6jsbsim_9FGFDMExec_50set_logging_rate[] = "\n        Sets the logging rate for all output objects (if any).\n        ";
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_51set_logging_rate(PyObject *__pyx_v_self, PyObject *__pyx_v_rate) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_logging_rate (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_50set_logging_rate(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self), ((PyObject *)__pyx_v_rate));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_50set_logging_rate(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_rate) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("set_logging_rate", 0);

  /* "jsbsim.pyx":460
 *         Sets the logging rate for all output objects (if any).
 *         """
 *         self.thisptr.SetLoggingRate(rate)             # <<<<<<<<<<<<<<
 * 
 *     def set_output_filename(self, n, fname):
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_rate); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 460, __pyx_L1_error)
  __pyx_v_self->thisptr->SetLoggingRate(__pyx_t_1);

  /* "jsbsim.pyx":456
 *         #self.thisptr.ForceOutput(index)
 * 
 *     def set_logging_rate(self, rate):             # <<<<<<<<<<<<<<
 *         """
 *         Sets the logging rate for all output objects (if any).
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("jsbsim.FGFDMExec.set_logging_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":462
 *         self.thisptr.SetLoggingRate(rate)
 * 
 *     def set_output_filename(self, n, fname):             # <<<<<<<<<<<<<<
 *         """
 *         Sets (or overrides) the output filename
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_53set_output_filename(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6jsbsim_9FGFDMExec_52set_output_filename[] = "\n        Sets (or overrides) the output filename\n        @param n index of file\n        @param fname the name of the file to output data to\n        @return true if successful, false if there is no output specified for the flight model\n        ";
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_53set_output_filename(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_n = 0;
  PyObject *__pyx_v_fname = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_output_filename (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_n,&__pyx_n_s_fname,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fname)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_output_filename", 1, 2, 2, 1); __PYX_ERR(1, 462, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_output_filename") < 0)) __PYX_ERR(1, 462, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_n = values[0];
    __pyx_v_fname = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_output_filename", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 462, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("jsbsim.FGFDMExec.set_output_filename", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_52set_output_filename(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self), __pyx_v_n, __pyx_v_fname);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_52set_output_filename(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_n, PyObject *__pyx_v_fname) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  __Pyx_RefNannySetupContext("set_output_filename", 0);

  /* "jsbsim.pyx":469
 *         @return true if successful, false if there is no output specified for the flight model
 *         """
 *         return self.thisptr.SetOutputFileName(n, fname.encode())             # <<<<<<<<<<<<<<
 * 
 *     def get_output_filename(self, n):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_n); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 469, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_fname, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 469, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 469, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 469, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->SetOutputFileName(__pyx_t_1, __pyx_t_5)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "jsbsim.pyx":462
 *         self.thisptr.SetLoggingRate(rate)
 * 
 *     def set_output_filename(self, n, fname):             # <<<<<<<<<<<<<<
 *         """
 *         Sets (or overrides) the output filename
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("jsbsim.FGFDMExec.set_output_filename", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":471
 *         return self.thisptr.SetOutputFileName(n, fname.encode())
 * 
 *     def get_output_filename(self, n):             # <<<<<<<<<<<<<<
 *         """
 *         Retrieves the current output filename.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_55get_output_filename(PyObject *__pyx_v_self, PyObject *__pyx_v_n); /*proto*/
static char __pyx_doc_6jsbsim_9FGFDMExec_54get_output_filename[] = "\n        Retrieves the current output filename.\n        @param n index of file\n        @return the name of the output file for the first output specified by the flight model.\n            If none is specified, the empty string is returned.\n        ";
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_55get_output_filename(PyObject *__pyx_v_self, PyObject *__pyx_v_n) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_output_filename (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_54get_output_filename(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self), ((PyObject *)__pyx_v_n));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_54get_output_filename(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_n) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_output_filename", 0);

  /* "jsbsim.pyx":478
 *             If none is specified, the empty string is returned.
 *         """
 *         return self.thisptr.GetOutputFileName(n)             # <<<<<<<<<<<<<<
 * 
 *     def do_trim(self, mode):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_n); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 478, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->thisptr->GetOutputFileName(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "jsbsim.pyx":471
 *         return self.thisptr.SetOutputFileName(n, fname.encode())
 * 
 *     def get_output_filename(self, n):             # <<<<<<<<<<<<<<
 *         """
 *         Retrieves the current output filename.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("jsbsim.FGFDMExec.get_output_filename", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":480
 *         return self.thisptr.GetOutputFileName(n)
 * 
 *     def do_trim(self, mode):             # <<<<<<<<<<<<<<
 *         """
 *         Executes trimming in the selected mode.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_57do_trim(PyObject *__pyx_v_self, PyObject *__pyx_v_mode); /*proto*/
static char __pyx_doc_6jsbsim_9FGFDMExec_56do_trim[] = "\n        Executes trimming in the selected mode.\n        @param mode Specifies how to trim:\n            - tLongitudinal=0\n            - tFull\n            - tGround\n            - tPullup\n            - tCustom\n            - tTurn\n            - tNone\n        ";
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_57do_trim(PyObject *__pyx_v_self, PyObject *__pyx_v_mode) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("do_trim (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_56do_trim(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self), ((PyObject *)__pyx_v_mode));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_56do_trim(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_mode) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("do_trim", 0);

  /* "jsbsim.pyx":492
 *             - tNone
 *         """
 *         self.thisptr.DoTrim(mode)             # <<<<<<<<<<<<<<
 * 
 *     def disable_output(self):
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_mode); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 492, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->DoTrim(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 492, __pyx_L1_error)
  }

  /* "jsbsim.pyx":480
 *         return self.thisptr.GetOutputFileName(n)
 * 
 *     def do_trim(self, mode):             # <<<<<<<<<<<<<<
 *         """
 *         Executes trimming in the selected mode.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("jsbsim.FGFDMExec.do_trim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":494
 *         self.thisptr.DoTrim(mode)
 * 
 *     def disable_output(self):             # <<<<<<<<<<<<<<
 *         """
 *         Disables data logging to all outputs.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_59disable_output(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6jsbsim_9FGFDMExec_58disable_output[] = "\n        Disables data logging to all outputs.\n        ";
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_59disable_output(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("disable_output (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_58disable_output(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_58disable_output(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("disable_output", 0);

  /* "jsbsim.pyx":498
 *         Disables data logging to all outputs.
 *         """
 *         self.thisptr.DisableOutput()             # <<<<<<<<<<<<<<
 * 
 *     def enable_output(self):
 */
  __pyx_v_self->thisptr->DisableOutput();

  /* "jsbsim.pyx":494
 *         self.thisptr.DoTrim(mode)
 * 
 *     def disable_output(self):             # <<<<<<<<<<<<<<
 *         """
 *         Disables data logging to all outputs.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":500
 *         self.thisptr.DisableOutput()
 * 
 *     def enable_output(self):             # <<<<<<<<<<<<<<
 *         """
 *         Enables data logging to all outputs.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_61enable_output(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6jsbsim_9FGFDMExec_60enable_output[] = "\n        Enables data logging to all outputs.\n        ";
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_61enable_output(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("enable_output (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_60enable_output(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_60enable_output(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("enable_output", 0);

  /* "jsbsim.pyx":504
 *         Enables data logging to all outputs.
 *         """
 *         self.thisptr.EnableOutput()             # <<<<<<<<<<<<<<
 * 
 *     def hold(self):
 */
  __pyx_v_self->thisptr->EnableOutput();

  /* "jsbsim.pyx":500
 *         self.thisptr.DisableOutput()
 * 
 *     def enable_output(self):             # <<<<<<<<<<<<<<
 *         """
 *         Enables data logging to all outputs.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":506
 *         self.thisptr.EnableOutput()
 * 
 *     def hold(self):             # <<<<<<<<<<<<<<
 *         """
 *         Pauses execution by preventing time from incrementing.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_63hold(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6jsbsim_9FGFDMExec_62hold[] = "\n        Pauses execution by preventing time from incrementing.\n        ";
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_63hold(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("hold (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_62hold(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_62hold(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("hold", 0);

  /* "jsbsim.pyx":510
 *         Pauses execution by preventing time from incrementing.
 *         """
 *         self.thisptr.Hold()             # <<<<<<<<<<<<<<
 * 
 *     def enable_increment_then_hold(self, time_steps):
 */
  __pyx_v_self->thisptr->Hold();

  /* "jsbsim.pyx":506
 *         self.thisptr.EnableOutput()
 * 
 *     def hold(self):             # <<<<<<<<<<<<<<
 *         """
 *         Pauses execution by preventing time from incrementing.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":512
 *         self.thisptr.Hold()
 * 
 *     def enable_increment_then_hold(self, time_steps):             # <<<<<<<<<<<<<<
 *         """
 *         Turn on hold after increment
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_65enable_increment_then_hold(PyObject *__pyx_v_self, PyObject *__pyx_v_time_steps); /*proto*/
static char __pyx_doc_6jsbsim_9FGFDMExec_64enable_increment_then_hold[] = "\n        Turn on hold after increment\n        ";
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_65enable_increment_then_hold(PyObject *__pyx_v_self, PyObject *__pyx_v_time_steps) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("enable_increment_then_hold (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_64enable_increment_then_hold(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self), ((PyObject *)__pyx_v_time_steps));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_64enable_increment_then_hold(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_time_steps) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("enable_increment_then_hold", 0);

  /* "jsbsim.pyx":516
 *         Turn on hold after increment
 *         """
 *         self.thisptr.EnableIncrementThenHold(time_steps)             # <<<<<<<<<<<<<<
 * 
 *     def check_incremental_hold(self):
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_time_steps); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 516, __pyx_L1_error)
  __pyx_v_self->thisptr->EnableIncrementThenHold(__pyx_t_1);

  /* "jsbsim.pyx":512
 *         self.thisptr.Hold()
 * 
 *     def enable_increment_then_hold(self, time_steps):             # <<<<<<<<<<<<<<
 *         """
 *         Turn on hold after increment
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("jsbsim.FGFDMExec.enable_increment_then_hold", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":518
 *         self.thisptr.EnableIncrementThenHold(time_steps)
 * 
 *     def check_incremental_hold(self):             # <<<<<<<<<<<<<<
 *         """
 *         Checks if required to hold afer increment
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_67check_incremental_hold(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6jsbsim_9FGFDMExec_66check_incremental_hold[] = "\n        Checks if required to hold afer increment\n        ";
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_67check_incremental_hold(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("check_incremental_hold (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_66check_incremental_hold(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_66check_incremental_hold(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("check_incremental_hold", 0);

  /* "jsbsim.pyx":522
 *         Checks if required to hold afer increment
 *         """
 *         self.thisptr.CheckIncrementalHold()             # <<<<<<<<<<<<<<
 * 
 *     def resume(self):
 */
  __pyx_v_self->thisptr->CheckIncrementalHold();

  /* "jsbsim.pyx":518
 *         self.thisptr.EnableIncrementThenHold(time_steps)
 * 
 *     def check_incremental_hold(self):             # <<<<<<<<<<<<<<
 *         """
 *         Checks if required to hold afer increment
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":524
 *         self.thisptr.CheckIncrementalHold()
 * 
 *     def resume(self):             # <<<<<<<<<<<<<<
 *         """
 *         Resumes execution from a "Hold".
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_69resume(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6jsbsim_9FGFDMExec_68resume[] = "\n        Resumes execution from a \"Hold\".\n        ";
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_69resume(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("resume (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_68resume(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_68resume(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("resume", 0);

  /* "jsbsim.pyx":528
 *         Resumes execution from a "Hold".
 *         """
 *         self.thisptr.Resume()             # <<<<<<<<<<<<<<
 * 
 *     def holding(self):
 */
  __pyx_v_self->thisptr->Resume();

  /* "jsbsim.pyx":524
 *         self.thisptr.CheckIncrementalHold()
 * 
 *     def resume(self):             # <<<<<<<<<<<<<<
 *         """
 *         Resumes execution from a "Hold".
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":530
 *         self.thisptr.Resume()
 * 
 *     def holding(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns true if the simulation is Holding (i.e. simulation time is not moving).
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_71holding(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6jsbsim_9FGFDMExec_70holding[] = "\n        Returns true if the simulation is Holding (i.e. simulation time is not moving).\n        ";
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_71holding(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("holding (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_70holding(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_70holding(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("holding", 0);

  /* "jsbsim.pyx":534
 *         Returns true if the simulation is Holding (i.e. simulation time is not moving).
 *         """
 *         return self.thisptr.Holding()             # <<<<<<<<<<<<<<
 * 
 *     def reset_to_initial_conditions(self, mode):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->Holding()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 534, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "jsbsim.pyx":530
 *         self.thisptr.Resume()
 * 
 *     def holding(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns true if the simulation is Holding (i.e. simulation time is not moving).
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGFDMExec.holding", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":536
 *         return self.thisptr.Holding()
 * 
 *     def reset_to_initial_conditions(self, mode):             # <<<<<<<<<<<<<<
 *         """
 *         Resets the initial conditions object and prepares the simulation to run
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_73reset_to_initial_conditions(PyObject *__pyx_v_self, PyObject *__pyx_v_mode); /*proto*/
static char __pyx_doc_6jsbsim_9FGFDMExec_72reset_to_initial_conditions[] = "\n        Resets the initial conditions object and prepares the simulation to run\n        again. If mode is set to 1 the output instances will take special actions\n        such as closing the current output file and open a new one with a\n        different name.\n        @param mode Sets the reset mode.*/\n        ";
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_73reset_to_initial_conditions(PyObject *__pyx_v_self, PyObject *__pyx_v_mode) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reset_to_initial_conditions (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_72reset_to_initial_conditions(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self), ((PyObject *)__pyx_v_mode));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_72reset_to_initial_conditions(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_mode) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("reset_to_initial_conditions", 0);

  /* "jsbsim.pyx":544
 *         @param mode Sets the reset mode.*[inserted by cython to avoid comment closer]/
 *         """
 *         self.thisptr.ResetToInitialConditions(mode)             # <<<<<<<<<<<<<<
 * 
 *     def set_debug_level(self, level):
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_mode); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 544, __pyx_L1_error)
  __pyx_v_self->thisptr->ResetToInitialConditions(__pyx_t_1);

  /* "jsbsim.pyx":536
 *         return self.thisptr.Holding()
 * 
 *     def reset_to_initial_conditions(self, mode):             # <<<<<<<<<<<<<<
 *         """
 *         Resets the initial conditions object and prepares the simulation to run
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("jsbsim.FGFDMExec.reset_to_initial_conditions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":546
 *         self.thisptr.ResetToInitialConditions(mode)
 * 
 *     def set_debug_level(self, level):             # <<<<<<<<<<<<<<
 *         """
 *         Sets the debug level.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_75set_debug_level(PyObject *__pyx_v_self, PyObject *__pyx_v_level); /*proto*/
static char __pyx_doc_6jsbsim_9FGFDMExec_74set_debug_level[] = "\n        Sets the debug level.\n        ";
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_75set_debug_level(PyObject *__pyx_v_self, PyObject *__pyx_v_level) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_debug_level (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_74set_debug_level(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self), ((PyObject *)__pyx_v_level));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_74set_debug_level(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_level) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("set_debug_level", 0);

  /* "jsbsim.pyx":550
 *         Sets the debug level.
 *         """
 *         self.thisptr.SetDebugLevel(level)             # <<<<<<<<<<<<<<
 * 
 *     def query_property_catalog(self, check):
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_level); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 550, __pyx_L1_error)
  __pyx_v_self->thisptr->SetDebugLevel(__pyx_t_1);

  /* "jsbsim.pyx":546
 *         self.thisptr.ResetToInitialConditions(mode)
 * 
 *     def set_debug_level(self, level):             # <<<<<<<<<<<<<<
 *         """
 *         Sets the debug level.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("jsbsim.FGFDMExec.set_debug_level", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":552
 *         self.thisptr.SetDebugLevel(level)
 * 
 *     def query_property_catalog(self, check):             # <<<<<<<<<<<<<<
 *         """
 *         Retrieves property or properties matching the supplied string.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_77query_property_catalog(PyObject *__pyx_v_self, PyObject *__pyx_v_check); /*proto*/
static char __pyx_doc_6jsbsim_9FGFDMExec_76query_property_catalog[] = "\n        Retrieves property or properties matching the supplied string.\n        A string is returned that contains a carriage return delimited list of all\n        strings in the property catalog that matches the supplied check string.\n        @param check The string to search for in the property catalog.\n        @return the carriage-return-delimited string containing all matching strings\n            in the catalog.\n        ";
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_77query_property_catalog(PyObject *__pyx_v_self, PyObject *__pyx_v_check) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("query_property_catalog (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_76query_property_catalog(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self), ((PyObject *)__pyx_v_check));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_76query_property_catalog(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_check) {
  PyObject *__pyx_v_catalog = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("query_property_catalog", 0);

  /* "jsbsim.pyx":561
 *             in the catalog.
 *         """
 *         catalog = (self.thisptr.QueryPropertyCatalog(check.encode())).decode('utf-8').rstrip().split('\n')             # <<<<<<<<<<<<<<
 *         if len(catalog) == 1 and catalog[0] == "No matches found":
 *             return []
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_check, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 561, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 561, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 561, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_decode_cpp_string(__pyx_v_self->thisptr->QueryPropertyCatalog(__pyx_t_5), 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_rstrip); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 561, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 561, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_split); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_catalog = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "jsbsim.pyx":562
 *         """
 *         catalog = (self.thisptr.QueryPropertyCatalog(check.encode())).decode('utf-8').rstrip().split('\n')
 *         if len(catalog) == 1 and catalog[0] == "No matches found":             # <<<<<<<<<<<<<<
 *             return []
 *         else:
 */
  __pyx_t_7 = PyObject_Length(__pyx_v_catalog); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(1, 562, __pyx_L1_error)
  __pyx_t_8 = ((__pyx_t_7 == 1) != 0);
  if (__pyx_t_8) {
  } else {
    __pyx_t_6 = __pyx_t_8;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_catalog, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_kp_s_No_matches_found, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(1, 562, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __pyx_t_8;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_6) {

    /* "jsbsim.pyx":563
 *         catalog = (self.thisptr.QueryPropertyCatalog(check.encode())).decode('utf-8').rstrip().split('\n')
 *         if len(catalog) == 1 and catalog[0] == "No matches found":
 *             return []             # <<<<<<<<<<<<<<
 *         else:
 *             return catalog
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 563, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "jsbsim.pyx":562
 *         """
 *         catalog = (self.thisptr.QueryPropertyCatalog(check.encode())).decode('utf-8').rstrip().split('\n')
 *         if len(catalog) == 1 and catalog[0] == "No matches found":             # <<<<<<<<<<<<<<
 *             return []
 *         else:
 */
  }

  /* "jsbsim.pyx":565
 *             return []
 *         else:
 *             return catalog             # <<<<<<<<<<<<<<
 * 
 *     def get_property_catalog(self, check):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_catalog);
    __pyx_r = __pyx_v_catalog;
    goto __pyx_L0;
  }

  /* "jsbsim.pyx":552
 *         self.thisptr.SetDebugLevel(level)
 * 
 *     def query_property_catalog(self, check):             # <<<<<<<<<<<<<<
 *         """
 *         Retrieves property or properties matching the supplied string.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("jsbsim.FGFDMExec.query_property_catalog", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_catalog);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":567
 *             return catalog
 * 
 *     def get_property_catalog(self, check):             # <<<<<<<<<<<<<<
 *         """
 *         Retrieves the property catalog as a dictionary.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_79get_property_catalog(PyObject *__pyx_v_self, PyObject *__pyx_v_check); /*proto*/
static char __pyx_doc_6jsbsim_9FGFDMExec_78get_property_catalog[] = "\n        Retrieves the property catalog as a dictionary.\n        ";
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_79get_property_catalog(PyObject *__pyx_v_self, PyObject *__pyx_v_check) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_property_catalog (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_78get_property_catalog(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self), ((PyObject *)__pyx_v_check));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_78get_property_catalog(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_check) {
  PyObject *__pyx_v_catalog = NULL;
  PyObject *__pyx_v_item = NULL;
  PyObject *__pyx_v_property_name = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("get_property_catalog", 0);

  /* "jsbsim.pyx":571
 *         Retrieves the property catalog as a dictionary.
 *         """
 *         catalog = {}             # <<<<<<<<<<<<<<
 *         for item in self.query_property_catalog(check):
 *             property_name = item.split(" ")[0]  # remove any (RW) flags
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_catalog = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "jsbsim.pyx":572
 *         """
 *         catalog = {}
 *         for item in self.query_property_catalog(check):             # <<<<<<<<<<<<<<
 *             property_name = item.split(" ")[0]  # remove any (RW) flags
 *             catalog[property_name] = self.get_property_value(property_name)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_query_property_catalog); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_check); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 572, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_check};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 572, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_check};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 572, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 572, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_check);
      __Pyx_GIVEREF(__pyx_v_check);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_check);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 572, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 572, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 572, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(1, 572, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 572, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(1, 572, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 572, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_6(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 572, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "jsbsim.pyx":573
 *         catalog = {}
 *         for item in self.query_property_catalog(check):
 *             property_name = item.split(" ")[0]  # remove any (RW) flags             # <<<<<<<<<<<<<<
 *             catalog[property_name] = self.get_property_value(property_name)
 *         return catalog
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_item, __pyx_n_s_split); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 573, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 573, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_4, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 573, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF_SET(__pyx_v_property_name, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "jsbsim.pyx":574
 *         for item in self.query_property_catalog(check):
 *             property_name = item.split(" ")[0]  # remove any (RW) flags
 *             catalog[property_name] = self.get_property_value(property_name)             # <<<<<<<<<<<<<<
 *         return catalog
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_property_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 574, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_3) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_property_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 574, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_property_name};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 574, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_property_name};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 574, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 574, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3); __pyx_t_3 = NULL;
        __Pyx_INCREF(__pyx_v_property_name);
        __Pyx_GIVEREF(__pyx_v_property_name);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_v_property_name);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 574, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(PyDict_SetItem(__pyx_v_catalog, __pyx_v_property_name, __pyx_t_1) < 0)) __PYX_ERR(1, 574, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "jsbsim.pyx":572
 *         """
 *         catalog = {}
 *         for item in self.query_property_catalog(check):             # <<<<<<<<<<<<<<
 *             property_name = item.split(" ")[0]  # remove any (RW) flags
 *             catalog[property_name] = self.get_property_value(property_name)
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "jsbsim.pyx":575
 *             property_name = item.split(" ")[0]  # remove any (RW) flags
 *             catalog[property_name] = self.get_property_value(property_name)
 *         return catalog             # <<<<<<<<<<<<<<
 * 
 *     def print_property_catalog(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_catalog);
  __pyx_r = __pyx_v_catalog;
  goto __pyx_L0;

  /* "jsbsim.pyx":567
 *             return catalog
 * 
 *     def get_property_catalog(self, check):             # <<<<<<<<<<<<<<
 *         """
 *         Retrieves the property catalog as a dictionary.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("jsbsim.FGFDMExec.get_property_catalog", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_catalog);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XDECREF(__pyx_v_property_name);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":577
 *         return catalog
 * 
 *     def print_property_catalog(self):             # <<<<<<<<<<<<<<
 *         """
 *         Print the contents of the property catalog for the loaded aircraft.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_81print_property_catalog(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6jsbsim_9FGFDMExec_80print_property_catalog[] = "\n        Print the contents of the property catalog for the loaded aircraft.\n        ";
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_81print_property_catalog(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("print_property_catalog (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_80print_property_catalog(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_80print_property_catalog(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("print_property_catalog", 0);

  /* "jsbsim.pyx":581
 *         Print the contents of the property catalog for the loaded aircraft.
 *         """
 *         self.thisptr.PrintPropertyCatalog()             # <<<<<<<<<<<<<<
 * 
 *     def set_trim_status(self, status):
 */
  __pyx_v_self->thisptr->PrintPropertyCatalog();

  /* "jsbsim.pyx":577
 *         return catalog
 * 
 *     def print_property_catalog(self):             # <<<<<<<<<<<<<<
 *         """
 *         Print the contents of the property catalog for the loaded aircraft.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":583
 *         self.thisptr.PrintPropertyCatalog()
 * 
 *     def set_trim_status(self, status):             # <<<<<<<<<<<<<<
 *         self.thisptr.SetTrimStatus(status)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_83set_trim_status(PyObject *__pyx_v_self, PyObject *__pyx_v_status); /*proto*/
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_83set_trim_status(PyObject *__pyx_v_self, PyObject *__pyx_v_status) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_trim_status (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_82set_trim_status(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self), ((PyObject *)__pyx_v_status));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_82set_trim_status(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_status) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  __Pyx_RefNannySetupContext("set_trim_status", 0);

  /* "jsbsim.pyx":584
 * 
 *     def set_trim_status(self, status):
 *         self.thisptr.SetTrimStatus(status)             # <<<<<<<<<<<<<<
 * 
 *     def get_trim_status(self):
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_status); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 584, __pyx_L1_error)
  __pyx_v_self->thisptr->SetTrimStatus(__pyx_t_1);

  /* "jsbsim.pyx":583
 *         self.thisptr.PrintPropertyCatalog()
 * 
 *     def set_trim_status(self, status):             # <<<<<<<<<<<<<<
 *         self.thisptr.SetTrimStatus(status)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("jsbsim.FGFDMExec.set_trim_status", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":586
 *         self.thisptr.SetTrimStatus(status)
 * 
 *     def get_trim_status(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.GetTrimStatus()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_85get_trim_status(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_85get_trim_status(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_trim_status (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_84get_trim_status(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_84get_trim_status(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_trim_status", 0);

  /* "jsbsim.pyx":587
 * 
 *     def get_trim_status(self):
 *         return self.thisptr.GetTrimStatus()             # <<<<<<<<<<<<<<
 * 
 *     def get_propulsion_tank_report(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->GetTrimStatus()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "jsbsim.pyx":586
 *         self.thisptr.SetTrimStatus(status)
 * 
 *     def get_trim_status(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.GetTrimStatus()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGFDMExec.get_trim_status", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":589
 *         return self.thisptr.GetTrimStatus()
 * 
 *     def get_propulsion_tank_report(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.GetPropulsionTankReport()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_87get_propulsion_tank_report(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_87get_propulsion_tank_report(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_propulsion_tank_report (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_86get_propulsion_tank_report(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_86get_propulsion_tank_report(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_propulsion_tank_report", 0);

  /* "jsbsim.pyx":590
 * 
 *     def get_propulsion_tank_report(self):
 *         return self.thisptr.GetPropulsionTankReport()             # <<<<<<<<<<<<<<
 * 
 *     def get_sim_time(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->thisptr->GetPropulsionTankReport()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 590, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "jsbsim.pyx":589
 *         return self.thisptr.GetTrimStatus()
 * 
 *     def get_propulsion_tank_report(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.GetPropulsionTankReport()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGFDMExec.get_propulsion_tank_report", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":592
 *         return self.thisptr.GetPropulsionTankReport()
 * 
 *     def get_sim_time(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the cumulative simulation time in seconds.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_89get_sim_time(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6jsbsim_9FGFDMExec_88get_sim_time[] = "\n        Returns the cumulative simulation time in seconds.\n        ";
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_89get_sim_time(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_sim_time (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_88get_sim_time(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_88get_sim_time(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_sim_time", 0);

  /* "jsbsim.pyx":596
 *         Returns the cumulative simulation time in seconds.
 *         """
 *         return self.thisptr.GetSimTime()             # <<<<<<<<<<<<<<
 * 
 *     def get_delta_t(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->GetSimTime()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "jsbsim.pyx":592
 *         return self.thisptr.GetPropulsionTankReport()
 * 
 *     def get_sim_time(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the cumulative simulation time in seconds.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGFDMExec.get_sim_time", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":598
 *         return self.thisptr.GetSimTime()
 * 
 *     def get_delta_t(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the simulation delta T.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_91get_delta_t(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6jsbsim_9FGFDMExec_90get_delta_t[] = "\n        Returns the simulation delta T.\n        ";
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_91get_delta_t(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_delta_t (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_90get_delta_t(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_90get_delta_t(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_delta_t", 0);

  /* "jsbsim.pyx":602
 *         Returns the simulation delta T.
 *         """
 *         return self.thisptr.GetDeltaT()             # <<<<<<<<<<<<<<
 * 
 *     def suspend_integration(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->GetDeltaT()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "jsbsim.pyx":598
 *         return self.thisptr.GetSimTime()
 * 
 *     def get_delta_t(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the simulation delta T.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGFDMExec.get_delta_t", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":604
 *         return self.thisptr.GetDeltaT()
 * 
 *     def suspend_integration(self):             # <<<<<<<<<<<<<<
 *         """
 *         Suspends the simulation and sets the delta T to zero.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_93suspend_integration(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6jsbsim_9FGFDMExec_92suspend_integration[] = "\n        Suspends the simulation and sets the delta T to zero.\n        ";
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_93suspend_integration(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("suspend_integration (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_92suspend_integration(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_92suspend_integration(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("suspend_integration", 0);

  /* "jsbsim.pyx":608
 *         Suspends the simulation and sets the delta T to zero.
 *         """
 *         self.thisptr.SuspendIntegration()             # <<<<<<<<<<<<<<
 * 
 *     def resume_integration(self):
 */
  __pyx_v_self->thisptr->SuspendIntegration();

  /* "jsbsim.pyx":604
 *         return self.thisptr.GetDeltaT()
 * 
 *     def suspend_integration(self):             # <<<<<<<<<<<<<<
 *         """
 *         Suspends the simulation and sets the delta T to zero.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":610
 *         self.thisptr.SuspendIntegration()
 * 
 *     def resume_integration(self):             # <<<<<<<<<<<<<<
 *         """
 *         Resumes the simulation by resetting delta T to the correct value.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_95resume_integration(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6jsbsim_9FGFDMExec_94resume_integration[] = "\n        Resumes the simulation by resetting delta T to the correct value.\n        ";
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_95resume_integration(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("resume_integration (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_94resume_integration(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_94resume_integration(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("resume_integration", 0);

  /* "jsbsim.pyx":614
 *         Resumes the simulation by resetting delta T to the correct value.
 *         """
 *         self.thisptr.ResumeIntegration()             # <<<<<<<<<<<<<<
 * 
 *     def integration_suspended(self):
 */
  __pyx_v_self->thisptr->ResumeIntegration();

  /* "jsbsim.pyx":610
 *         self.thisptr.SuspendIntegration()
 * 
 *     def resume_integration(self):             # <<<<<<<<<<<<<<
 *         """
 *         Resumes the simulation by resetting delta T to the correct value.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":616
 *         self.thisptr.ResumeIntegration()
 * 
 *     def integration_suspended(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the simulation suspension state.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_97integration_suspended(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6jsbsim_9FGFDMExec_96integration_suspended[] = "\n        Returns the simulation suspension state.\n        @return true if suspended, false if executing\n        ";
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_97integration_suspended(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("integration_suspended (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_96integration_suspended(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_96integration_suspended(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("integration_suspended", 0);

  /* "jsbsim.pyx":621
 *         @return true if suspended, false if executing
 *         """
 *         return self.thisptr.IntegrationSuspended()             # <<<<<<<<<<<<<<
 * 
 *     def set_sim_time(self, time):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->IntegrationSuspended()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "jsbsim.pyx":616
 *         self.thisptr.ResumeIntegration()
 * 
 *     def integration_suspended(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the simulation suspension state.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGFDMExec.integration_suspended", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":623
 *         return self.thisptr.IntegrationSuspended()
 * 
 *     def set_sim_time(self, time):             # <<<<<<<<<<<<<<
 *         """
 *         Sets the current sim time.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_99set_sim_time(PyObject *__pyx_v_self, PyObject *__pyx_v_time); /*proto*/
static char __pyx_doc_6jsbsim_9FGFDMExec_98set_sim_time[] = "\n        Sets the current sim time.\n        @param time the current time\n        @return the current simulation time.\n        ";
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_99set_sim_time(PyObject *__pyx_v_self, PyObject *__pyx_v_time) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_sim_time (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_98set_sim_time(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self), ((PyObject *)__pyx_v_time));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_98set_sim_time(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_time) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("set_sim_time", 0);

  /* "jsbsim.pyx":629
 *         @return the current simulation time.
 *         """
 *         return self.thisptr.Setsim_time(time)             # <<<<<<<<<<<<<<
 * 
 *     def set_dt(self, dt):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_time); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 629, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->Setsim_time(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 629, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "jsbsim.pyx":623
 *         return self.thisptr.IntegrationSuspended()
 * 
 *     def set_sim_time(self, time):             # <<<<<<<<<<<<<<
 *         """
 *         Sets the current sim time.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("jsbsim.FGFDMExec.set_sim_time", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":631
 *         return self.thisptr.Setsim_time(time)
 * 
 *     def set_dt(self, dt):             # <<<<<<<<<<<<<<
 *         """
 *         Sets the integration time step for the simulation executive.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_101set_dt(PyObject *__pyx_v_self, PyObject *__pyx_v_dt); /*proto*/
static char __pyx_doc_6jsbsim_9FGFDMExec_100set_dt[] = "\n        Sets the integration time step for the simulation executive.\n        @param dt the time step in seconds.\n        ";
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_101set_dt(PyObject *__pyx_v_self, PyObject *__pyx_v_dt) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_dt (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_100set_dt(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self), ((PyObject *)__pyx_v_dt));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_100set_dt(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_dt) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("set_dt", 0);

  /* "jsbsim.pyx":636
 *         @param dt the time step in seconds.
 *         """
 *         self.thisptr.Setdt(dt)             # <<<<<<<<<<<<<<
 * 
 *     def incr_time(self):
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_dt); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 636, __pyx_L1_error)
  __pyx_v_self->thisptr->Setdt(__pyx_t_1);

  /* "jsbsim.pyx":631
 *         return self.thisptr.Setsim_time(time)
 * 
 *     def set_dt(self, dt):             # <<<<<<<<<<<<<<
 *         """
 *         Sets the integration time step for the simulation executive.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("jsbsim.FGFDMExec.set_dt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":638
 *         self.thisptr.Setdt(dt)
 * 
 *     def incr_time(self):             # <<<<<<<<<<<<<<
 *         """
 *         Increments the simulation time if not in Holding mode. The Frame counter
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_103incr_time(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6jsbsim_9FGFDMExec_102incr_time[] = "\n        Increments the simulation time if not in Holding mode. The Frame counter\n        is also incremented.\n        @return the new simulation time.\n        ";
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_103incr_time(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("incr_time (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_102incr_time(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_102incr_time(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("incr_time", 0);

  /* "jsbsim.pyx":644
 *         @return the new simulation time.
 *         """
 *         return self.thisptr.IncrTime()             # <<<<<<<<<<<<<<
 * 
 *     def get_debug_level(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->IncrTime()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 644, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "jsbsim.pyx":638
 *         self.thisptr.Setdt(dt)
 * 
 *     def incr_time(self):             # <<<<<<<<<<<<<<
 *         """
 *         Increments the simulation time if not in Holding mode. The Frame counter
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGFDMExec.incr_time", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":646
 *         return self.thisptr.IncrTime()
 * 
 *     def get_debug_level(self):             # <<<<<<<<<<<<<<
 *         """
 *         Retrieves the current debug level setting.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_105get_debug_level(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6jsbsim_9FGFDMExec_104get_debug_level[] = "\n        Retrieves the current debug level setting.\n        ";
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_105get_debug_level(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_debug_level (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_104get_debug_level(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_104get_debug_level(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_debug_level", 0);

  /* "jsbsim.pyx":650
 *         Retrieves the current debug level setting.
 *         """
 *         return self.thisptr.GetDebugLevel()             # <<<<<<<<<<<<<<
 * 
 *     def propulsion_init_running(self, n):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->GetDebugLevel()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 650, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "jsbsim.pyx":646
 *         return self.thisptr.IncrTime()
 * 
 *     def get_debug_level(self):             # <<<<<<<<<<<<<<
 *         """
 *         Retrieves the current debug level setting.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGFDMExec.get_debug_level", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":652
 *         return self.thisptr.GetDebugLevel()
 * 
 *     def propulsion_init_running(self, n):             # <<<<<<<<<<<<<<
 *         self.thisptr.GetPropulsion().InitRunning(n)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_107propulsion_init_running(PyObject *__pyx_v_self, PyObject *__pyx_v_n); /*proto*/
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_107propulsion_init_running(PyObject *__pyx_v_self, PyObject *__pyx_v_n) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("propulsion_init_running (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_106propulsion_init_running(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self), ((PyObject *)__pyx_v_n));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_106propulsion_init_running(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_n) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("propulsion_init_running", 0);

  /* "jsbsim.pyx":653
 * 
 *     def propulsion_init_running(self, n):
 *         self.thisptr.GetPropulsion().InitRunning(n)             # <<<<<<<<<<<<<<
 * 
 *     def propulsion_get_num_engines(self):
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_n); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 653, __pyx_L1_error)
  __pyx_v_self->thisptr->GetPropulsion()->InitRunning(__pyx_t_1);

  /* "jsbsim.pyx":652
 *         return self.thisptr.GetDebugLevel()
 * 
 *     def propulsion_init_running(self, n):             # <<<<<<<<<<<<<<
 *         self.thisptr.GetPropulsion().InitRunning(n)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("jsbsim.FGFDMExec.propulsion_init_running", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":655
 *         self.thisptr.GetPropulsion().InitRunning(n)
 * 
 *     def propulsion_get_num_engines(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.GetPropulsion().GetNumEngines()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_109propulsion_get_num_engines(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_109propulsion_get_num_engines(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("propulsion_get_num_engines (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_108propulsion_get_num_engines(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_108propulsion_get_num_engines(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("propulsion_get_num_engines", 0);

  /* "jsbsim.pyx":656
 * 
 *     def propulsion_get_num_engines(self):
 *         return self.thisptr.GetPropulsion().GetNumEngines()             # <<<<<<<<<<<<<<
 * 
 *     def load_ic(self, rstfile, useStoredPath):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->GetPropulsion()->GetNumEngines()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 656, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "jsbsim.pyx":655
 *         self.thisptr.GetPropulsion().InitRunning(n)
 * 
 *     def propulsion_get_num_engines(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.GetPropulsion().GetNumEngines()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGFDMExec.propulsion_get_num_engines", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":658
 *         return self.thisptr.GetPropulsion().GetNumEngines()
 * 
 *     def load_ic(self, rstfile, useStoredPath):             # <<<<<<<<<<<<<<
 *         rstfile = rstfile.encode()
 *         return self.thisptr.GetIC().Load(c_SGPath(rstfile, NULL), useStoredPath)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_111load_ic(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_111load_ic(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_rstfile = 0;
  PyObject *__pyx_v_useStoredPath = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("load_ic (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_rstfile,&__pyx_n_s_useStoredPath,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rstfile)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_useStoredPath)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("load_ic", 1, 2, 2, 1); __PYX_ERR(1, 658, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "load_ic") < 0)) __PYX_ERR(1, 658, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_rstfile = values[0];
    __pyx_v_useStoredPath = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("load_ic", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 658, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("jsbsim.FGFDMExec.load_ic", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_110load_ic(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self), __pyx_v_rstfile, __pyx_v_useStoredPath);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_110load_ic(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, PyObject *__pyx_v_rstfile, PyObject *__pyx_v_useStoredPath) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  bool __pyx_t_5;
  __Pyx_RefNannySetupContext("load_ic", 0);
  __Pyx_INCREF(__pyx_v_rstfile);

  /* "jsbsim.pyx":659
 * 
 *     def load_ic(self, rstfile, useStoredPath):
 *         rstfile = rstfile.encode()             # <<<<<<<<<<<<<<
 *         return self.thisptr.GetIC().Load(c_SGPath(rstfile, NULL), useStoredPath)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_rstfile, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 659, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 659, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 659, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_rstfile, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "jsbsim.pyx":660
 *     def load_ic(self, rstfile, useStoredPath):
 *         rstfile = rstfile.encode()
 *         return self.thisptr.GetIC().Load(c_SGPath(rstfile, NULL), useStoredPath)             # <<<<<<<<<<<<<<
 * 
 *     def get_propagate(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_v_rstfile); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 660, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_useStoredPath); if (unlikely((__pyx_t_5 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 660, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->GetIC()->Load(SGPath(__pyx_t_4, NULL), __pyx_t_5)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "jsbsim.pyx":658
 *         return self.thisptr.GetPropulsion().GetNumEngines()
 * 
 *     def load_ic(self, rstfile, useStoredPath):             # <<<<<<<<<<<<<<
 *         rstfile = rstfile.encode()
 *         return self.thisptr.GetIC().Load(c_SGPath(rstfile, NULL), useStoredPath)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("jsbsim.FGFDMExec.load_ic", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_rstfile);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":662
 *         return self.thisptr.GetIC().Load(c_SGPath(rstfile, NULL), useStoredPath)
 * 
 *     def get_propagate(self):             # <<<<<<<<<<<<<<
 *         propagate = FGPropagate()
 *         propagate.thisptr = self.thisptr.GetPropagate()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_113get_propagate(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_113get_propagate(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_propagate (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_112get_propagate(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_112get_propagate(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self) {
  struct __pyx_obj_6jsbsim_FGPropagate *__pyx_v_propagate = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_propagate", 0);

  /* "jsbsim.pyx":663
 * 
 *     def get_propagate(self):
 *         propagate = FGPropagate()             # <<<<<<<<<<<<<<
 *         propagate.thisptr = self.thisptr.GetPropagate()
 *         return propagate
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6jsbsim_FGPropagate)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 663, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_propagate = ((struct __pyx_obj_6jsbsim_FGPropagate *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "jsbsim.pyx":664
 *     def get_propagate(self):
 *         propagate = FGPropagate()
 *         propagate.thisptr = self.thisptr.GetPropagate()             # <<<<<<<<<<<<<<
 *         return propagate
 * 
 */
  __pyx_v_propagate->thisptr = __pyx_v_self->thisptr->GetPropagate();

  /* "jsbsim.pyx":665
 *         propagate = FGPropagate()
 *         propagate.thisptr = self.thisptr.GetPropagate()
 *         return propagate             # <<<<<<<<<<<<<<
 * 
 *     def get_property_manager(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_propagate));
  __pyx_r = ((PyObject *)__pyx_v_propagate);
  goto __pyx_L0;

  /* "jsbsim.pyx":662
 *         return self.thisptr.GetIC().Load(c_SGPath(rstfile, NULL), useStoredPath)
 * 
 *     def get_propagate(self):             # <<<<<<<<<<<<<<
 *         propagate = FGPropagate()
 *         propagate.thisptr = self.thisptr.GetPropagate()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGFDMExec.get_propagate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_propagate);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":667
 *         return propagate
 * 
 *     def get_property_manager(self):             # <<<<<<<<<<<<<<
 *         pm = FGPropertyManager()
 *         pm.thisptr = self.thisptr.GetPropertyManager()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_115get_property_manager(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_115get_property_manager(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_property_manager (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_114get_property_manager(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_114get_property_manager(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self) {
  struct __pyx_obj_6jsbsim_FGPropertyManager *__pyx_v_pm = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_property_manager", 0);

  /* "jsbsim.pyx":668
 * 
 *     def get_property_manager(self):
 *         pm = FGPropertyManager()             # <<<<<<<<<<<<<<
 *         pm.thisptr = self.thisptr.GetPropertyManager()
 *         return pm
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6jsbsim_FGPropertyManager)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 668, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_pm = ((struct __pyx_obj_6jsbsim_FGPropertyManager *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "jsbsim.pyx":669
 *     def get_property_manager(self):
 *         pm = FGPropertyManager()
 *         pm.thisptr = self.thisptr.GetPropertyManager()             # <<<<<<<<<<<<<<
 *         return pm
 * 
 */
  __pyx_v_pm->thisptr = __pyx_v_self->thisptr->GetPropertyManager();

  /* "jsbsim.pyx":670
 *         pm = FGPropertyManager()
 *         pm.thisptr = self.thisptr.GetPropertyManager()
 *         return pm             # <<<<<<<<<<<<<<
 * 
 *     def get_ground_reactions(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_pm));
  __pyx_r = ((PyObject *)__pyx_v_pm);
  goto __pyx_L0;

  /* "jsbsim.pyx":667
 *         return propagate
 * 
 *     def get_property_manager(self):             # <<<<<<<<<<<<<<
 *         pm = FGPropertyManager()
 *         pm.thisptr = self.thisptr.GetPropertyManager()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGFDMExec.get_property_manager", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_pm);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":672
 *         return pm
 * 
 *     def get_ground_reactions(self):             # <<<<<<<<<<<<<<
 *         grndreact = FGGroundReactions()
 *         grndreact.thisptr = self.thisptr.GetGroundReactions()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_117get_ground_reactions(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_117get_ground_reactions(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_ground_reactions (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_116get_ground_reactions(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_116get_ground_reactions(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self) {
  struct __pyx_obj_6jsbsim_FGGroundReactions *__pyx_v_grndreact = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_ground_reactions", 0);

  /* "jsbsim.pyx":673
 * 
 *     def get_ground_reactions(self):
 *         grndreact = FGGroundReactions()             # <<<<<<<<<<<<<<
 *         grndreact.thisptr = self.thisptr.GetGroundReactions()
 *         return grndreact
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6jsbsim_FGGroundReactions)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 673, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_grndreact = ((struct __pyx_obj_6jsbsim_FGGroundReactions *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "jsbsim.pyx":674
 *     def get_ground_reactions(self):
 *         grndreact = FGGroundReactions()
 *         grndreact.thisptr = self.thisptr.GetGroundReactions()             # <<<<<<<<<<<<<<
 *         return grndreact
 * 
 */
  __pyx_v_grndreact->thisptr = __pyx_v_self->thisptr->GetGroundReactions();

  /* "jsbsim.pyx":675
 *         grndreact = FGGroundReactions()
 *         grndreact.thisptr = self.thisptr.GetGroundReactions()
 *         return grndreact             # <<<<<<<<<<<<<<
 * 
 *     def get_auxiliary(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_grndreact));
  __pyx_r = ((PyObject *)__pyx_v_grndreact);
  goto __pyx_L0;

  /* "jsbsim.pyx":672
 *         return pm
 * 
 *     def get_ground_reactions(self):             # <<<<<<<<<<<<<<
 *         grndreact = FGGroundReactions()
 *         grndreact.thisptr = self.thisptr.GetGroundReactions()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGFDMExec.get_ground_reactions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_grndreact);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":677
 *         return grndreact
 * 
 *     def get_auxiliary(self):             # <<<<<<<<<<<<<<
 *         auxiliary = FGAuxiliary()
 *         auxiliary.thisptr = self.thisptr.GetAuxiliary()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_119get_auxiliary(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_119get_auxiliary(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_auxiliary (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_118get_auxiliary(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_118get_auxiliary(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self) {
  struct __pyx_obj_6jsbsim_FGAuxiliary *__pyx_v_auxiliary = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_auxiliary", 0);

  /* "jsbsim.pyx":678
 * 
 *     def get_auxiliary(self):
 *         auxiliary = FGAuxiliary()             # <<<<<<<<<<<<<<
 *         auxiliary.thisptr = self.thisptr.GetAuxiliary()
 *         return auxiliary
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6jsbsim_FGAuxiliary)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_auxiliary = ((struct __pyx_obj_6jsbsim_FGAuxiliary *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "jsbsim.pyx":679
 *     def get_auxiliary(self):
 *         auxiliary = FGAuxiliary()
 *         auxiliary.thisptr = self.thisptr.GetAuxiliary()             # <<<<<<<<<<<<<<
 *         return auxiliary
 * 
 */
  __pyx_v_auxiliary->thisptr = __pyx_v_self->thisptr->GetAuxiliary();

  /* "jsbsim.pyx":680
 *         auxiliary = FGAuxiliary()
 *         auxiliary.thisptr = self.thisptr.GetAuxiliary()
 *         return auxiliary             # <<<<<<<<<<<<<<
 * 
 *     def get_aerodynamics(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_auxiliary));
  __pyx_r = ((PyObject *)__pyx_v_auxiliary);
  goto __pyx_L0;

  /* "jsbsim.pyx":677
 *         return grndreact
 * 
 *     def get_auxiliary(self):             # <<<<<<<<<<<<<<
 *         auxiliary = FGAuxiliary()
 *         auxiliary.thisptr = self.thisptr.GetAuxiliary()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGFDMExec.get_auxiliary", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_auxiliary);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":682
 *         return auxiliary
 * 
 *     def get_aerodynamics(self):             # <<<<<<<<<<<<<<
 *         aerodynamics = FGAerodynamics()
 *         aerodynamics.thisptr = self.thisptr.GetAerodynamics()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_121get_aerodynamics(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_121get_aerodynamics(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_aerodynamics (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_120get_aerodynamics(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_120get_aerodynamics(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self) {
  struct __pyx_obj_6jsbsim_FGAerodynamics *__pyx_v_aerodynamics = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_aerodynamics", 0);

  /* "jsbsim.pyx":683
 * 
 *     def get_aerodynamics(self):
 *         aerodynamics = FGAerodynamics()             # <<<<<<<<<<<<<<
 *         aerodynamics.thisptr = self.thisptr.GetAerodynamics()
 *         return aerodynamics
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6jsbsim_FGAerodynamics)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 683, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_aerodynamics = ((struct __pyx_obj_6jsbsim_FGAerodynamics *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "jsbsim.pyx":684
 *     def get_aerodynamics(self):
 *         aerodynamics = FGAerodynamics()
 *         aerodynamics.thisptr = self.thisptr.GetAerodynamics()             # <<<<<<<<<<<<<<
 *         return aerodynamics
 * 
 */
  __pyx_v_aerodynamics->thisptr = __pyx_v_self->thisptr->GetAerodynamics();

  /* "jsbsim.pyx":685
 *         aerodynamics = FGAerodynamics()
 *         aerodynamics.thisptr = self.thisptr.GetAerodynamics()
 *         return aerodynamics             # <<<<<<<<<<<<<<
 * 
 *     def get_aircraft(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_aerodynamics));
  __pyx_r = ((PyObject *)__pyx_v_aerodynamics);
  goto __pyx_L0;

  /* "jsbsim.pyx":682
 *         return auxiliary
 * 
 *     def get_aerodynamics(self):             # <<<<<<<<<<<<<<
 *         aerodynamics = FGAerodynamics()
 *         aerodynamics.thisptr = self.thisptr.GetAerodynamics()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGFDMExec.get_aerodynamics", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_aerodynamics);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":687
 *         return aerodynamics
 * 
 *     def get_aircraft(self):             # <<<<<<<<<<<<<<
 *         aircraft = FGAircraft()
 *         aircraft.thisptr = self.thisptr.GetAircraft()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_123get_aircraft(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_123get_aircraft(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_aircraft (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_122get_aircraft(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_122get_aircraft(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self) {
  struct __pyx_obj_6jsbsim_FGAircraft *__pyx_v_aircraft = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_aircraft", 0);

  /* "jsbsim.pyx":688
 * 
 *     def get_aircraft(self):
 *         aircraft = FGAircraft()             # <<<<<<<<<<<<<<
 *         aircraft.thisptr = self.thisptr.GetAircraft()
 *         return aircraft
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6jsbsim_FGAircraft)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_aircraft = ((struct __pyx_obj_6jsbsim_FGAircraft *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "jsbsim.pyx":689
 *     def get_aircraft(self):
 *         aircraft = FGAircraft()
 *         aircraft.thisptr = self.thisptr.GetAircraft()             # <<<<<<<<<<<<<<
 *         return aircraft
 * 
 */
  __pyx_v_aircraft->thisptr = __pyx_v_self->thisptr->GetAircraft();

  /* "jsbsim.pyx":690
 *         aircraft = FGAircraft()
 *         aircraft.thisptr = self.thisptr.GetAircraft()
 *         return aircraft             # <<<<<<<<<<<<<<
 * 
 *     def get_mass_balance(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_aircraft));
  __pyx_r = ((PyObject *)__pyx_v_aircraft);
  goto __pyx_L0;

  /* "jsbsim.pyx":687
 *         return aerodynamics
 * 
 *     def get_aircraft(self):             # <<<<<<<<<<<<<<
 *         aircraft = FGAircraft()
 *         aircraft.thisptr = self.thisptr.GetAircraft()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGFDMExec.get_aircraft", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_aircraft);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":692
 *         return aircraft
 * 
 *     def get_mass_balance(self):             # <<<<<<<<<<<<<<
 *         massbalance = FGMassBalance()
 *         massbalance.thisptr = self.thisptr.GetMassBalance()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_125get_mass_balance(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_125get_mass_balance(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_mass_balance (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_124get_mass_balance(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_124get_mass_balance(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self) {
  struct __pyx_obj_6jsbsim_FGMassBalance *__pyx_v_massbalance = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_mass_balance", 0);

  /* "jsbsim.pyx":693
 * 
 *     def get_mass_balance(self):
 *         massbalance = FGMassBalance()             # <<<<<<<<<<<<<<
 *         massbalance.thisptr = self.thisptr.GetMassBalance()
 *         return massbalance
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6jsbsim_FGMassBalance)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 693, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_massbalance = ((struct __pyx_obj_6jsbsim_FGMassBalance *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "jsbsim.pyx":694
 *     def get_mass_balance(self):
 *         massbalance = FGMassBalance()
 *         massbalance.thisptr = self.thisptr.GetMassBalance()             # <<<<<<<<<<<<<<
 *         return massbalance
 * 
 */
  __pyx_v_massbalance->thisptr = __pyx_v_self->thisptr->GetMassBalance();

  /* "jsbsim.pyx":695
 *         massbalance = FGMassBalance()
 *         massbalance.thisptr = self.thisptr.GetMassBalance()
 *         return massbalance             # <<<<<<<<<<<<<<
 * 
 *     def get_atmosphere(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_massbalance));
  __pyx_r = ((PyObject *)__pyx_v_massbalance);
  goto __pyx_L0;

  /* "jsbsim.pyx":692
 *         return aircraft
 * 
 *     def get_mass_balance(self):             # <<<<<<<<<<<<<<
 *         massbalance = FGMassBalance()
 *         massbalance.thisptr = self.thisptr.GetMassBalance()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGFDMExec.get_mass_balance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_massbalance);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "jsbsim.pyx":697
 *         return massbalance
 * 
 *     def get_atmosphere(self):             # <<<<<<<<<<<<<<
 *         atmosphere = FGAtmosphere()
 *         atmosphere.thisptr = self.thisptr.GetAtmosphere()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_127get_atmosphere(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_127get_atmosphere(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_atmosphere (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_126get_atmosphere(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_126get_atmosphere(struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self) {
  struct __pyx_obj_6jsbsim_FGAtmosphere *__pyx_v_atmosphere = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_atmosphere", 0);

  /* "jsbsim.pyx":698
 * 
 *     def get_atmosphere(self):
 *         atmosphere = FGAtmosphere()             # <<<<<<<<<<<<<<
 *         atmosphere.thisptr = self.thisptr.GetAtmosphere()
 *         return atmosphere
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6jsbsim_FGAtmosphere)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_atmosphere = ((struct __pyx_obj_6jsbsim_FGAtmosphere *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "jsbsim.pyx":699
 *     def get_atmosphere(self):
 *         atmosphere = FGAtmosphere()
 *         atmosphere.thisptr = self.thisptr.GetAtmosphere()             # <<<<<<<<<<<<<<
 *         return atmosphere
 */
  __pyx_v_atmosphere->thisptr = __pyx_v_self->thisptr->GetAtmosphere();

  /* "jsbsim.pyx":700
 *         atmosphere = FGAtmosphere()
 *         atmosphere.thisptr = self.thisptr.GetAtmosphere()
 *         return atmosphere             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_atmosphere));
  __pyx_r = ((PyObject *)__pyx_v_atmosphere);
  goto __pyx_L0;

  /* "jsbsim.pyx":697
 *         return massbalance
 * 
 *     def get_atmosphere(self):             # <<<<<<<<<<<<<<
 *         atmosphere = FGAtmosphere()
 *         atmosphere.thisptr = self.thisptr.GetAtmosphere()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGFDMExec.get_atmosphere", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_atmosphere);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_129__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_129__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_128__reduce_cython__(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_128__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGFDMExec.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_131__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_6jsbsim_9FGFDMExec_131__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6jsbsim_9FGFDMExec_130__setstate_cython__(((struct __pyx_obj_6jsbsim_FGFDMExec *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6jsbsim_9FGFDMExec_130__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6jsbsim_FGFDMExec *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("jsbsim.FGFDMExec.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char const *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == ((char const *)NULL))) __PYX_ERR(0, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_6jsbsim_FGPropagate(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_6jsbsim_FGPropagate(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6jsbsim_FGPropagate[] = {
  {"get_Tl2b", (PyCFunction)__pyx_pw_6jsbsim_11FGPropagate_3get_Tl2b, METH_NOARGS, 0},
  {"get_Tec2b", (PyCFunction)__pyx_pw_6jsbsim_11FGPropagate_5get_Tec2b, METH_NOARGS, 0},
  {"get_uvw", (PyCFunction)__pyx_pw_6jsbsim_11FGPropagate_7get_uvw, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6jsbsim_11FGPropagate_9__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6jsbsim_11FGPropagate_11__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6jsbsim_FGPropagate = {
  PyVarObject_HEAD_INIT(0, 0)
  "jsbsim.FGPropagate", /*tp_name*/
  sizeof(struct __pyx_obj_6jsbsim_FGPropagate), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6jsbsim_FGPropagate, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6jsbsim_FGPropagate, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6jsbsim_11FGPropagate_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6jsbsim_FGPropagate, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6jsbsim_FGPropertyManager(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6jsbsim_17FGPropertyManager_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6jsbsim_FGPropertyManager(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6jsbsim_17FGPropertyManager_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6jsbsim_FGPropertyManager[] = {
  {"hasNode", (PyCFunction)__pyx_pw_6jsbsim_17FGPropertyManager_5hasNode, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6jsbsim_17FGPropertyManager_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6jsbsim_17FGPropertyManager_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6jsbsim_FGPropertyManager = {
  PyVarObject_HEAD_INIT(0, 0)
  "jsbsim.FGPropertyManager", /*tp_name*/
  sizeof(struct __pyx_obj_6jsbsim_FGPropertyManager), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6jsbsim_FGPropertyManager, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6jsbsim_FGPropertyManager, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6jsbsim_FGPropertyManager, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6jsbsim_FGGroundReactions(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_6jsbsim_FGGroundReactions(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6jsbsim_FGGroundReactions[] = {
  {"get_gear_unit", (PyCFunction)__pyx_pw_6jsbsim_17FGGroundReactions_3get_gear_unit, METH_O, 0},
  {"get_num_gear_units", (PyCFunction)__pyx_pw_6jsbsim_17FGGroundReactions_5get_num_gear_units, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6jsbsim_17FGGroundReactions_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6jsbsim_17FGGroundReactions_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6jsbsim_FGGroundReactions = {
  PyVarObject_HEAD_INIT(0, 0)
  "jsbsim.FGGroundReactions", /*tp_name*/
  sizeof(struct __pyx_obj_6jsbsim_FGGroundReactions), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6jsbsim_FGGroundReactions, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6jsbsim_FGGroundReactions, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6jsbsim_17FGGroundReactions_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6jsbsim_FGGroundReactions, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6jsbsim_FGLGear(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_6jsbsim_FGLGear(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6jsbsim_FGLGear[] = {
  {"get_steer_norm", (PyCFunction)__pyx_pw_6jsbsim_7FGLGear_3get_steer_norm, METH_NOARGS, 0},
  {"get_body_x_force", (PyCFunction)__pyx_pw_6jsbsim_7FGLGear_5get_body_x_force, METH_NOARGS, 0},
  {"get_body_y_force", (PyCFunction)__pyx_pw_6jsbsim_7FGLGear_7get_body_y_force, METH_NOARGS, 0},
  {"get_body_z_force", (PyCFunction)__pyx_pw_6jsbsim_7FGLGear_9get_body_z_force, METH_NOARGS, 0},
  {"get_location", (PyCFunction)__pyx_pw_6jsbsim_7FGLGear_11get_location, METH_NOARGS, 0},
  {"get_acting_location", (PyCFunction)__pyx_pw_6jsbsim_7FGLGear_13get_acting_location, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6jsbsim_7FGLGear_15__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6jsbsim_7FGLGear_17__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6jsbsim_FGLGear = {
  PyVarObject_HEAD_INIT(0, 0)
  "jsbsim.FGLGear", /*tp_name*/
  sizeof(struct __pyx_obj_6jsbsim_FGLGear), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6jsbsim_FGLGear, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6jsbsim_FGLGear, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6jsbsim_7FGLGear_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6jsbsim_FGLGear, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6jsbsim_FGAuxiliary(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_6jsbsim_FGAuxiliary(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6jsbsim_FGAuxiliary[] = {
  {"get_Tw2b", (PyCFunction)__pyx_pw_6jsbsim_11FGAuxiliary_3get_Tw2b, METH_NOARGS, 0},
  {"get_Tb2w", (PyCFunction)__pyx_pw_6jsbsim_11FGAuxiliary_5get_Tb2w, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6jsbsim_11FGAuxiliary_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6jsbsim_11FGAuxiliary_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6jsbsim_FGAuxiliary = {
  PyVarObject_HEAD_INIT(0, 0)
  "jsbsim.FGAuxiliary", /*tp_name*/
  sizeof(struct __pyx_obj_6jsbsim_FGAuxiliary), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6jsbsim_FGAuxiliary, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6jsbsim_FGAuxiliary, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6jsbsim_11FGAuxiliary_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6jsbsim_FGAuxiliary, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6jsbsim_FGAerodynamics(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_6jsbsim_FGAerodynamics(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6jsbsim_FGAerodynamics[] = {
  {"get_moments_MRC", (PyCFunction)__pyx_pw_6jsbsim_14FGAerodynamics_3get_moments_MRC, METH_NOARGS, 0},
  {"get_forces", (PyCFunction)__pyx_pw_6jsbsim_14FGAerodynamics_5get_forces, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6jsbsim_14FGAerodynamics_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6jsbsim_14FGAerodynamics_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6jsbsim_FGAerodynamics = {
  PyVarObject_HEAD_INIT(0, 0)
  "jsbsim.FGAerodynamics", /*tp_name*/
  sizeof(struct __pyx_obj_6jsbsim_FGAerodynamics), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6jsbsim_FGAerodynamics, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6jsbsim_FGAerodynamics, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6jsbsim_14FGAerodynamics_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6jsbsim_FGAerodynamics, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6jsbsim_FGAircraft(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_6jsbsim_FGAircraft(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6jsbsim_FGAircraft[] = {
  {"get_xyz_rp", (PyCFunction)__pyx_pw_6jsbsim_10FGAircraft_3get_xyz_rp, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6jsbsim_10FGAircraft_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6jsbsim_10FGAircraft_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6jsbsim_FGAircraft = {
  PyVarObject_HEAD_INIT(0, 0)
  "jsbsim.FGAircraft", /*tp_name*/
  sizeof(struct __pyx_obj_6jsbsim_FGAircraft), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6jsbsim_FGAircraft, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6jsbsim_FGAircraft, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6jsbsim_10FGAircraft_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6jsbsim_FGAircraft, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6jsbsim_FGAtmosphere(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_6jsbsim_FGAtmosphere(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6jsbsim_FGAtmosphere[] = {
  {"set_temperature", (PyCFunction)__pyx_pw_6jsbsim_12FGAtmosphere_3set_temperature, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6jsbsim_12FGAtmosphere_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6jsbsim_12FGAtmosphere_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6jsbsim_FGAtmosphere = {
  PyVarObject_HEAD_INIT(0, 0)
  "jsbsim.FGAtmosphere", /*tp_name*/
  sizeof(struct __pyx_obj_6jsbsim_FGAtmosphere), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6jsbsim_FGAtmosphere, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6jsbsim_FGAtmosphere, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6jsbsim_12FGAtmosphere_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6jsbsim_FGAtmosphere, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6jsbsim_FGMassBalance(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_6jsbsim_FGMassBalance(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6jsbsim_FGMassBalance[] = {
  {"get_xyz_cg", (PyCFunction)__pyx_pw_6jsbsim_13FGMassBalance_3get_xyz_cg, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6jsbsim_13FGMassBalance_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6jsbsim_13FGMassBalance_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6jsbsim_FGMassBalance = {
  PyVarObject_HEAD_INIT(0, 0)
  "jsbsim.FGMassBalance", /*tp_name*/
  sizeof(struct __pyx_obj_6jsbsim_FGMassBalance), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6jsbsim_FGMassBalance, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6jsbsim_FGMassBalance, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6jsbsim_13FGMassBalance_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6jsbsim_FGMassBalance, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6jsbsim_FGFDMExec(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6jsbsim_9FGFDMExec_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6jsbsim_FGFDMExec(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6jsbsim_9FGFDMExec_7__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_6jsbsim_FGFDMExec(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_6jsbsim_FGFDMExec(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_pw_6jsbsim_9FGFDMExec_13__setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyMethodDef __pyx_methods_6jsbsim_FGFDMExec[] = {
  {"simulate", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_3simulate, METH_VARARGS|METH_KEYWORDS, 0},
  {"find_root_dir", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_5find_root_dir, METH_VARARGS|METH_KEYWORDS, 0},
  {"run", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_15run, METH_NOARGS, __pyx_doc_6jsbsim_9FGFDMExec_14run},
  {"run_ic", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_17run_ic, METH_NOARGS, __pyx_doc_6jsbsim_9FGFDMExec_16run_ic},
  {"load_model", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_19load_model, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6jsbsim_9FGFDMExec_18load_model},
  {"load_model_with_paths", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_21load_model_with_paths, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6jsbsim_9FGFDMExec_20load_model_with_paths},
  {"load_script", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_23load_script, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6jsbsim_9FGFDMExec_22load_script},
  {"set_engine_path", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_25set_engine_path, METH_O, __pyx_doc_6jsbsim_9FGFDMExec_24set_engine_path},
  {"set_aircraft_path", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_27set_aircraft_path, METH_O, __pyx_doc_6jsbsim_9FGFDMExec_26set_aircraft_path},
  {"set_systems_path", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_29set_systems_path, METH_O, __pyx_doc_6jsbsim_9FGFDMExec_28set_systems_path},
  {"set_root_dir", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_31set_root_dir, METH_O, __pyx_doc_6jsbsim_9FGFDMExec_30set_root_dir},
  {"get_engine_path", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_33get_engine_path, METH_NOARGS, __pyx_doc_6jsbsim_9FGFDMExec_32get_engine_path},
  {"get_aircraft_path", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_35get_aircraft_path, METH_NOARGS, __pyx_doc_6jsbsim_9FGFDMExec_34get_aircraft_path},
  {"get_systems_path", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_37get_systems_path, METH_NOARGS, __pyx_doc_6jsbsim_9FGFDMExec_36get_systems_path},
  {"get_full_aircraft_path", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_39get_full_aircraft_path, METH_NOARGS, __pyx_doc_6jsbsim_9FGFDMExec_38get_full_aircraft_path},
  {"get_root_dir", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_41get_root_dir, METH_NOARGS, __pyx_doc_6jsbsim_9FGFDMExec_40get_root_dir},
  {"get_property_value", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_43get_property_value, METH_O, __pyx_doc_6jsbsim_9FGFDMExec_42get_property_value},
  {"set_property_value", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_45set_property_value, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6jsbsim_9FGFDMExec_44set_property_value},
  {"get_model_name", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_47get_model_name, METH_NOARGS, __pyx_doc_6jsbsim_9FGFDMExec_46get_model_name},
  {"set_output_directive", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_49set_output_directive, METH_O, __pyx_doc_6jsbsim_9FGFDMExec_48set_output_directive},
  {"set_logging_rate", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_51set_logging_rate, METH_O, __pyx_doc_6jsbsim_9FGFDMExec_50set_logging_rate},
  {"set_output_filename", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_53set_output_filename, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6jsbsim_9FGFDMExec_52set_output_filename},
  {"get_output_filename", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_55get_output_filename, METH_O, __pyx_doc_6jsbsim_9FGFDMExec_54get_output_filename},
  {"do_trim", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_57do_trim, METH_O, __pyx_doc_6jsbsim_9FGFDMExec_56do_trim},
  {"disable_output", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_59disable_output, METH_NOARGS, __pyx_doc_6jsbsim_9FGFDMExec_58disable_output},
  {"enable_output", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_61enable_output, METH_NOARGS, __pyx_doc_6jsbsim_9FGFDMExec_60enable_output},
  {"hold", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_63hold, METH_NOARGS, __pyx_doc_6jsbsim_9FGFDMExec_62hold},
  {"enable_increment_then_hold", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_65enable_increment_then_hold, METH_O, __pyx_doc_6jsbsim_9FGFDMExec_64enable_increment_then_hold},
  {"check_incremental_hold", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_67check_incremental_hold, METH_NOARGS, __pyx_doc_6jsbsim_9FGFDMExec_66check_incremental_hold},
  {"resume", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_69resume, METH_NOARGS, __pyx_doc_6jsbsim_9FGFDMExec_68resume},
  {"holding", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_71holding, METH_NOARGS, __pyx_doc_6jsbsim_9FGFDMExec_70holding},
  {"reset_to_initial_conditions", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_73reset_to_initial_conditions, METH_O, __pyx_doc_6jsbsim_9FGFDMExec_72reset_to_initial_conditions},
  {"set_debug_level", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_75set_debug_level, METH_O, __pyx_doc_6jsbsim_9FGFDMExec_74set_debug_level},
  {"query_property_catalog", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_77query_property_catalog, METH_O, __pyx_doc_6jsbsim_9FGFDMExec_76query_property_catalog},
  {"get_property_catalog", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_79get_property_catalog, METH_O, __pyx_doc_6jsbsim_9FGFDMExec_78get_property_catalog},
  {"print_property_catalog", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_81print_property_catalog, METH_NOARGS, __pyx_doc_6jsbsim_9FGFDMExec_80print_property_catalog},
  {"set_trim_status", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_83set_trim_status, METH_O, 0},
  {"get_trim_status", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_85get_trim_status, METH_NOARGS, 0},
  {"get_propulsion_tank_report", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_87get_propulsion_tank_report, METH_NOARGS, 0},
  {"get_sim_time", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_89get_sim_time, METH_NOARGS, __pyx_doc_6jsbsim_9FGFDMExec_88get_sim_time},
  {"get_delta_t", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_91get_delta_t, METH_NOARGS, __pyx_doc_6jsbsim_9FGFDMExec_90get_delta_t},
  {"suspend_integration", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_93suspend_integration, METH_NOARGS, __pyx_doc_6jsbsim_9FGFDMExec_92suspend_integration},
  {"resume_integration", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_95resume_integration, METH_NOARGS, __pyx_doc_6jsbsim_9FGFDMExec_94resume_integration},
  {"integration_suspended", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_97integration_suspended, METH_NOARGS, __pyx_doc_6jsbsim_9FGFDMExec_96integration_suspended},
  {"set_sim_time", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_99set_sim_time, METH_O, __pyx_doc_6jsbsim_9FGFDMExec_98set_sim_time},
  {"set_dt", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_101set_dt, METH_O, __pyx_doc_6jsbsim_9FGFDMExec_100set_dt},
  {"incr_time", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_103incr_time, METH_NOARGS, __pyx_doc_6jsbsim_9FGFDMExec_102incr_time},
  {"get_debug_level", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_105get_debug_level, METH_NOARGS, __pyx_doc_6jsbsim_9FGFDMExec_104get_debug_level},
  {"propulsion_init_running", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_107propulsion_init_running, METH_O, 0},
  {"propulsion_get_num_engines", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_109propulsion_get_num_engines, METH_NOARGS, 0},
  {"load_ic", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_111load_ic, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_propagate", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_113get_propagate, METH_NOARGS, 0},
  {"get_property_manager", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_115get_property_manager, METH_NOARGS, 0},
  {"get_ground_reactions", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_117get_ground_reactions, METH_NOARGS, 0},
  {"get_auxiliary", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_119get_auxiliary, METH_NOARGS, 0},
  {"get_aerodynamics", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_121get_aerodynamics, METH_NOARGS, 0},
  {"get_aircraft", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_123get_aircraft, METH_NOARGS, 0},
  {"get_mass_balance", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_125get_mass_balance, METH_NOARGS, 0},
  {"get_atmosphere", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_127get_atmosphere, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_129__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6jsbsim_9FGFDMExec_131__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_FGFDMExec = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_6jsbsim_FGFDMExec, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_FGFDMExec = {
  0, /*mp_length*/
  __pyx_pw_6jsbsim_9FGFDMExec_11__getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_6jsbsim_FGFDMExec, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_6jsbsim_FGFDMExec = {
  PyVarObject_HEAD_INIT(0, 0)
  "jsbsim.FGFDMExec", /*tp_name*/
  sizeof(struct __pyx_obj_6jsbsim_FGFDMExec), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6jsbsim_FGFDMExec, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_6jsbsim_9FGFDMExec_9__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_FGFDMExec, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_FGFDMExec, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6jsbsim_FGFDMExec, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6jsbsim_FGFDMExec, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_jsbsim(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_jsbsim},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "jsbsim",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_Can_t_find_root_directory_0, __pyx_k_Can_t_find_root_directory_0, sizeof(__pyx_k_Can_t_find_root_directory_0), 0, 0, 1, 0},
  {&__pyx_kp_s_Could_not_find_JSBSim_root_try_d, __pyx_k_Could_not_find_JSBSim_root_try_d, sizeof(__pyx_k_Could_not_find_JSBSim_root_try_d), 0, 0, 1, 0},
  {&__pyx_n_s_Darwin, __pyx_k_Darwin, sizeof(__pyx_k_Darwin), 0, 0, 1, 1},
  {&__pyx_kp_s_FGFDMExec_root_dir_0_aircraft_pa, __pyx_k_FGFDMExec_root_dir_0_aircraft_pa, sizeof(__pyx_k_FGFDMExec_root_dir_0_aircraft_pa), 0, 0, 1, 0},
  {&__pyx_n_s_IOError, __pyx_k_IOError, sizeof(__pyx_k_IOError), 0, 0, 1, 1},
  {&__pyx_n_s_JSBSIM, __pyx_k_JSBSIM, sizeof(__pyx_k_JSBSIM), 0, 0, 1, 1},
  {&__pyx_n_s_KeyError, __pyx_k_KeyError, sizeof(__pyx_k_KeyError), 0, 0, 1, 1},
  {&__pyx_n_s_Linux, __pyx_k_Linux, sizeof(__pyx_k_Linux), 0, 0, 1, 1},
  {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
  {&__pyx_kp_s_No_matches_found, __pyx_k_No_matches_found, sizeof(__pyx_k_No_matches_found), 0, 0, 1, 0},
  {&__pyx_kp_s_No_property_named, __pyx_k_No_property_named, sizeof(__pyx_k_No_property_named), 0, 0, 1, 0},
  {&__pyx_n_s_T, __pyx_k_T, sizeof(__pyx_k_T), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_Windows, __pyx_k_Windows, sizeof(__pyx_k_Windows), 0, 0, 1, 1},
  {&__pyx_kp_s__23, __pyx_k__23, sizeof(__pyx_k__23), 0, 0, 1, 0},
  {&__pyx_kp_s__25, __pyx_k__25, sizeof(__pyx_k__25), 0, 0, 1, 0},
  {&__pyx_kp_s__29, __pyx_k__29, sizeof(__pyx_k__29), 0, 0, 1, 0},
  {&__pyx_kp_s__31, __pyx_k__31, sizeof(__pyx_k__31), 0, 0, 1, 0},
  {&__pyx_n_s_add_model_to_path, __pyx_k_add_model_to_path, sizeof(__pyx_k_add_model_to_path), 0, 0, 1, 1},
  {&__pyx_n_s_aircraft, __pyx_k_aircraft, sizeof(__pyx_k_aircraft), 0, 0, 1, 1},
  {&__pyx_n_s_aircraft_path, __pyx_k_aircraft_path, sizeof(__pyx_k_aircraft_path), 0, 0, 1, 1},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_delta_t, __pyx_k_delta_t, sizeof(__pyx_k_delta_t), 0, 0, 1, 1},
  {&__pyx_n_s_dt, __pyx_k_dt, sizeof(__pyx_k_dt), 0, 0, 1, 1},
  {&__pyx_kp_s_dt_2, __pyx_k_dt_2, sizeof(__pyx_k_dt_2), 0, 0, 1, 0},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_engine, __pyx_k_engine, sizeof(__pyx_k_engine), 0, 0, 1, 1},
  {&__pyx_n_s_engine_path, __pyx_k_engine_path, sizeof(__pyx_k_engine_path), 0, 0, 1, 1},
  {&__pyx_n_s_environ, __pyx_k_environ, sizeof(__pyx_k_environ), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_find_root_dir, __pyx_k_find_root_dir, sizeof(__pyx_k_find_root_dir), 0, 0, 1, 1},
  {&__pyx_n_s_fname, __pyx_k_fname, sizeof(__pyx_k_fname), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {&__pyx_n_s_get_aircraft_path, __pyx_k_get_aircraft_path, sizeof(__pyx_k_get_aircraft_path), 0, 0, 1, 1},
  {&__pyx_n_s_get_delta_t, __pyx_k_get_delta_t, sizeof(__pyx_k_get_delta_t), 0, 0, 1, 1},
  {&__pyx_n_s_get_engine_path, __pyx_k_get_engine_path, sizeof(__pyx_k_get_engine_path), 0, 0, 1, 1},
  {&__pyx_n_s_get_property_manager, __pyx_k_get_property_manager, sizeof(__pyx_k_get_property_manager), 0, 0, 1, 1},
  {&__pyx_n_s_get_property_value, __pyx_k_get_property_value, sizeof(__pyx_k_get_property_value), 0, 0, 1, 1},
  {&__pyx_n_s_get_root_dir, __pyx_k_get_root_dir, sizeof(__pyx_k_get_root_dir), 0, 0, 1, 1},
  {&__pyx_n_s_get_sim_time, __pyx_k_get_sim_time, sizeof(__pyx_k_get_sim_time), 0, 0, 1, 1},
  {&__pyx_n_s_get_systems_path, __pyx_k_get_systems_path, sizeof(__pyx_k_get_systems_path), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_h, __pyx_k_h, sizeof(__pyx_k_h), 0, 0, 1, 1},
  {&__pyx_n_s_hasNode, __pyx_k_hasNode, sizeof(__pyx_k_hasNode), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_initfile, __pyx_k_initfile, sizeof(__pyx_k_initfile), 0, 0, 1, 1},
  {&__pyx_n_s_isdir, __pyx_k_isdir, sizeof(__pyx_k_isdir), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_mat, __pyx_k_mat, sizeof(__pyx_k_mat), 0, 0, 1, 1},
  {&__pyx_n_s_model, __pyx_k_model, sizeof(__pyx_k_model), 0, 0, 1, 1},
  {&__pyx_n_s_n, __pyx_k_n, sizeof(__pyx_k_n), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_n_s_new_instance, __pyx_k_new_instance, sizeof(__pyx_k_new_instance), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_kp_s_opt_local_share_JSBSim, __pyx_k_opt_local_share_JSBSim, sizeof(__pyx_k_opt_local_share_JSBSim), 0, 0, 1, 0},
  {&__pyx_n_s_os, __pyx_k_os, sizeof(__pyx_k_os), 0, 0, 1, 1},
  {&__pyx_n_s_path, __pyx_k_path, sizeof(__pyx_k_path), 0, 0, 1, 1},
  {&__pyx_n_s_platform, __pyx_k_platform, sizeof(__pyx_k_platform), 0, 0, 1, 1},
  {&__pyx_n_s_pm_root, __pyx_k_pm_root, sizeof(__pyx_k_pm_root), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_query_property_catalog, __pyx_k_query_property_catalog, sizeof(__pyx_k_query_property_catalog), 0, 0, 1, 1},
  {&__pyx_n_s_record_properties, __pyx_k_record_properties, sizeof(__pyx_k_record_properties), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_root_dir, __pyx_k_root_dir, sizeof(__pyx_k_root_dir), 0, 0, 1, 1},
  {&__pyx_n_s_rstfile, __pyx_k_rstfile, sizeof(__pyx_k_rstfile), 0, 0, 1, 1},
  {&__pyx_n_s_rstrip, __pyx_k_rstrip, sizeof(__pyx_k_rstrip), 0, 0, 1, 1},
  {&__pyx_n_s_run, __pyx_k_run, sizeof(__pyx_k_run), 0, 0, 1, 1},
  {&__pyx_n_s_run_ic, __pyx_k_run_ic, sizeof(__pyx_k_run_ic), 0, 0, 1, 1},
  {&__pyx_n_s_script, __pyx_k_script, sizeof(__pyx_k_script), 0, 0, 1, 1},
  {&__pyx_n_s_search_paths, __pyx_k_search_paths, sizeof(__pyx_k_search_paths), 0, 0, 1, 1},
  {&__pyx_kp_s_self_thisptr_cannot_be_converted, __pyx_k_self_thisptr_cannot_be_converted, sizeof(__pyx_k_self_thisptr_cannot_be_converted), 0, 0, 1, 0},
  {&__pyx_n_s_set_aircraft_path, __pyx_k_set_aircraft_path, sizeof(__pyx_k_set_aircraft_path), 0, 0, 1, 1},
  {&__pyx_n_s_set_dt, __pyx_k_set_dt, sizeof(__pyx_k_set_dt), 0, 0, 1, 1},
  {&__pyx_n_s_set_engine_path, __pyx_k_set_engine_path, sizeof(__pyx_k_set_engine_path), 0, 0, 1, 1},
  {&__pyx_n_s_set_property_value, __pyx_k_set_property_value, sizeof(__pyx_k_set_property_value), 0, 0, 1, 1},
  {&__pyx_n_s_set_root_dir, __pyx_k_set_root_dir, sizeof(__pyx_k_set_root_dir), 0, 0, 1, 1},
  {&__pyx_n_s_set_systems_path, __pyx_k_set_systems_path, sizeof(__pyx_k_set_systems_path), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_split, __pyx_k_split, sizeof(__pyx_k_split), 0, 0, 1, 1},
  {&__pyx_n_s_system, __pyx_k_system, sizeof(__pyx_k_system), 0, 0, 1, 1},
  {&__pyx_n_s_systems, __pyx_k_systems, sizeof(__pyx_k_systems), 0, 0, 1, 1},
  {&__pyx_n_s_systems_path, __pyx_k_systems_path, sizeof(__pyx_k_systems_path), 0, 0, 1, 1},
  {&__pyx_n_s_t, __pyx_k_t, sizeof(__pyx_k_t), 0, 0, 1, 1},
  {&__pyx_kp_s_t_2, __pyx_k_t_2, sizeof(__pyx_k_t_2), 0, 0, 1, 0},
  {&__pyx_n_s_t_final, __pyx_k_t_final, sizeof(__pyx_k_t_final), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_unit, __pyx_k_unit, sizeof(__pyx_k_unit), 0, 0, 1, 1},
  {&__pyx_n_s_useStoredPath, __pyx_k_useStoredPath, sizeof(__pyx_k_useStoredPath), 0, 0, 1, 1},
  {&__pyx_kp_s_usr_local_share_JSBSim, __pyx_k_usr_local_share_JSBSim, sizeof(__pyx_k_usr_local_share_JSBSim), 0, 0, 1, 0},
  {&__pyx_kp_s_usr_share_JSBSim, __pyx_k_usr_share_JSBSim, sizeof(__pyx_k_usr_share_JSBSim), 0, 0, 1, 0},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_n_s_verbose, __pyx_k_verbose, sizeof(__pyx_k_verbose), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(1, 54, __pyx_L1_error)
  __pyx_builtin_IOError = __Pyx_GetBuiltinName(__pyx_n_s_IOError); if (!__pyx_builtin_IOError) __PYX_ERR(1, 187, __pyx_L1_error)
  __pyx_builtin_KeyError = __Pyx_GetBuiltinName(__pyx_n_s_KeyError); if (!__pyx_builtin_KeyError) __PYX_ERR(1, 252, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_self_thisptr_cannot_be_converted); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "(tree fragment)":4
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_self_thisptr_cannot_be_converted); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_self_thisptr_cannot_be_converted); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "(tree fragment)":4
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_self_thisptr_cannot_be_converted); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_self_thisptr_cannot_be_converted); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "(tree fragment)":4
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_self_thisptr_cannot_be_converted); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_self_thisptr_cannot_be_converted); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "(tree fragment)":4
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_self_thisptr_cannot_be_converted); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_self_thisptr_cannot_be_converted); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "(tree fragment)":4
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_self_thisptr_cannot_be_converted); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_self_thisptr_cannot_be_converted); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "(tree fragment)":4
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_self_thisptr_cannot_be_converted); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_self_thisptr_cannot_be_converted); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "(tree fragment)":4
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_self_thisptr_cannot_be_converted); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_self_thisptr_cannot_be_converted); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "(tree fragment)":4
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_s_self_thisptr_cannot_be_converted); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "jsbsim.pyx":210
 *     def find_root_dir(self, search_paths=[], verbose=False):
 *         root_dir = None
 *         search_paths.append(os.environ.get("JSBSIM"))             # <<<<<<<<<<<<<<
 *         if platform.system() == "Linux":
 *             search_paths.append("/usr/local/share/JSBSim/")
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_n_s_JSBSIM); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(1, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "jsbsim.pyx":230
 *                 break
 *         if root_dir is None:
 *             raise IOError("Could not find JSBSim root, try "             # <<<<<<<<<<<<<<
 *                           "defining JSBSIM environment variable")
 *         self.set_root_dir(root_dir)
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_kp_s_Could_not_find_JSBSim_root_try_d); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(1, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "jsbsim.pyx":373
 * 
 *         # this is a hack to fix a bug in JSBSim
 *         self.set_engine_path("engine")             # <<<<<<<<<<<<<<
 *         self.set_aircraft_path("aircraft")
 *         self.set_systems_path("systems")
 */
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_n_s_engine); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(1, 373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "jsbsim.pyx":374
 *         # this is a hack to fix a bug in JSBSim
 *         self.set_engine_path("engine")
 *         self.set_aircraft_path("aircraft")             # <<<<<<<<<<<<<<
 *         self.set_systems_path("systems")
 * 
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_n_s_aircraft); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(1, 374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "jsbsim.pyx":375
 *         self.set_engine_path("engine")
 *         self.set_aircraft_path("aircraft")
 *         self.set_systems_path("systems")             # <<<<<<<<<<<<<<
 * 
 *     def get_engine_path(self):
 */
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_n_s_systems); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(1, 375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "jsbsim.pyx":561
 *             in the catalog.
 *         """
 *         catalog = (self.thisptr.QueryPropertyCatalog(check.encode())).decode('utf-8').rstrip().split('\n')             # <<<<<<<<<<<<<<
 *         if len(catalog) == 1 and catalog[0] == "No matches found":
 *             return []
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_kp_s__29); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(1, 561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "jsbsim.pyx":573
 *         catalog = {}
 *         for item in self.query_property_catalog(check):
 *             property_name = item.split(" ")[0]  # remove any (RW) flags             # <<<<<<<<<<<<<<
 *             catalog[property_name] = self.get_property_value(property_name)
 *         return catalog
 */
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_kp_s__31); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(1, 573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(1, 1, __pyx_L1_error);
  __pyx_float_0_0 = PyFloat_FromDouble(0.0); if (unlikely(!__pyx_float_0_0)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_modinit_global_init_code(void); /*proto*/
static int __Pyx_modinit_variable_export_code(void); /*proto*/
static int __Pyx_modinit_function_export_code(void); /*proto*/
static int __Pyx_modinit_type_init_code(void); /*proto*/
static int __Pyx_modinit_type_import_code(void); /*proto*/
static int __Pyx_modinit_variable_import_code(void); /*proto*/
static int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_6jsbsim_FGPropagate) < 0) __PYX_ERR(1, 29, __pyx_L1_error)
  __pyx_type_6jsbsim_FGPropagate.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6jsbsim_FGPropagate.tp_dictoffset && __pyx_type_6jsbsim_FGPropagate.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6jsbsim_FGPropagate.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttrString(__pyx_m, "FGPropagate", (PyObject *)&__pyx_type_6jsbsim_FGPropagate) < 0) __PYX_ERR(1, 29, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6jsbsim_FGPropagate) < 0) __PYX_ERR(1, 29, __pyx_L1_error)
  __pyx_ptype_6jsbsim_FGPropagate = &__pyx_type_6jsbsim_FGPropagate;
  if (PyType_Ready(&__pyx_type_6jsbsim_FGPropertyManager) < 0) __PYX_ERR(1, 45, __pyx_L1_error)
  __pyx_type_6jsbsim_FGPropertyManager.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6jsbsim_FGPropertyManager.tp_dictoffset && __pyx_type_6jsbsim_FGPropertyManager.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6jsbsim_FGPropertyManager.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttrString(__pyx_m, "FGPropertyManager", (PyObject *)&__pyx_type_6jsbsim_FGPropertyManager) < 0) __PYX_ERR(1, 45, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6jsbsim_FGPropertyManager) < 0) __PYX_ERR(1, 45, __pyx_L1_error)
  __pyx_ptype_6jsbsim_FGPropertyManager = &__pyx_type_6jsbsim_FGPropertyManager;
  if (PyType_Ready(&__pyx_type_6jsbsim_FGGroundReactions) < 0) __PYX_ERR(1, 69, __pyx_L1_error)
  __pyx_type_6jsbsim_FGGroundReactions.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6jsbsim_FGGroundReactions.tp_dictoffset && __pyx_type_6jsbsim_FGGroundReactions.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6jsbsim_FGGroundReactions.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttrString(__pyx_m, "FGGroundReactions", (PyObject *)&__pyx_type_6jsbsim_FGGroundReactions) < 0) __PYX_ERR(1, 69, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6jsbsim_FGGroundReactions) < 0) __PYX_ERR(1, 69, __pyx_L1_error)
  __pyx_ptype_6jsbsim_FGGroundReactions = &__pyx_type_6jsbsim_FGGroundReactions;
  if (PyType_Ready(&__pyx_type_6jsbsim_FGLGear) < 0) __PYX_ERR(1, 84, __pyx_L1_error)
  __pyx_type_6jsbsim_FGLGear.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6jsbsim_FGLGear.tp_dictoffset && __pyx_type_6jsbsim_FGLGear.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6jsbsim_FGLGear.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttrString(__pyx_m, "FGLGear", (PyObject *)&__pyx_type_6jsbsim_FGLGear) < 0) __PYX_ERR(1, 84, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6jsbsim_FGLGear) < 0) __PYX_ERR(1, 84, __pyx_L1_error)
  __pyx_ptype_6jsbsim_FGLGear = &__pyx_type_6jsbsim_FGLGear;
  if (PyType_Ready(&__pyx_type_6jsbsim_FGAuxiliary) < 0) __PYX_ERR(1, 109, __pyx_L1_error)
  __pyx_type_6jsbsim_FGAuxiliary.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6jsbsim_FGAuxiliary.tp_dictoffset && __pyx_type_6jsbsim_FGAuxiliary.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6jsbsim_FGAuxiliary.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttrString(__pyx_m, "FGAuxiliary", (PyObject *)&__pyx_type_6jsbsim_FGAuxiliary) < 0) __PYX_ERR(1, 109, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6jsbsim_FGAuxiliary) < 0) __PYX_ERR(1, 109, __pyx_L1_error)
  __pyx_ptype_6jsbsim_FGAuxiliary = &__pyx_type_6jsbsim_FGAuxiliary;
  if (PyType_Ready(&__pyx_type_6jsbsim_FGAerodynamics) < 0) __PYX_ERR(1, 122, __pyx_L1_error)
  __pyx_type_6jsbsim_FGAerodynamics.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6jsbsim_FGAerodynamics.tp_dictoffset && __pyx_type_6jsbsim_FGAerodynamics.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6jsbsim_FGAerodynamics.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttrString(__pyx_m, "FGAerodynamics", (PyObject *)&__pyx_type_6jsbsim_FGAerodynamics) < 0) __PYX_ERR(1, 122, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6jsbsim_FGAerodynamics) < 0) __PYX_ERR(1, 122, __pyx_L1_error)
  __pyx_ptype_6jsbsim_FGAerodynamics = &__pyx_type_6jsbsim_FGAerodynamics;
  if (PyType_Ready(&__pyx_type_6jsbsim_FGAircraft) < 0) __PYX_ERR(1, 135, __pyx_L1_error)
  __pyx_type_6jsbsim_FGAircraft.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6jsbsim_FGAircraft.tp_dictoffset && __pyx_type_6jsbsim_FGAircraft.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6jsbsim_FGAircraft.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttrString(__pyx_m, "FGAircraft", (PyObject *)&__pyx_type_6jsbsim_FGAircraft) < 0) __PYX_ERR(1, 135, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6jsbsim_FGAircraft) < 0) __PYX_ERR(1, 135, __pyx_L1_error)
  __pyx_ptype_6jsbsim_FGAircraft = &__pyx_type_6jsbsim_FGAircraft;
  if (PyType_Ready(&__pyx_type_6jsbsim_FGAtmosphere) < 0) __PYX_ERR(1, 145, __pyx_L1_error)
  __pyx_type_6jsbsim_FGAtmosphere.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6jsbsim_FGAtmosphere.tp_dictoffset && __pyx_type_6jsbsim_FGAtmosphere.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6jsbsim_FGAtmosphere.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttrString(__pyx_m, "FGAtmosphere", (PyObject *)&__pyx_type_6jsbsim_FGAtmosphere) < 0) __PYX_ERR(1, 145, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6jsbsim_FGAtmosphere) < 0) __PYX_ERR(1, 145, __pyx_L1_error)
  __pyx_ptype_6jsbsim_FGAtmosphere = &__pyx_type_6jsbsim_FGAtmosphere;
  if (PyType_Ready(&__pyx_type_6jsbsim_FGMassBalance) < 0) __PYX_ERR(1, 155, __pyx_L1_error)
  __pyx_type_6jsbsim_FGMassBalance.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6jsbsim_FGMassBalance.tp_dictoffset && __pyx_type_6jsbsim_FGMassBalance.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6jsbsim_FGMassBalance.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttrString(__pyx_m, "FGMassBalance", (PyObject *)&__pyx_type_6jsbsim_FGMassBalance) < 0) __PYX_ERR(1, 155, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6jsbsim_FGMassBalance) < 0) __PYX_ERR(1, 155, __pyx_L1_error)
  __pyx_ptype_6jsbsim_FGMassBalance = &__pyx_type_6jsbsim_FGMassBalance;
  if (PyType_Ready(&__pyx_type_6jsbsim_FGFDMExec) < 0) __PYX_ERR(1, 166, __pyx_L1_error)
  __pyx_type_6jsbsim_FGFDMExec.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6jsbsim_FGFDMExec.tp_dictoffset && __pyx_type_6jsbsim_FGFDMExec.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6jsbsim_FGFDMExec.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttrString(__pyx_m, "FGFDMExec", (PyObject *)&__pyx_type_6jsbsim_FGFDMExec) < 0) __PYX_ERR(1, 166, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6jsbsim_FGFDMExec) < 0) __PYX_ERR(1, 166, __pyx_L1_error)
  __pyx_ptype_6jsbsim_FGFDMExec = &__pyx_type_6jsbsim_FGFDMExec;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION < 3
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC void
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#else
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (!(defined(__cplusplus)) || (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ > 4)))
    #define CYTHON_SMALL_CODE __attribute__((optimize("Os")))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initjsbsim(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initjsbsim(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_jsbsim(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_jsbsim(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        result = PyDict_SetItemString(moddict, to_name, value);
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__") < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static int __pyx_pymod_exec_jsbsim(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m && __pyx_m == __pyx_pyinit_module) return 0;
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_jsbsim(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(1, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("jsbsim", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(1, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(1, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_jsbsim) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(1, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "jsbsim")) {
      if (unlikely(PyDict_SetItemString(modules, "jsbsim", __pyx_m) < 0)) __PYX_ERR(1, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() != 0)) goto __pyx_L1_error;
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif

  /* "jsbsim.pyx":18
 * # this program; if not, see <http://www.gnu.org/licenses/>
 * 
 * import os, platform, numpy             # <<<<<<<<<<<<<<
 * 
 * cdef convertToNumpyMat(const c_FGMatrix33& m):
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_os, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_os, __pyx_t_1) < 0) __PYX_ERR(1, 18, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_platform, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_platform, __pyx_t_1) < 0) __PYX_ERR(1, 18, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_numpy, __pyx_t_1) < 0) __PYX_ERR(1, 18, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "jsbsim.pyx":190
 *             self.set_root_dir(root_dir)
 * 
 *     def simulate(self, record_properties=[], t_final=1, dt=1.0/120, verbose=False):             # <<<<<<<<<<<<<<
 *         y = {}
 *         t = []
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__19 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyFloat_FromDouble((1.0 / 120.0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__20 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "jsbsim.pyx":208
 *         return (t,y)
 * 
 *     def find_root_dir(self, search_paths=[], verbose=False):             # <<<<<<<<<<<<<<
 *         root_dir = None
 *         search_paths.append(os.environ.get("JSBSIM"))
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__21 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "jsbsim.pyx":1
 * # PyJSBSim a JSBSim python interface using cython.             # <<<<<<<<<<<<<<
 * #
 * # Copyright (c) 2013 James Goppert
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init jsbsim", 0, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init jsbsim");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* GetModuleGlobalName */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    if (likely(result)) {
        Py_INCREF(result);
    } else if (unlikely(PyErr_Occurred())) {
        result = NULL;
    } else {
#else
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

/* PyCFunctionFastCall */
    #if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
    #if CYTHON_FAST_PYCALL
#include "frameobject.h"
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = f->f_localsplus;
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
    #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
    #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
    #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* RaiseArgTupleInvalid */
    static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* KeywordStringCheck */
    static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* PyErrFetchRestore */
    #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
    #if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* RaiseDoubleKeywords */
    static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
    static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* PyObjectCallNoArg */
    #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* ArgTypeTest */
      static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* PyObjectCallMethod1 */
      static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = NULL;
#if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *args;
            PyObject *function = PyMethod_GET_FUNCTION(method);
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyCFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            args = PyTuple_New(2);
            if (unlikely(!args)) goto done;
            Py_INCREF(self);
            PyTuple_SET_ITEM(args, 0, self);
            Py_INCREF(arg);
            PyTuple_SET_ITEM(args, 1, arg);
            Py_INCREF(function);
            result = __Pyx_PyObject_Call(function, args, NULL);
            Py_DECREF(args);
            Py_DECREF(function);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallOneArg(method, arg);
    goto done;
done:
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method, *result;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) return NULL;
    result = __Pyx__PyObject_CallMethod1(method, arg);
    Py_DECREF(method);
    return result;
}

/* append */
      static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

/* DictGetItem */
      #if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            PyObject* args = PyTuple_Pack(1, key);
            if (likely(args))
                PyErr_SetObject(PyExc_KeyError, args);
            Py_XDECREF(args);
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* BytesEquals */
      static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
      static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* decode_c_bytes */
      static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    if (unlikely((start < 0) | (stop < 0))) {
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    if (stop > length)
        stop = length;
    length = stop - start;
    if (unlikely(length <= 0))
        return PyUnicode_FromUnicode(NULL, 0);
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* GetItemInt */
      static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely((0 <= wrapped_i) & (wrapped_i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely((0 <= wrapped_i) & (wrapped_i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* PyObject_GenericGetAttrNoDict */
      #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
      #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetupReduce */
      static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name_2);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_cython); if (unlikely(!reduce_cython)) goto BAD;
            ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto BAD;
            ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto BAD;
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate_cython); if (unlikely(!setstate_cython)) goto BAD;
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto BAD;
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto GOOD;
BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* Import */
      static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* CLineInTraceback */
      #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
      use_cline = __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback);
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (PyObject_Not(use_cline) != 0) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
      static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
      #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
      #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
      static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* Print */
      #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

/* CIntToPy */
      static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
      static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
      static CYTHON_INLINE enum JSBSim::FGAtmosphere::eTemperature __Pyx_PyInt_As_enum__JSBSim_3a__3a_FGAtmosphere_3a__3a_eTemperature(PyObject *x) {
    const enum JSBSim::FGAtmosphere::eTemperature neg_one = (enum JSBSim::FGAtmosphere::eTemperature) -1, const_zero = (enum JSBSim::FGAtmosphere::eTemperature) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(enum JSBSim::FGAtmosphere::eTemperature) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(enum JSBSim::FGAtmosphere::eTemperature, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (enum JSBSim::FGAtmosphere::eTemperature) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum JSBSim::FGAtmosphere::eTemperature) 0;
                case  1: __PYX_VERIFY_RETURN_INT(enum JSBSim::FGAtmosphere::eTemperature, digit, digits[0])
                case 2:
                    if (8 * sizeof(enum JSBSim::FGAtmosphere::eTemperature) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum JSBSim::FGAtmosphere::eTemperature, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum JSBSim::FGAtmosphere::eTemperature) >= 2 * PyLong_SHIFT) {
                            return (enum JSBSim::FGAtmosphere::eTemperature) (((((enum JSBSim::FGAtmosphere::eTemperature)digits[1]) << PyLong_SHIFT) | (enum JSBSim::FGAtmosphere::eTemperature)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum JSBSim::FGAtmosphere::eTemperature) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum JSBSim::FGAtmosphere::eTemperature, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum JSBSim::FGAtmosphere::eTemperature) >= 3 * PyLong_SHIFT) {
                            return (enum JSBSim::FGAtmosphere::eTemperature) (((((((enum JSBSim::FGAtmosphere::eTemperature)digits[2]) << PyLong_SHIFT) | (enum JSBSim::FGAtmosphere::eTemperature)digits[1]) << PyLong_SHIFT) | (enum JSBSim::FGAtmosphere::eTemperature)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum JSBSim::FGAtmosphere::eTemperature) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum JSBSim::FGAtmosphere::eTemperature, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum JSBSim::FGAtmosphere::eTemperature) >= 4 * PyLong_SHIFT) {
                            return (enum JSBSim::FGAtmosphere::eTemperature) (((((((((enum JSBSim::FGAtmosphere::eTemperature)digits[3]) << PyLong_SHIFT) | (enum JSBSim::FGAtmosphere::eTemperature)digits[2]) << PyLong_SHIFT) | (enum JSBSim::FGAtmosphere::eTemperature)digits[1]) << PyLong_SHIFT) | (enum JSBSim::FGAtmosphere::eTemperature)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (enum JSBSim::FGAtmosphere::eTemperature) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(enum JSBSim::FGAtmosphere::eTemperature) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum JSBSim::FGAtmosphere::eTemperature, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum JSBSim::FGAtmosphere::eTemperature) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum JSBSim::FGAtmosphere::eTemperature, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum JSBSim::FGAtmosphere::eTemperature) 0;
                case -1: __PYX_VERIFY_RETURN_INT(enum JSBSim::FGAtmosphere::eTemperature, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(enum JSBSim::FGAtmosphere::eTemperature,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(enum JSBSim::FGAtmosphere::eTemperature) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum JSBSim::FGAtmosphere::eTemperature, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum JSBSim::FGAtmosphere::eTemperature) - 1 > 2 * PyLong_SHIFT) {
                            return (enum JSBSim::FGAtmosphere::eTemperature) (((enum JSBSim::FGAtmosphere::eTemperature)-1)*(((((enum JSBSim::FGAtmosphere::eTemperature)digits[1]) << PyLong_SHIFT) | (enum JSBSim::FGAtmosphere::eTemperature)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(enum JSBSim::FGAtmosphere::eTemperature) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum JSBSim::FGAtmosphere::eTemperature, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum JSBSim::FGAtmosphere::eTemperature) - 1 > 2 * PyLong_SHIFT) {
                            return (enum JSBSim::FGAtmosphere::eTemperature) ((((((enum JSBSim::FGAtmosphere::eTemperature)digits[1]) << PyLong_SHIFT) | (enum JSBSim::FGAtmosphere::eTemperature)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(enum JSBSim::FGAtmosphere::eTemperature) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum JSBSim::FGAtmosphere::eTemperature, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum JSBSim::FGAtmosphere::eTemperature) - 1 > 3 * PyLong_SHIFT) {
                            return (enum JSBSim::FGAtmosphere::eTemperature) (((enum JSBSim::FGAtmosphere::eTemperature)-1)*(((((((enum JSBSim::FGAtmosphere::eTemperature)digits[2]) << PyLong_SHIFT) | (enum JSBSim::FGAtmosphere::eTemperature)digits[1]) << PyLong_SHIFT) | (enum JSBSim::FGAtmosphere::eTemperature)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum JSBSim::FGAtmosphere::eTemperature) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum JSBSim::FGAtmosphere::eTemperature, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum JSBSim::FGAtmosphere::eTemperature) - 1 > 3 * PyLong_SHIFT) {
                            return (enum JSBSim::FGAtmosphere::eTemperature) ((((((((enum JSBSim::FGAtmosphere::eTemperature)digits[2]) << PyLong_SHIFT) | (enum JSBSim::FGAtmosphere::eTemperature)digits[1]) << PyLong_SHIFT) | (enum JSBSim::FGAtmosphere::eTemperature)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(enum JSBSim::FGAtmosphere::eTemperature) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum JSBSim::FGAtmosphere::eTemperature, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum JSBSim::FGAtmosphere::eTemperature) - 1 > 4 * PyLong_SHIFT) {
                            return (enum JSBSim::FGAtmosphere::eTemperature) (((enum JSBSim::FGAtmosphere::eTemperature)-1)*(((((((((enum JSBSim::FGAtmosphere::eTemperature)digits[3]) << PyLong_SHIFT) | (enum JSBSim::FGAtmosphere::eTemperature)digits[2]) << PyLong_SHIFT) | (enum JSBSim::FGAtmosphere::eTemperature)digits[1]) << PyLong_SHIFT) | (enum JSBSim::FGAtmosphere::eTemperature)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum JSBSim::FGAtmosphere::eTemperature) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum JSBSim::FGAtmosphere::eTemperature, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum JSBSim::FGAtmosphere::eTemperature) - 1 > 4 * PyLong_SHIFT) {
                            return (enum JSBSim::FGAtmosphere::eTemperature) ((((((((((enum JSBSim::FGAtmosphere::eTemperature)digits[3]) << PyLong_SHIFT) | (enum JSBSim::FGAtmosphere::eTemperature)digits[2]) << PyLong_SHIFT) | (enum JSBSim::FGAtmosphere::eTemperature)digits[1]) << PyLong_SHIFT) | (enum JSBSim::FGAtmosphere::eTemperature)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(enum JSBSim::FGAtmosphere::eTemperature) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum JSBSim::FGAtmosphere::eTemperature, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum JSBSim::FGAtmosphere::eTemperature) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum JSBSim::FGAtmosphere::eTemperature, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            enum JSBSim::FGAtmosphere::eTemperature val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (enum JSBSim::FGAtmosphere::eTemperature) -1;
        }
    } else {
        enum JSBSim::FGAtmosphere::eTemperature val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (enum JSBSim::FGAtmosphere::eTemperature) -1;
        val = __Pyx_PyInt_As_enum__JSBSim_3a__3a_FGAtmosphere_3a__3a_eTemperature(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to enum JSBSim::FGAtmosphere::eTemperature");
    return (enum JSBSim::FGAtmosphere::eTemperature) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to enum JSBSim::FGAtmosphere::eTemperature");
    return (enum JSBSim::FGAtmosphere::eTemperature) -1;
}

/* PrintOne */
      #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            goto error;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        goto error;
    if (PyFile_WriteString("\n", f) < 0)
        goto error;
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
    /* the line below is just to avoid C compiler
     * warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}
#else
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_Pack(1, o);
    if (unlikely(!arg_tuple))
        return -1;
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}
#endif

/* CIntFromPy */
      static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
      #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
      static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
      static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
